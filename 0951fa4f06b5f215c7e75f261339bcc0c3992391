{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "c7e5a471_07217745",
        "filename": "core/java/android/hardware/fingerprint/FingerprintManager.java",
        "patchSetId": 1
      },
      "lineNbr": 1196,
      "author": {
        "id": 1565948
      },
      "writtenOn": "2024-01-12T00:43:58Z",
      "side": 1,
      "message": "Would something like `FingerprintManager#registerBiometricStateListener` work for your use case instead?\n\nFor example: https://source.corp.google.com/h/googleplex-android/platform/superproject/main/+/main:frameworks/base/packages/SystemUI/src/com/android/systemui/biometrics/AuthController.java;drc\u003d7f193a2c8d9c316f74509fa08d429104eb954209;l\u003d330",
      "revId": "0951fa4f06b5f215c7e75f261339bcc0c3992391",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "62fcf11e_9a1cc6d0",
        "filename": "core/java/android/hardware/fingerprint/FingerprintManager.java",
        "patchSetId": 1
      },
      "lineNbr": 1196,
      "author": {
        "id": 1137063
      },
      "writtenOn": "2024-01-12T02:53:37Z",
      "side": 1,
      "message": "It can, but it would be necessary for TrustManagerService to mirror the state for every face and fingerprint sensor.  It\u0027s more convenient to query the state from a service that already has it.",
      "parentUuid": "c7e5a471_07217745",
      "revId": "0951fa4f06b5f215c7e75f261339bcc0c3992391",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dc7009c6_7fcfde20",
        "filename": "core/java/android/hardware/fingerprint/FingerprintManager.java",
        "patchSetId": 1
      },
      "lineNbr": 1196,
      "author": {
        "id": 1565948
      },
      "writtenOn": "2024-01-12T03:28:58Z",
      "side": 1,
      "message": "Is that a problem? Devices don\u0027t have many sensors so there\u0027s isn\u0027t much state. These `sensorId`s are a bit misleading as having more than one fingerprint sensor has never been used or properly tested and we\u0027ve discussed removing it to simplify.\n\nHow often do you expect to call this? We\u0027ve been trying to limit / reduce these kinds of APIs because they have been a big source of jank (less concerning if it\u0027s all local calls, but I\u0027d still prefer avoid new APIs like this if possible).",
      "parentUuid": "62fcf11e_9a1cc6d0",
      "revId": "0951fa4f06b5f215c7e75f261339bcc0c3992391",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4a0d1449_134ea87f",
        "filename": "core/java/android/hardware/fingerprint/FingerprintManager.java",
        "patchSetId": 1
      },
      "lineNbr": 1196,
      "author": {
        "id": 1137063
      },
      "writtenOn": "2024-01-12T04:40:09Z",
      "side": 1,
      "message": "For each biometric type supported by Keyguard (fingerprint and face), the mirrored state would have to be something like `Map\u003cInteger, Map\u003cInteger, Boolean\u003e\u003e`, to keep track of the enrollment state of each sensor for each user.  It seems unnecessarily complex to mirror this when it\u0027s already available in another service running in the same process.\n\nThe biometrics framework supports multiple fingerprint sensors, and Keyguard appears to allow the device to be unlocked using any one.  So I assumed that feature was there for a reason.  If we have approval from the biometrics team to disregard that and consider only one fingerprint sensor, we can use `FingerprintManager#hasEnrolledFingerprints(int userId)`, and this CL isn\u0027t necessary, and likewise for the face sensors.  (Or we can use the state listener to mirror a simplified state of two booleans per user, corresponding to whether the user has a non-strong fingerprint and face enrolled.)\n\nTrustManagerService needs to know whether these enrollments exist each time the device is locked.  So, that\u0027s when the calls would happen if we go with the direct calls.",
      "parentUuid": "dc7009c6_7fcfde20",
      "revId": "0951fa4f06b5f215c7e75f261339bcc0c3992391",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "75905ec9_73c0fe03",
        "filename": "core/java/android/hardware/fingerprint/FingerprintManager.java",
        "patchSetId": 1
      },
      "lineNbr": 1196,
      "author": {
        "id": 1565948
      },
      "writtenOn": "2024-01-12T18:11:30Z",
      "side": 1,
      "message": "\u003e The biometrics framework supports multiple fingerprint sensors, and Keyguard appears to allow the device to be unlocked using any one.\n\nIn theory that\u0027s true, but like I said even though the APIs reflect that I\u0027m not sure that multiple sensors have ever actually worked. There are many cases in the code where it assumes there is only one sensor. Since it\u0027s never been used, those cases have never been fixed or reported as bugs. I\u0027d like to remove it from the API to clarify that but that takes time that we haven\u0027t had, and it hasn\u0027t caused any real harm beyond questions like this.\n\n\u003e Or we can use the state listener\n\nI\u0027d prefer this as this is the API that we migrated keyguard to also use. Using two booleans seems fine (though if you want to safeguard against the unlikely situation where multiple sensors is actually tested to stay in sync with the current API I don\u0027t think a `Map\u003cInteger, Map\u003cInteger, Boolean\u003e\u003e` or defining a custom DS to track that is that difficult either).\n\nThat said, we migrated keyguard to do this because of all the jank caused by excessive calls to this and similar APIs. In your case if everything is local I\u0027m not opposed to adding this API - my concern is largely because if we add it here it might end up being used in other parts of the platform again and that has caused problems in sysui, settings, etc. in the past.",
      "parentUuid": "4a0d1449_134ea87f",
      "revId": "0951fa4f06b5f215c7e75f261339bcc0c3992391",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}