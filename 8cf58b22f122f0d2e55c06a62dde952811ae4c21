{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "6b7b13dc_d909b7ae",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1128729
      },
      "writtenOn": "2020-11-27T08:54:22Z",
      "side": 1,
      "message": "Hi Michael,\n\nI am working on GSI (generic system image) `aosp_arm64` (and `aosp_x86_64`) supportting both `zygote64_32` and `zygote64` devices at same time. It means, we can flash the `system.img` of `aosp_arm64` on a either `zygote64_32` or `zygote64` device. The Android framework in the `system.img` the can detect the hardware and decided what to do dynamically.\n\nSo far, we use the property `ro.zygote` in vendor partition to decide which `init.zygote*.rc` should be loaded. However, the `Build.SUPPORTED_*_ABIS` in framework come from the properties `ro.product.cpu.abilist` which are defined in system partition. They could not consistent with ``ro.zygote` in vendor. For example, it is `ro.zygote \u003d zygote64` in the vendor of a 64-bit only device, but `ro.product.cpu.abilist` always contains 32bits ABI in the system of `aosp_arm64`.\n\nMy idea is `Build.SUPPORTED_*_ABIS` should come from the properties `ro.vendor.product.cpu.abilist*` which are define in vendor. And these properties are able to describe the correct supporting ABIs on the device.\n\nDo you think it is reasonable?",
      "revId": "8cf58b22f122f0d2e55c06a62dde952811ae4c21",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9466efd0_014f452b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1006497
      },
      "writtenOn": "2020-11-27T14:55:09Z",
      "side": 1,
      "message": "Given these are already coming from vendor BoardConfig files, seems reasonable to me.\n\nCan we move this to use go/sysprop-api at the same time though? That way we\u0027re appropriately tracking these as API.",
      "revId": "8cf58b22f122f0d2e55c06a62dde952811ae4c21",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5e3680b3_ac36dc48",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2020-11-29T23:49:36Z",
      "side": 1,
      "message": "I see many places referencing ro.product.cpu.abilist*, not ro.vendor.product.cpu.abilist*. We are not sure if there has been an implicit assumption that these Java APIs are from the sysprops.\n\nIf this change is just for consistency, I\u0027d rather not have this.\n\nI think, ideally, the abilist should be synthesized by reading sysprops from multiple partitions (ro.\u003cpart\u003e.product.cpu.abilist). Either vendor or system alone can\u0027t be the sole source of truth for this information.",
      "revId": "8cf58b22f122f0d2e55c06a62dde952811ae4c21",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6c0803fe_169699db",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1128729
      },
      "writtenOn": "2020-12-28T09:47:47Z",
      "side": 1,
      "message": "Thanks Michael for your suggestion.\n\nI took some evaluation about making these properties to be system property API. My opinion is we don\u0027t need to it this time. Because:\n\n1. `Build.SUPPORTED(_32_BIT|_64_BIT|)_ABIS` are already framework API. https://developer.android.com/reference/android/os/Build#SUPPORTED_ABIS\n2. `ro.vendor.product.cpu.abilist*` is not defined by any module. We don\u0027t have a suitable `.sysprop` file for these system properties. If we still want to do it, we may create a new patch for all the properties of building system (like ro.build.*).",
      "parentUuid": "9466efd0_014f452b",
      "revId": "8cf58b22f122f0d2e55c06a62dde952811ae4c21",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fef07826_fc93b253",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1128729
      },
      "writtenOn": "2020-12-28T09:47:47Z",
      "side": 1,
      "message": "Thanks for your reminder. Your concern is reasonable. \n\nMaybe let\u0027s focus on `Build.SUPPORTED(_32_BIT|_64_BIT|)_ABIS` here. According to the code reference to these variables:\n\nhttps://source.corp.google.com/search?q\u003dpackage:%5Eandroid$%20SUPPORTED(_32_BIT%7C_64_BIT%7C)_ABIS%20case:yes%20file:%5C.java$\n\nWe may understand that the users use `Build.SUPPORTED(_32_BIT|_64_BIT|)_ABIS` to know the CPU capability on the platform. The capability should be defined by vendor. For example, if the system property `ro.zygote` in vendor is `zygote64`, the platform capability should be 64 bits only and Build.SUPPORTED_32_BIT_ABIS should be empty as `ro.vendor.product.cpu.abilist32` defined.\n\nThus, I thought `Build.SUPPORTED(_32_BIT|_64_BIT|)_ABIS` from `ro.vendor.product.cpu.abilist*` is a better choice.",
      "parentUuid": "5e3680b3_ac36dc48",
      "revId": "8cf58b22f122f0d2e55c06a62dde952811ae4c21",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "98233d31_a452597b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2020-12-29T07:06:52Z",
      "side": 1,
      "message": "You are right in that Build.SUPPORTED_*_APIS should be affected by configs in the vendor partition. But that doesn\u0027t mean that vendor should be the only source of truth about ABI.\n\nAnother point from me is that the properties ro.product.cpu.abilist.* are already unofficial APIs, which is unfortunate though.\n\nFor your purpose, can you make ro.product.cpu.abilist.* to be dynamically fetched from ro.vendor.product.cpu.abilist.* instead of being statically set to TARGET_CPU_ABI_LIST?\n\nWe are doing the same already in https://source.corp.google.com/android/system/core/init/property_service.cpp;rcl\u003ddfed6268d343b414122c7c273568ccf924b7aad4;l\u003d792",
      "parentUuid": "fef07826_fc93b253",
      "revId": "8cf58b22f122f0d2e55c06a62dde952811ae4c21",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d18ffef8_c714b7e7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1128729
      },
      "writtenOn": "2020-12-30T07:31:02Z",
      "side": 1,
      "message": "\u003e You are right in that Build.SUPPORTED_*_APIS should be affected by configs in the vendor partition. But that doesn\u0027t mean that vendor should be the only source of truth about ABI.\n\u003e \n\u003e Another point from me is that the properties ro.product.cpu.abilist.* are already unofficial APIs, which is unfortunate though.\n\u003e \n\u003e For your purpose, can you make ro.product.cpu.abilist.* to be dynamically fetched from ro.vendor.product.cpu.abilist.* instead of being statically set to TARGET_CPU_ABI_LIST?\n\u003e \n\u003e We are doing the same already in https://source.corp.google.com/android/system/core/init/property_service.cpp;rcl\u003ddfed6268d343b414122c7c273568ccf924b7aad4;l\u003d792\n\nReviewed again on `ro.*.product.cpu.abilist.*`. Except `ro.product.cpu.abilist.*`, there are only `vendor` and `odm`.\n\nhttp://cs/android/build/make/core/main.mk?l\u003d288\u0026rcl\u003df4cde477e42c6c11881392051f1c5edd20502140\nhttp://cs/android/build/make/core/main.mk?l\u003d306\u0026rcl\u003df4cde477e42c6c11881392051f1c5edd20502140\n\nIt makes sense to me to let ro.product.cpu.abilist.* to be fetched dynamically.\n\nI think I can reference the code for `ro.product.*` to do it. Will create a sub bug. However, because we need the patch on Q, I am not sure if it will be easy to back to Q. If the new patch is not easy to back port to Q, I could still cherry-pick the patch to `android10-gsi`. Will check it later.",
      "parentUuid": "98233d31_a452597b",
      "revId": "8cf58b22f122f0d2e55c06a62dde952811ae4c21",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}