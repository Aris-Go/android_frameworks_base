{
  "comments": [
    {
      "key": {
        "uuid": "2f6b9475_0f313ae2",
        "filename": "core/java/android/view/LayoutInflater.java",
        "patchSetId": 1
      },
      "lineNbr": 817,
      "author": {
        "id": 1060493
      },
      "writtenOn": "2018-12-14T19:22:56Z",
      "side": 1,
      "message": "You should prevent anyone from using any new hidden APIs with reflection. You may as well black list them immediately.",
      "range": {
        "startLine": 817,
        "startChar": 0,
        "endLine": 817,
        "endChar": 24
      },
      "revId": "2addfed05001d559ed6f3dafde3526e31e2f89e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "754dfd8c_f12b5c1d",
        "filename": "core/java/android/view/LayoutInflater.java",
        "patchSetId": 1
      },
      "lineNbr": 817,
      "author": {
        "id": 1335232
      },
      "writtenOn": "2018-12-14T19:41:09Z",
      "side": 1,
      "message": "Good idea. I need to double check that that\u0027s feasible (actually, the way I have it now may not even work).\n\nWe still need to call this method from code the view compiler generates, but I think that might look like app code and not framework code. Also, if we eventually allow precompiled views to be built in to apps, then apps will need to be able to call this method directly.\n\nI\u0027ll investigate some more.",
      "parentUuid": "2f6b9475_0f313ae2",
      "range": {
        "startLine": 817,
        "startChar": 0,
        "endLine": 817,
        "endChar": 24
      },
      "revId": "2addfed05001d559ed6f3dafde3526e31e2f89e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0d72bb95_29a9ab5f",
        "filename": "core/java/android/view/LayoutInflater.java",
        "patchSetId": 1
      },
      "lineNbr": 817,
      "author": {
        "id": 1060493
      },
      "writtenOn": "2018-12-14T19:58:43Z",
      "side": 1,
      "message": "If we want this to be accessible from a compiler, we must make this a public API. If it is on-device generated, I consider that ok hidden API.\n\nI thought only reflection would cause a call to be blocked. I didn\u0027t think it mattered which code was making the call. You\u0027re going to be making direct calls to this code. Is my understanding correct?",
      "parentUuid": "754dfd8c_f12b5c1d",
      "range": {
        "startLine": 817,
        "startChar": 0,
        "endLine": 817,
        "endChar": 24
      },
      "revId": "2addfed05001d559ed6f3dafde3526e31e2f89e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c467f1ca_dc7409b9",
        "filename": "core/java/android/view/LayoutInflater.java",
        "patchSetId": 1
      },
      "lineNbr": 817,
      "author": {
        "id": 1335232
      },
      "writtenOn": "2018-12-14T23:05:51Z",
      "side": 1,
      "message": "I tried this out with these methods on the blacklist, and I got the following exception when trying to use a precompiled layout:\n\n    2018-12-14 14:54:10.417 3196-3196/com.example.eholk.myfirstapp W/holk.myfirstap: Accessing hidden method Landroid/view/LayoutInflater;-\u003etryCreateViewGroup(Landroid/view/View;Ljava/lang/String;Landroid/content/Context;Landroid/util/AttributeSet;)Landroid/view/ViewGroup; (blacklist, linking)\n\nSo it seems like the blacklist won\u0027t work, but I suspect that means the @UnsupportedAppUsage is the wrong choice.\n\nMaybe it\u0027s okay to make this a supported API? After all, people extending their LayoutInflater might want access to this too.\n\nI\u0027ll look around to see if there are any other options.",
      "parentUuid": "0d72bb95_29a9ab5f",
      "range": {
        "startLine": 817,
        "startChar": 0,
        "endLine": 817,
        "endChar": 24
      },
      "revId": "2addfed05001d559ed6f3dafde3526e31e2f89e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fd076d7f_de58d4a7",
        "filename": "core/java/android/view/LayoutInflater.java",
        "patchSetId": 1
      },
      "lineNbr": 817,
      "author": {
        "id": 1335232
      },
      "writtenOn": "2018-12-14T23:37:22Z",
      "side": 1,
      "message": "I just talked with agampe@ to get a better idea of the space of possibilities here.\n\nIn the near-term, it seems like the light greylist (which I think @UnsupportedAppUsage does) is the way to go. This is basically an internal API that we don\u0027t want to make part of the SDK just yet, but it needs to be called from an application\u0027s context. The light-greylist gives us that option.\n\nLonger term, I could see a case for going lighter or darker. For going lighter, apps may want to do their own custom inflation or include precompiled layouts, and these methods would be helpful. I don\u0027t really want to freeze the API just yet, but I don\u0027t foresee too many changes, and changing it will probably be difficult anyway.\n\nIf we instead want to go darker, agampe@ suggested having the LayoutInflater load the compiled views from a classloader that has hidden API checks disabled, which would still give the precompiled layout code the ability to call these methods. This would take more implementation effort, but it may be useful as there are some other cases where what are effectively system libraries are loaded from an application context.",
      "parentUuid": "c467f1ca_dc7409b9",
      "range": {
        "startLine": 817,
        "startChar": 0,
        "endLine": 817,
        "endChar": 24
      },
      "revId": "2addfed05001d559ed6f3dafde3526e31e2f89e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "46172174_a7d991cb",
        "filename": "core/java/android/view/LayoutInflater.java",
        "patchSetId": 1
      },
      "lineNbr": 817,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2018-12-17T11:06:20Z",
      "side": 1,
      "message": "We can chat about this offline, if you\u0027d like, but in general the preference is that if it\u0027s meant to be visible to apps, it should be public API. The expectation with @UnsupportedAppUsage is that it is used by legacy apps and should be deprecated in the future. There\u0027s also no CTS testing on it.\n\nOther options is @SystemApi - people don\u0027t fully agree on its definition but i\u0027ve recently heard hackbod@ say it is intended for internal use with support for more than one release. That seems to fit your use case.\n\nDepending on how the dex code is generated and loaded, we could also consider loading it as \"platform dex file\", in which case it could access framework code without any restrictions.",
      "parentUuid": "fd076d7f_de58d4a7",
      "range": {
        "startLine": 817,
        "startChar": 0,
        "endLine": 817,
        "endChar": 24
      },
      "revId": "2addfed05001d559ed6f3dafde3526e31e2f89e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b94b858d_b43bead8",
        "filename": "core/java/android/view/LayoutInflater.java",
        "patchSetId": 1
      },
      "lineNbr": 817,
      "author": {
        "id": 1060493
      },
      "writtenOn": "2018-12-17T17:34:20Z",
      "side": 1,
      "message": "FWIW, I don\u0027t think this is a particularly dangerous API to add to the public. tryCreateViewGroup on the other hand seems like an unnecessary public API as it just does a cast.\n\nYou will have to return an @Nullable view and likewise mark the nullability of all the parameters.",
      "parentUuid": "46172174_a7d991cb",
      "range": {
        "startLine": 817,
        "startChar": 0,
        "endLine": 817,
        "endChar": 24
      },
      "revId": "2addfed05001d559ed6f3dafde3526e31e2f89e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}