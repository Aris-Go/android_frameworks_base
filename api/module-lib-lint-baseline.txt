// Baseline format: 1.0
ActionValue: android.net.tethering.TetheringConstants#EXTRA_ADD_TETHER_TYPE:
    Inconsistent extra value; expected `android.net.tethering.extra.ADD_TETHER_TYPE`, was `extraAddTetherType`
ActionValue: android.net.tethering.TetheringConstants#EXTRA_PROVISION_CALLBACK:
    Inconsistent extra value; expected `android.net.tethering.extra.PROVISION_CALLBACK`, was `extraProvisionCallback`
ActionValue: android.net.tethering.TetheringConstants#EXTRA_REM_TETHER_TYPE:
    Inconsistent extra value; expected `android.net.tethering.extra.REM_TETHER_TYPE`, was `extraRemTetherType`
ActionValue: android.net.tethering.TetheringConstants#EXTRA_RUN_PROVISION:
    Inconsistent extra value; expected `android.net.tethering.extra.RUN_PROVISION`, was `extraRunProvision`
ActionValue: android.net.tethering.TetheringConstants#EXTRA_SET_ALARM:
    Inconsistent extra value; expected `android.net.tethering.extra.SET_ALARM`, was `extraSetAlarm`
ActionValue: android.net.tethering.TetheringManager#ACTION_TETHER_STATE_CHANGED:
    Inconsistent action value; expected `android.net.tethering.action.TETHER_STATE_CHANGED`, was `android.net.conn.TETHER_STATE_CHANGED`
ActionValue: android.net.tethering.TetheringManager#EXTRA_ACTIVE_LOCAL_ONLY:
    Inconsistent extra value; expected `android.net.tethering.extra.ACTIVE_LOCAL_ONLY`, was `android.net.extra.ACTIVE_LOCAL_ONLY`
ActionValue: android.net.tethering.TetheringManager#EXTRA_ACTIVE_TETHER:
    Inconsistent extra value; expected `android.net.tethering.extra.ACTIVE_TETHER`, was `tetherArray`
ActionValue: android.net.tethering.TetheringManager#EXTRA_AVAILABLE_TETHER:
    Inconsistent extra value; expected `android.net.tethering.extra.AVAILABLE_TETHER`, was `availableArray`
ActionValue: android.net.tethering.TetheringManager#EXTRA_ERRORED_TETHER:
    Inconsistent extra value; expected `android.net.tethering.extra.ERRORED_TETHER`, was `erroredArray`


ManagerConstructor: android.net.tethering.TetheringManager#TetheringManager(android.content.Context, java.util.function.Supplier<android.os.IBinder>):
    Managers must always be obtained from Context; no direct constructors


PrivateSuperclass: android.location.GnssAntennaInfo.PhaseCenterVariationCorrections:
    Public class android.location.GnssAntennaInfo.PhaseCenterVariationCorrections extends private class android.location.GnssAntennaInfo.SphericalCorrections
PrivateSuperclass: android.location.GnssAntennaInfo.SignalGainCorrections:
    Public class android.location.GnssAntennaInfo.SignalGainCorrections extends private class android.location.GnssAntennaInfo.SphericalCorrections
