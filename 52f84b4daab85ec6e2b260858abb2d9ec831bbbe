{
  "comments": [
    {
      "key": {
        "uuid": "285ad6bb_b683ba2c",
        "filename": "core/java/android/net/NetworkStats.java",
        "patchSetId": 10
      },
      "lineNbr": 26,
      "author": {
        "id": 1306837
      },
      "writtenOn": "2020-01-09T14:30:45Z",
      "side": 1,
      "message": "Oops",
      "range": {
        "startLine": 26,
        "startChar": 15,
        "endLine": 26,
        "endChar": 22
      },
      "revId": "52f84b4daab85ec6e2b260858abb2d9ec831bbbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b475cfec_3bf62868",
        "filename": "packages/Tethering/src/com/android/server/connectivity/tethering/OffloadController.java",
        "patchSetId": 10
      },
      "lineNbr": 136,
      "author": {
        "id": 1015428
      },
      "writtenOn": "2020-01-09T08:59:48Z",
      "side": 1,
      "message": "This is a pretty bad situation, probably it warrants a wtf so at least we learn about it.",
      "range": {
        "startLine": 136,
        "startChar": 0,
        "endLine": 136,
        "endChar": 67
      },
      "revId": "52f84b4daab85ec6e2b260858abb2d9ec831bbbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6b7fad9b_2d151a55",
        "filename": "packages/Tethering/src/com/android/server/connectivity/tethering/OffloadController.java",
        "patchSetId": 10
      },
      "lineNbr": 136,
      "author": {
        "id": 1306837
      },
      "writtenOn": "2020-01-09T14:30:45Z",
      "side": 1,
      "message": "Doesn\u0027t have .wtf in SharedLog.\nChanged to Log.wtf.\nHowever this prints in different place.\nSee if this works for you.",
      "parentUuid": "b475cfec_3bf62868",
      "range": {
        "startLine": 136,
        "startChar": 0,
        "endLine": 136,
        "endChar": 67
      },
      "revId": "52f84b4daab85ec6e2b260858abb2d9ec831bbbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7db32111_fae99b95",
        "filename": "packages/Tethering/src/com/android/server/connectivity/tethering/OffloadController.java",
        "patchSetId": 10
      },
      "lineNbr": 136,
      "author": {
        "id": 1015428
      },
      "writtenOn": "2020-01-10T15:19:31Z",
      "side": 1,
      "message": "Sure",
      "parentUuid": "6b7fad9b_2d151a55",
      "range": {
        "startLine": 136,
        "startChar": 0,
        "endLine": 136,
        "endChar": 67
      },
      "revId": "52f84b4daab85ec6e2b260858abb2d9ec831bbbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c1cbccb6_9df2c4d5",
        "filename": "packages/Tethering/src/com/android/server/connectivity/tethering/OffloadController.java",
        "patchSetId": 10
      },
      "lineNbr": 222,
      "author": {
        "id": 1015428
      },
      "writtenOn": "2020-01-09T08:59:48Z",
      "side": 1,
      "message": "Because mStatsProvider and mStatsProviderCb are different binder objects there is no ordering between them. There is no constraint that onLimitReached must arrive after pushTetherStats right ? If there is we have a problem.",
      "range": {
        "startLine": 219,
        "startChar": 24,
        "endLine": 222,
        "endChar": 88
      },
      "revId": "52f84b4daab85ec6e2b260858abb2d9ec831bbbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e075a0bb_56f65dcb",
        "filename": "packages/Tethering/src/com/android/server/connectivity/tethering/OffloadController.java",
        "patchSetId": 10
      },
      "lineNbr": 222,
      "author": {
        "id": 1306837
      },
      "writtenOn": "2020-01-09T10:24:44Z",
      "side": 1,
      "message": "No, mStatsProvider.pushTetherStats() is a local function that invoke mStatsProviderCb.onStatsUpdated().\nIt does not create binder call on mStatsProvider.\nSo there will be 2 binder calls on the same binder:\n  mStatsProviderCb.onStatsUpdated()\n  mStatsProviderCb.onLimitReached()\nIf the ordering of the same binder is preserved, then it should be fine, right?\n\nThe reason pushTetherStats() is inside mStatsProvider is it can read/update the\nmembers of provider without problem.\nReopen if anything disagreed.",
      "parentUuid": "c1cbccb6_9df2c4d5",
      "range": {
        "startLine": 219,
        "startChar": 24,
        "endLine": 222,
        "endChar": 88
      },
      "revId": "52f84b4daab85ec6e2b260858abb2d9ec831bbbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0c43c08d_516d60fc",
        "filename": "packages/Tethering/src/com/android/server/connectivity/tethering/OffloadController.java",
        "patchSetId": 10
      },
      "lineNbr": 222,
      "author": {
        "id": 1015428
      },
      "writtenOn": "2020-01-10T15:19:31Z",
      "side": 1,
      "message": "Ah yes sorry. I had missed that. Thanks for the detailed explanation.",
      "parentUuid": "e075a0bb_56f65dcb",
      "range": {
        "startLine": 219,
        "startChar": 24,
        "endLine": 222,
        "endChar": 88
      },
      "revId": "52f84b4daab85ec6e2b260858abb2d9ec831bbbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "088a67de_dbac2f43",
        "filename": "packages/Tethering/src/com/android/server/connectivity/tethering/OffloadController.java",
        "patchSetId": 10
      },
      "lineNbr": 313,
      "author": {
        "id": 1015428
      },
      "writtenOn": "2020-01-09T08:59:48Z",
      "side": 1,
      "message": "I think this returns the result instead of mutating the object (likewise for addValues above)\n\nIsn\u0027t there a test tripped by this ?",
      "range": {
        "startLine": 313,
        "startChar": 24,
        "endLine": 313,
        "endChar": 27
      },
      "revId": "52f84b4daab85ec6e2b260858abb2d9ec831bbbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ae0da707_98887f76",
        "filename": "packages/Tethering/src/com/android/server/connectivity/tethering/OffloadController.java",
        "patchSetId": 10
      },
      "lineNbr": 313,
      "author": {
        "id": 1306837
      },
      "writtenOn": "2020-01-09T14:30:45Z",
      "side": 1,
      "message": "1. Oooops, you are right.\nUpdated.\nHowever I found it concerns me that\naddValues construct a new NetworkStats object everytime.\nFor uidStats it might be dozens of rows to insert.\nDo we need to expose addValues(Entry []) or something else?\n\n2. the unit test verifies the getTetherStats() but not the stats reported.\nSo this is not detected.\nDone.",
      "parentUuid": "088a67de_dbac2f43",
      "range": {
        "startLine": 313,
        "startChar": 24,
        "endLine": 313,
        "endChar": 27
      },
      "revId": "52f84b4daab85ec6e2b260858abb2d9ec831bbbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "635e5c91_86e23e57",
        "filename": "packages/Tethering/src/com/android/server/connectivity/tethering/OffloadController.java",
        "patchSetId": 10
      },
      "lineNbr": 313,
      "author": {
        "id": 1015428
      },
      "writtenOn": "2020-01-10T15:19:31Z",
      "side": 1,
      "message": "I think performance concerns should be addressed in two ways :\n• Measuring\n• Optimizing for what we need\nIn this case I think a simple optimization is to use data structures that can share internal state. For example, if you want to share-append to a list of entries, you could have a single-linked list in reverse order, and add to the end :\n\nNetworkStats1 :       entries\n                         ↓\n  obj1 ← obj2 ← obj3 ← obj4\n\n\nWhen you copy and append, you just have a ref to the list.\n\nNetworkStats1 :       entries\n                         ↓\n  obj1 ← obj2 ← obj3 ← obj4 ← obj5\n                                ↑\nNetworkStats2 :              entries\n\nThis makes this particular operation very cheap.",
      "parentUuid": "ae0da707_98887f76",
      "range": {
        "startLine": 313,
        "startChar": 24,
        "endLine": 313,
        "endChar": 27
      },
      "revId": "52f84b4daab85ec6e2b260858abb2d9ec831bbbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6f4bf9dc_e3b1e456",
        "filename": "packages/Tethering/src/com/android/server/connectivity/tethering/OffloadController.java",
        "patchSetId": 10
      },
      "lineNbr": 314,
      "author": {
        "id": 1015428
      },
      "writtenOn": "2020-01-09T08:59:48Z",
      "side": 1,
      "message": "I think these two lines should be inside the if() because if the provider is not here you don\u0027t want to record the data as having been sent.\n\n(but anyway because there is no way to salvage any of this data if mStatsProviderCb is null, you may just want to start this method with if (null \u003d\u003d mStatsProviderCb) return; anyway)",
      "range": {
        "startLine": 313,
        "startChar": 0,
        "endLine": 314,
        "endChar": 35
      },
      "revId": "52f84b4daab85ec6e2b260858abb2d9ec831bbbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "01fdefc4_aec7e0db",
        "filename": "packages/Tethering/src/com/android/server/connectivity/tethering/OffloadController.java",
        "patchSetId": 10
      },
      "lineNbr": 314,
      "author": {
        "id": 1306837
      },
      "writtenOn": "2020-01-09T14:30:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6f4bf9dc_e3b1e456",
      "range": {
        "startLine": 313,
        "startChar": 0,
        "endLine": 314,
        "endChar": 35
      },
      "revId": "52f84b4daab85ec6e2b260858abb2d9ec831bbbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "651290b7_30c88fe8",
        "filename": "packages/Tethering/src/com/android/server/connectivity/tethering/OffloadController.java",
        "patchSetId": 10
      },
      "lineNbr": 330,
      "author": {
        "id": 1015428
      },
      "writtenOn": "2020-01-10T15:19:31Z",
      "side": 1,
      "message": "Is this supported by the HAL today ?",
      "range": {
        "startLine": 330,
        "startChar": 20,
        "endLine": 330,
        "endChar": 38
      },
      "revId": "52f84b4daab85ec6e2b260858abb2d9ec831bbbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c84ee168_ba33f59e",
        "filename": "packages/Tethering/tests/unit/src/com/android/server/connectivity/tethering/OffloadControllerTest.java",
        "patchSetId": 10
      },
      "lineNbr": 459,
      "author": {
        "id": 1015428
      },
      "writtenOn": "2020-01-09T08:59:48Z",
      "side": 1,
      "message": "Will fit on one line",
      "range": {
        "startLine": 459,
        "startChar": 16,
        "endLine": 459,
        "endChar": 19
      },
      "revId": "52f84b4daab85ec6e2b260858abb2d9ec831bbbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fb3ed4ea_4eb95d66",
        "filename": "packages/Tethering/tests/unit/src/com/android/server/connectivity/tethering/OffloadControllerTest.java",
        "patchSetId": 10
      },
      "lineNbr": 459,
      "author": {
        "id": 1306837
      },
      "writtenOn": "2020-01-09T14:30:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c84ee168_ba33f59e",
      "range": {
        "startLine": 459,
        "startChar": 16,
        "endLine": 459,
        "endChar": 19
      },
      "revId": "52f84b4daab85ec6e2b260858abb2d9ec831bbbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bc52e323_433167ea",
        "filename": "packages/Tethering/tests/unit/src/com/android/server/connectivity/tethering/OffloadControllerTest.java",
        "patchSetId": 10
      },
      "lineNbr": 479,
      "author": {
        "id": 1015428
      },
      "writtenOn": "2020-01-09T08:59:48Z",
      "side": 1,
      "message": "To catch the issue that #add() now returns the sum instead of mutating the object, this probably should have a second batch of traffic. In fact, because we are having this design where we diff from the last time it\u0027s been fairly dangerous not to have one \u003c.\u003c",
      "range": {
        "startLine": 479,
        "startChar": 4,
        "endLine": 479,
        "endChar": 5
      },
      "revId": "52f84b4daab85ec6e2b260858abb2d9ec831bbbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "897bd15e_4ac3145e",
        "filename": "packages/Tethering/tests/unit/src/com/android/server/connectivity/tethering/OffloadControllerTest.java",
        "patchSetId": 10
      },
      "lineNbr": 479,
      "author": {
        "id": 1306837
      },
      "writtenOn": "2020-01-09T14:30:45Z",
      "side": 1,
      "message": "Done, To me the entire CL is very dangerous.@_@\n\nThe test itself already contains 2 batch of traffic.\nHowever there is no event to trigger it from reporting to service.\nWe only test the stats internally stored.\n\nThus we need to push manually to catch this.\nSee if this works for you.",
      "parentUuid": "bc52e323_433167ea",
      "range": {
        "startLine": 479,
        "startChar": 4,
        "endLine": 479,
        "endChar": 5
      },
      "revId": "52f84b4daab85ec6e2b260858abb2d9ec831bbbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "11f6306d_5cf319eb",
        "filename": "packages/Tethering/tests/unit/src/com/android/server/connectivity/tethering/OffloadControllerTest.java",
        "patchSetId": 10
      },
      "lineNbr": 479,
      "author": {
        "id": 1015428
      },
      "writtenOn": "2020-01-10T15:19:31Z",
      "side": 1,
      "message": "What, bugs in your code ? Nowai !\n\nYes I think the new tests are good. Maybe at some point in the future we want to have some helpers to easily send multiple batches to make sure everything increases as expected, including in the presence of multiple concurrent pushes, but I think the refactoring should go before we do this to lower the burden of updating the tests.\n\nI will probably come back with a vengeance and ask you to write comprehensive stress tests for your new push providers though. Oops, actually already did it b/147481056. Sorry.",
      "parentUuid": "897bd15e_4ac3145e",
      "range": {
        "startLine": 479,
        "startChar": 4,
        "endLine": 479,
        "endChar": 5
      },
      "revId": "52f84b4daab85ec6e2b260858abb2d9ec831bbbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "918af20d_b7d150fa",
        "filename": "packages/Tethering/tests/unit/src/com/android/server/connectivity/tethering/OffloadControllerTest.java",
        "patchSetId": 10
      },
      "lineNbr": 659,
      "author": {
        "id": 1015428
      },
      "writtenOn": "2020-01-09T08:59:48Z",
      "side": 1,
      "message": "Must these two be in order ? It doesn\u0027t look to me like it would be a bug if they were queried in the reverse order.",
      "range": {
        "startLine": 658,
        "startChar": 8,
        "endLine": 659,
        "endChar": 14
      },
      "revId": "52f84b4daab85ec6e2b260858abb2d9ec831bbbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3fa2e8c9_ada91e4b",
        "filename": "packages/Tethering/tests/unit/src/com/android/server/connectivity/tethering/OffloadControllerTest.java",
        "patchSetId": 10
      },
      "lineNbr": 659,
      "author": {
        "id": 1306837
      },
      "writtenOn": "2020-01-09T14:30:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "918af20d_b7d150fa",
      "range": {
        "startLine": 658,
        "startChar": 8,
        "endLine": 659,
        "endChar": 14
      },
      "revId": "52f84b4daab85ec6e2b260858abb2d9ec831bbbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c1a58ec5_d8ba4c45",
        "filename": "tests/net/java/android/net/NetworkStatsTest.java",
        "patchSetId": 10
      },
      "lineNbr": 543,
      "author": {
        "id": 1015428
      },
      "writtenOn": "2020-01-09T08:59:48Z",
      "side": 1,
      "message": "Please also check that the hashcode is the same. I think the code is correct, but it\u0027s easy to break",
      "range": {
        "startLine": 543,
        "startChar": 18,
        "endLine": 543,
        "endChar": 24
      },
      "revId": "52f84b4daab85ec6e2b260858abb2d9ec831bbbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1c7a15f7_fb61c45d",
        "filename": "tests/net/java/android/net/NetworkStatsTest.java",
        "patchSetId": 10
      },
      "lineNbr": 543,
      "author": {
        "id": 1306837
      },
      "writtenOn": "2020-01-09T14:30:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c1a58ec5_d8ba4c45",
      "range": {
        "startLine": 543,
        "startChar": 18,
        "endLine": 543,
        "endChar": 24
      },
      "revId": "52f84b4daab85ec6e2b260858abb2d9ec831bbbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}