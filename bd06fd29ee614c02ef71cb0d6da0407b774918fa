{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "0b133dea_5480069d",
        "filename": "core/api/current.txt",
        "patchSetId": 17
      },
      "lineNbr": 27275,
      "author": {
        "id": 1015428
      },
      "writtenOn": "2021-12-13T11:59:25Z",
      "side": 1,
      "message": "What you have here doesn\u0027t exactly violates the guidelines per se (https://g3doc.corp.google.com/company/teams/android-api-council/guidelines/index.md?cl\u003dhead#builder-method-naming) but it does multiply prefixes and does not match Kotlin property syntax. I think maybe we can avoid this with clever rewording, e.g.\n\n  setRoamingMatched/isRoamingMatched\n  setOpportunisticRequired/isOpportunisticRequired\n\nAnother observation is that while the match for roaming is permissive, the match for opportunistic is restrictive, which feels kind of inconsistent. The simplest solution is probably to say matchNonOpportunistic() or matchesMacro(). If you\u0027re willing to take the extra maintenance/development/testing work, you could have constants and say setRoamingMatch(int) and setOpportunisticMatch(int), and have ROAMING_YES, ROAMING_NO and ROAMING_ANY, and OPPORTUNISTIC_YES/NO/ANY.",
      "range": {
        "startLine": 27275,
        "startChar": 26,
        "endLine": 27275,
        "endChar": 40
      },
      "revId": "bd06fd29ee614c02ef71cb0d6da0407b774918fa",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c075ae63_56a5e540",
        "filename": "core/api/current.txt",
        "patchSetId": 17
      },
      "lineNbr": 27275,
      "author": {
        "id": 1297255
      },
      "writtenOn": "2021-12-15T01:55:47Z",
      "side": 1,
      "message": "Updated to use MATCH_ANY, MATCH_REQUIRED and MATCH_FORBIDDEN",
      "parentUuid": "0b133dea_5480069d",
      "range": {
        "startLine": 27275,
        "startChar": 26,
        "endLine": 27275,
        "endChar": 40
      },
      "revId": "bd06fd29ee614c02ef71cb0d6da0407b774918fa",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "74fadf54_15283d41",
        "filename": "core/api/current.txt",
        "patchSetId": 17
      },
      "lineNbr": 27281,
      "author": {
        "id": 1060151
      },
      "writtenOn": "2021-12-13T23:58:25Z",
      "side": 1,
      "message": "I think maybe a separate sub-object for the MatchingRules would make this cleaner or if the top level class were NetworkPriorityMatchRules?\n\nNetworkPriorityMatchRules.Builder().setRoaming().setOperatorPlmns().setSimCarrierIds()...\n\nThis might also help address some of Jean\u0027s naming concerns while not actually requiring a meaningful shape change?",
      "range": {
        "startLine": 27281,
        "startChar": 43,
        "endLine": 27281,
        "endChar": 79
      },
      "revId": "bd06fd29ee614c02ef71cb0d6da0407b774918fa",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eb805bce_fb687cea",
        "filename": "core/api/current.txt",
        "patchSetId": 17
      },
      "lineNbr": 27281,
      "author": {
        "id": 1297255
      },
      "writtenOn": "2021-12-15T01:55:47Z",
      "side": 1,
      "message": "Synced with Ben. Updated according to Ben \u0026 Jean\u0027s agreement",
      "parentUuid": "74fadf54_15283d41",
      "range": {
        "startLine": 27281,
        "startChar": 43,
        "endLine": 27281,
        "endChar": 79
      },
      "revId": "bd06fd29ee614c02ef71cb0d6da0407b774918fa",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "33cee970_5c7ccc21",
        "filename": "core/api/current.txt",
        "patchSetId": 17
      },
      "lineNbr": 27346,
      "author": {
        "id": 1015428
      },
      "writtenOn": "2021-12-13T11:59:25Z",
      "side": 1,
      "message": "If it\u0027s only this one method I think we\u0027d be better off not having this class at all, and just having the respective builders offer that method. If we find we need a lot of new common methods and subclasses, we can add it later, but for now I think it\u0027s better to avoid clients trying to subclass this",
      "range": {
        "startLine": 27344,
        "startChar": 0,
        "endLine": 27346,
        "endChar": 3
      },
      "revId": "bd06fd29ee614c02ef71cb0d6da0407b774918fa",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "133ea18c_f3f1819d",
        "filename": "core/api/current.txt",
        "patchSetId": 17
      },
      "lineNbr": 27346,
      "author": {
        "id": 1297255
      },
      "writtenOn": "2021-12-15T01:55:47Z",
      "side": 1,
      "message": "I still want to keep it abstract so that later it is easy to add more common requirements.",
      "parentUuid": "33cee970_5c7ccc21",
      "range": {
        "startLine": 27344,
        "startChar": 0,
        "endLine": 27346,
        "endChar": 3
      },
      "revId": "bd06fd29ee614c02ef71cb0d6da0407b774918fa",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e9c1a794_b35101a7",
        "filename": "core/api/current.txt",
        "patchSetId": 17
      },
      "lineNbr": 27346,
      "author": {
        "id": 1015428
      },
      "writtenOn": "2021-12-15T10:40:45Z",
      "side": 1,
      "message": "Unless you already have specific things in mind that you want to add for T, I think YAGNI. You can always introduce this superclass later when it becomes advantageous.",
      "parentUuid": "133ea18c_f3f1819d",
      "range": {
        "startLine": 27344,
        "startChar": 0,
        "endLine": 27346,
        "endChar": 3
      },
      "revId": "bd06fd29ee614c02ef71cb0d6da0407b774918fa",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f69faa4e_3d29f08c",
        "filename": "core/java/android/net/vcn/VcnGatewayConnectionConfig.java",
        "patchSetId": 17
      },
      "lineNbr": 556,
      "author": {
        "id": 1015428
      },
      "writtenOn": "2021-12-13T11:59:25Z",
      "side": 1,
      "message": "What happens if the first rule that matches anything matches multiple networksÂ ?\n\nAlso I think you mentioned in our meeting that the default order is *always* appended to what\u0027s passed here, but the doc doesn\u0027t mention that",
      "range": {
        "startLine": 556,
        "startChar": 38,
        "endLine": 556,
        "endChar": 39
      },
      "revId": "bd06fd29ee614c02ef71cb0d6da0407b774918fa",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8e9447b8_569d4bf1",
        "filename": "core/java/android/net/vcn/VcnGatewayConnectionConfig.java",
        "patchSetId": 17
      },
      "lineNbr": 556,
      "author": {
        "id": 1297255
      },
      "writtenOn": "2021-12-15T01:55:47Z",
      "side": 1,
      "message": "Doc updated by Ben",
      "parentUuid": "f69faa4e_3d29f08c",
      "range": {
        "startLine": 556,
        "startChar": 38,
        "endLine": 556,
        "endChar": 39
      },
      "revId": "bd06fd29ee614c02ef71cb0d6da0407b774918fa",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "55de1f65_87ec4056",
        "filename": "core/java/android/net/vcn/VcnUnderlyingNetworkPriorityRule.java",
        "patchSetId": 17
      },
      "lineNbr": 87,
      "author": {
        "id": 1015428
      },
      "writtenOn": "2021-12-13T11:59:25Z",
      "side": 1,
      "message": "ISTM this should be package-private to avoid clients creating their own custom subclass. The same goes for the builder if you keep it.\n\nAlso see https://g3doc.corp.google.com/company/teams/android-api-council/guidelines/index.md?cl\u003dhead#avoid-protected",
      "range": {
        "startLine": 87,
        "startChar": 4,
        "endLine": 87,
        "endChar": 13
      },
      "revId": "bd06fd29ee614c02ef71cb0d6da0407b774918fa",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "576e6cc8_6d7eb38b",
        "filename": "core/java/android/net/vcn/VcnUnderlyingNetworkPriorityRule.java",
        "patchSetId": 17
      },
      "lineNbr": 87,
      "author": {
        "id": 1297255
      },
      "writtenOn": "2021-12-15T01:55:47Z",
      "side": 1,
      "message": "\u003e ISTM this should be package-private to avoid clients creating their own custom subclass. \nDone in VcnUnderlyingNetworkTemplate\n\n\u003e The same goes for the builder if you keep it.\nIf I make the abstract builder package private, it will not get exposed as APIs and then make update-api will fail with failures as follows\n\n```\nout/soong/.intermediates/frameworks/base/android-non-updatable.stubs.module_lib/android_common/javac/srcjars/android/net/vcn/VcnCellUnderlyingNetworkTemplate.java:58: error: cannot find symbol\npublic T setNotMeteredMatch(int unmeteredMatchCriteria) { throw new RuntimeException(\"Stub!\"); }\n       ^\n```",
      "parentUuid": "55de1f65_87ec4056",
      "range": {
        "startLine": 87,
        "startChar": 4,
        "endLine": 87,
        "endChar": 13
      },
      "revId": "bd06fd29ee614c02ef71cb0d6da0407b774918fa",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}