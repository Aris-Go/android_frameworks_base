{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "a5e294eb_cf190c31",
        "filename": "services/core/java/com/android/server/adb/AdbDebuggingManager.java",
        "patchSetId": 8
      },
      "lineNbr": 286,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-02-05T16:43:15Z",
      "side": 1,
      "message": "this looks like a variable name, but isn\u0027t? should this just be \"the foreground Thread\"?",
      "range": {
        "startLine": 286,
        "startChar": 82,
        "endLine": 286,
        "endChar": 90
      },
      "revId": "5224b12527a251e47ac5659c102c9dbc259509f8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e51856ac_490331f8",
        "filename": "services/core/java/com/android/server/adb/AdbDebuggingManager.java",
        "patchSetId": 8
      },
      "lineNbr": 286,
      "author": {
        "id": 1102879
      },
      "writtenOn": "2024-02-06T02:47:45Z",
      "side": 1,
      "message": "Here the fgThread is actually the \"android.fg\" thread",
      "parentUuid": "a5e294eb_cf190c31",
      "range": {
        "startLine": 286,
        "startChar": 82,
        "endLine": 286,
        "endChar": 90
      },
      "revId": "5224b12527a251e47ac5659c102c9dbc259509f8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "689ac0d0_47e2f7e0",
        "filename": "services/core/java/com/android/server/adb/AdbDebuggingManager.java",
        "patchSetId": 8
      },
      "lineNbr": 286,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-02-06T15:48:40Z",
      "side": 1,
      "message": "what is that? i find no references to \"android.fg\" in the code (anywhere, not just this file).",
      "parentUuid": "e51856ac_490331f8",
      "range": {
        "startLine": 286,
        "startChar": 82,
        "endLine": 286,
        "endChar": 90
      },
      "revId": "5224b12527a251e47ac5659c102c9dbc259509f8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cf38537c_1e246c4d",
        "filename": "services/core/java/com/android/server/adb/AdbDebuggingManager.java",
        "patchSetId": 8
      },
      "lineNbr": 295,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-02-05T16:43:15Z",
      "side": 1,
      "message": "(not a regression, but this can\u0027t happen, right? /me shakes head at half the error reporting from this code returning -1 and the other half returning 0...)",
      "range": {
        "startLine": 295,
        "startChar": 26,
        "endLine": 295,
        "endChar": 43
      },
      "revId": "5224b12527a251e47ac5659c102c9dbc259509f8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d3da6523_3842a0f3",
        "filename": "services/core/java/com/android/server/adb/AdbDebuggingManager.java",
        "patchSetId": 8
      },
      "lineNbr": 295,
      "author": {
        "id": 1939396
      },
      "writtenOn": "2024-02-06T11:06:24Z",
      "side": 1,
      "message": "Available ports are between 0 and 65535, there should be considering \u0027PairingServerCtx::SetupServer()\u0027 returns an abnormal port",
      "parentUuid": "cf38537c_1e246c4d",
      "range": {
        "startLine": 295,
        "startChar": 26,
        "endLine": 295,
        "endChar": 43
      },
      "revId": "5224b12527a251e47ac5659c102c9dbc259509f8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e5e6eef5_a50c811f",
        "filename": "services/core/java/com/android/server/adb/AdbDebuggingManager.java",
        "patchSetId": 8
      },
      "lineNbr": 295,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-02-06T15:48:40Z",
      "side": 1,
      "message": "no, my point is that SetupServer() returns 0 or -1 on failure (and its return type is uint16_t) --- \"this can\u0027t happen\".",
      "parentUuid": "d3da6523_3842a0f3",
      "range": {
        "startLine": 295,
        "startChar": 26,
        "endLine": 295,
        "endChar": 43
      },
      "revId": "5224b12527a251e47ac5659c102c9dbc259509f8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fcce7ec9_b5693047",
        "filename": "services/core/java/com/android/server/adb/AdbDebuggingManager.java",
        "patchSetId": 8
      },
      "lineNbr": 300,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-02-05T16:43:15Z",
      "side": 1,
      "message": "in cases where we don\u0027t actually start the thread, doesn\u0027t this introduce a bug when we later call join()? you can\u0027t call join() on a non-started thread in Java, right?\n\nseems like moving this into the constructor, having the constructor throw, and handling that correctly is the right way to do this? (not as onerous as it sounds, since there are only two callers and you can factor this out into a new method.)",
      "revId": "5224b12527a251e47ac5659c102c9dbc259509f8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bcf15268_f1f63bad",
        "filename": "services/core/java/com/android/server/adb/AdbDebuggingManager.java",
        "patchSetId": 8
      },
      "lineNbr": 300,
      "author": {
        "id": 1579231
      },
      "writtenOn": "2024-02-05T17:30:51Z",
      "side": 1,
      "message": "Would isAlive() be an alternative (when handling MSG_PAIRING_CANCEL), to allay this concern? (unless super.start() is invoked, this will return false).\nPS: That said, I feel that join() is robust (I might be mistaken, tbh :)",
      "parentUuid": "fcce7ec9_b5693047",
      "revId": "5224b12527a251e47ac5659c102c9dbc259509f8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb591044_c841e1ef",
        "filename": "services/core/java/com/android/server/adb/AdbDebuggingManager.java",
        "patchSetId": 8
      },
      "lineNbr": 300,
      "author": {
        "id": 1102879
      },
      "writtenOn": "2024-02-06T02:44:51Z",
      "side": 1,
      "message": "Yes, we can call join() on a non-started thread in Java safely.",
      "parentUuid": "bcf15268_f1f63bad",
      "revId": "5224b12527a251e47ac5659c102c9dbc259509f8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8acfa848_32e1bcd8",
        "filename": "services/core/java/com/android/server/adb/AdbDebuggingManager.java",
        "patchSetId": 8
      },
      "lineNbr": 300,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-02-06T15:48:40Z",
      "side": 1,
      "message": "yeah, i just looked at the source and this is an area where Java\u0027s guarantee is different from c/c++ --- their joins both fail, but Java\u0027s is indeed a no-op on an unstarted thread.",
      "parentUuid": "fb591044_c841e1ef",
      "revId": "5224b12527a251e47ac5659c102c9dbc259509f8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}