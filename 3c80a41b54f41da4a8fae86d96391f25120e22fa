{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "95ac1844_4f64a9a9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003801
      },
      "writtenOn": "2024-03-15T15:38:12Z",
      "side": 1,
      "message": "Lee is the current owner, so I\u0027ll defer it to him, but given trunk-stable, I\u0027d say either:\n1. Protect it with a go/android-flags\nor\n2. Only use the new code path on non-linux targets.\n\nI\u0027d probably go with 2. We\u0027ve been having enough SQLite regressions lately, I don\u0027t think we want to introduce any churn here, because otherwise every time we see something weird, this would be one more culprit we\u0027d have to suspect.",
      "revId": "3c80a41b54f41da4a8fae86d96391f25120e22fa",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a296fdc3_718198e1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1623611
      },
      "writtenOn": "2024-03-15T16:19:41Z",
      "side": 1,
      "message": "I will second the suggestion to use flagging.  The header file rearrangement should be fine but use a flag to choose between the legacy use of mmap() and the new MappedFile implementation.  The flag can go into ``frameworks/base/core/java/android/database/sqlite/flags.aconfig``.  We might need some extra work to make the flag visible to the jni file.\n\nAlso, I would suggest committing to main first, unless this needs to be in aosp quickly.",
      "revId": "3c80a41b54f41da4a8fae86d96391f25120e22fa",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6acc76e3_7a1dcc82",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003801
      },
      "writtenOn": "2024-03-15T22:13:36Z",
      "side": 1,
      "message": "This is for robolectric, right?\n\nWhy don\u0027t we just use `#ifdef __linux__`? Using a trunk flag would be too painful and I don\u0027t think it\u0027s worth doing.\n\nWDYT @Lee?",
      "revId": "3c80a41b54f41da4a8fae86d96391f25120e22fa",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "95b5f364_1d29dcc8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1623611
      },
      "writtenOn": "2024-03-15T22:45:39Z",
      "side": 1,
      "message": "I think I would use flags, because the end result would be cleaner - a single path that uses MappedFile.  It might take a quarter before the flag could be removed, of course.  Otherwise, flags are not that much trouble once the infrastructure is in place.  I\u0027m not sure it\u0027s in place in the jni directory.\n\nSo, an ``#ifdef`` would be okay from a stability standpoint.\n\nIn the meantime, I will commit the infrastructure to use sqlite flags in the jni directory.",
      "parentUuid": "6acc76e3_7a1dcc82",
      "revId": "3c80a41b54f41da4a8fae86d96391f25120e22fa",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1565ecf3_42470aeb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1396566
      },
      "writtenOn": "2024-10-01T17:01:33Z",
      "side": 1,
      "message": "Friendly ping on this. From other conversations on aosp/3002409, it seems that these kinds of no-op small refactor changes should be OK given that SQLite is in a stable state at the moment?",
      "parentUuid": "95b5f364_1d29dcc8",
      "revId": "3c80a41b54f41da4a8fae86d96391f25120e22fa",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8d4763a3_c9cbaa49",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1396566
      },
      "writtenOn": "2024-10-01T17:02:19Z",
      "side": 1,
      "message": "Whoops meant aosp/3000218",
      "parentUuid": "1565ecf3_42470aeb",
      "revId": "3c80a41b54f41da4a8fae86d96391f25120e22fa",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0ed67893_5a17164f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1396566
      },
      "writtenOn": "2024-10-01T20:43:46Z",
      "side": 1,
      "message": "Marking resolved.",
      "parentUuid": "8d4763a3_c9cbaa49",
      "revId": "3c80a41b54f41da4a8fae86d96391f25120e22fa",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}