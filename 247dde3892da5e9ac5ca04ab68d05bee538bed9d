{
  "comments": [
    {
      "key": {
        "uuid": "767c15bf_d24425dc",
        "filename": "core/java/android/app/SystemServiceRegistry.java",
        "patchSetId": 31
      },
      "lineNbr": 349,
      "author": {
        "id": 1288034
      },
      "writtenOn": "2019-12-19T05:13:00Z",
      "side": 1,
      "message": "As discussed in chat, can you file a bug for the refactor to have the waiting logic in TetheringManager, so we never return null ?",
      "range": {
        "startLine": 348,
        "startChar": 16,
        "endLine": 349,
        "endChar": 43
      },
      "revId": "247dde3892da5e9ac5ca04ab68d05bee538bed9d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3a5657e6_9e5c27e7",
        "filename": "core/java/android/app/SystemServiceRegistry.java",
        "patchSetId": 31
      },
      "lineNbr": 349,
      "author": {
        "id": 1308504
      },
      "writtenOn": "2019-12-19T10:22:28Z",
      "side": 1,
      "message": "Ack, b/146533559",
      "parentUuid": "767c15bf_d24425dc",
      "range": {
        "startLine": 348,
        "startChar": 16,
        "endLine": 349,
        "endChar": 43
      },
      "revId": "247dde3892da5e9ac5ca04ab68d05bee538bed9d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7fc2b428_e600ea1c",
        "filename": "core/java/android/net/ConnectivityManager.java",
        "patchSetId": 31
      },
      "lineNbr": 2347,
      "author": {
        "id": 1288034
      },
      "writtenOn": "2019-12-19T05:13:00Z",
      "side": 1,
      "message": "As discussed in chat, logic like this would be moved to TetheringManager in the subsequent refactor",
      "range": {
        "startLine": 2347,
        "startChar": 29,
        "endLine": 2347,
        "endChar": 48
      },
      "revId": "247dde3892da5e9ac5ca04ab68d05bee538bed9d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b06710c8_bbe44640",
        "filename": "core/java/android/net/ConnectivityManager.java",
        "patchSetId": 31
      },
      "lineNbr": 2347,
      "author": {
        "id": 1308504
      },
      "writtenOn": "2019-12-19T10:22:28Z",
      "side": 1,
      "message": "Yes, this is also belong to waiting logic reactor. b/146533559",
      "parentUuid": "7fc2b428_e600ea1c",
      "range": {
        "startLine": 2347,
        "startChar": 29,
        "endLine": 2347,
        "endChar": 48
      },
      "revId": "247dde3892da5e9ac5ca04ab68d05bee538bed9d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ee747182_06b3f3e4",
        "filename": "packages/Tethering/Android.bp",
        "patchSetId": 31
      },
      "lineNbr": 113,
      "author": {
        "id": 1288034
      },
      "writtenOn": "2019-12-19T05:13:00Z",
      "side": 1,
      "message": "This would break Go devices because they would end up with both NetworkPermissionConfig and PlatformNetworkPermissionConfig.\nI think you can skip this because it\u0027s already required by NetworkStack, which will always be included.",
      "range": {
        "startLine": 113,
        "startChar": 4,
        "endLine": 113,
        "endChar": 42
      },
      "revId": "247dde3892da5e9ac5ca04ab68d05bee538bed9d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2d69cfe5_68370087",
        "filename": "packages/Tethering/Android.bp",
        "patchSetId": 31
      },
      "lineNbr": 113,
      "author": {
        "id": 1308504
      },
      "writtenOn": "2019-12-19T10:22:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ee747182_06b3f3e4",
      "range": {
        "startLine": 113,
        "startChar": 4,
        "endLine": 113,
        "endChar": 42
      },
      "revId": "247dde3892da5e9ac5ca04ab68d05bee538bed9d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c5e8400e_796fe8fb",
        "filename": "packages/Tethering/Android.bp",
        "patchSetId": 31
      },
      "lineNbr": 113,
      "author": {
        "id": 1308504
      },
      "writtenOn": "2019-12-19T10:22:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ee747182_06b3f3e4",
      "range": {
        "startLine": 113,
        "startChar": 4,
        "endLine": 113,
        "endChar": 42
      },
      "revId": "247dde3892da5e9ac5ca04ab68d05bee538bed9d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2a3ccd04_ee3084d3",
        "filename": "packages/Tethering/CleanSpec.mk",
        "patchSetId": 31
      },
      "lineNbr": 0,
      "author": {
        "id": 1288034
      },
      "writtenOn": "2019-12-19T05:13:00Z",
      "side": 1,
      "message": "Newer clean steps must be at the end, which is not the case here (the InProcessTethering is in the middle)",
      "revId": "247dde3892da5e9ac5ca04ab68d05bee538bed9d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1af6654e_a3e1b111",
        "filename": "packages/Tethering/CleanSpec.mk",
        "patchSetId": 31
      },
      "lineNbr": 0,
      "author": {
        "id": 1308504
      },
      "writtenOn": "2019-12-19T10:22:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2a3ccd04_ee3084d3",
      "revId": "247dde3892da5e9ac5ca04ab68d05bee538bed9d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a2f6f9b9_33dea8e1",
        "filename": "packages/Tethering/common/TetheringLib/Android.bp",
        "patchSetId": 31
      },
      "lineNbr": 57,
      "author": {
        "id": 1288034
      },
      "writtenOn": "2019-12-19T05:13:00Z",
      "side": 1,
      "message": "That does not sound right: the framework would be building the AIDLs as regular binder, even though tethering uses it built as aidl_interface (and potentially stable AIDL). It may work now but I don\u0027t think this is guaranteed.\nInstead I think the framework needs to depend on tethering-aidl-interfaces.",
      "range": {
        "startLine": 57,
        "startChar": 8,
        "endLine": 57,
        "endChar": 55
      },
      "revId": "247dde3892da5e9ac5ca04ab68d05bee538bed9d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1bfddab4_c9a71090",
        "filename": "packages/Tethering/common/TetheringLib/Android.bp",
        "patchSetId": 31
      },
      "lineNbr": 57,
      "author": {
        "id": 1308504
      },
      "writtenOn": "2019-12-19T10:22:28Z",
      "side": 1,
      "message": "This is not used to statically build into framework. It just used to generate system-api-stub-docs, aidl-mapping for UnSupportedAppUsage, ... For real use, currently framework will build with framework-tethering shared library. Actually I also want to generate a stubs that exclude all @hide class and method for building framework, after that framework may not able to use these AIDL anymore. And we can also consider to remove these if all of them are @hide. It would be added in follow up CL.\nhttps://docs.google.com/document/d/1Vz7WD0xz6DRym_m1Z_-lNArVntgEdGWT92wUr9Nteic/edit?pli\u003d1#heading\u003dh.92zkltdq8cw",
      "parentUuid": "a2f6f9b9_33dea8e1",
      "range": {
        "startLine": 57,
        "startChar": 8,
        "endLine": 57,
        "endChar": 55
      },
      "revId": "247dde3892da5e9ac5ca04ab68d05bee538bed9d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f238c932_ffdb4b91",
        "filename": "packages/Tethering/common/TetheringLib/jarjar-rules.txt",
        "patchSetId": 31
      },
      "lineNbr": 1,
      "author": {
        "id": 1288034
      },
      "writtenOn": "2019-12-19T05:13:00Z",
      "side": 1,
      "message": "Maybe com.android.tethering. to make it match the module package name ?",
      "range": {
        "startLine": 1,
        "startChar": 27,
        "endLine": 1,
        "endChar": 34
      },
      "revId": "247dde3892da5e9ac5ca04ab68d05bee538bed9d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c8a6eae6_44949218",
        "filename": "packages/Tethering/common/TetheringLib/jarjar-rules.txt",
        "patchSetId": 31
      },
      "lineNbr": 1,
      "author": {
        "id": 1308504
      },
      "writtenOn": "2019-12-19T10:22:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f238c932_ffdb4b91",
      "range": {
        "startLine": 1,
        "startChar": 27,
        "endLine": 1,
        "endChar": 34
      },
      "revId": "247dde3892da5e9ac5ca04ab68d05bee538bed9d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "597aef5b_f4e92b75",
        "filename": "packages/Tethering/common/TetheringLib/src/android/net/TetheringManager.java",
        "patchSetId": 31
      },
      "lineNbr": 37,
      "author": {
        "id": 1288034
      },
      "writtenOn": "2019-12-19T05:13:00Z",
      "side": 1,
      "message": "UnsupportedAppUsage annotations in IConnectivityManager refer to this class as fallback. Is the plan to make it an API ? If yes can you add a TODO ?",
      "range": {
        "startLine": 37,
        "startChar": 3,
        "endLine": 37,
        "endChar": 8
      },
      "revId": "247dde3892da5e9ac5ca04ab68d05bee538bed9d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f689fc9e_0c740818",
        "filename": "packages/Tethering/common/TetheringLib/src/android/net/TetheringManager.java",
        "patchSetId": 31
      },
      "lineNbr": 37,
      "author": {
        "id": 1308504
      },
      "writtenOn": "2019-12-19T10:22:28Z",
      "side": 1,
      "message": "Ack, yes, original this is added @SystemApi. By Lorenzo\u0027s request, I move them out of this CL to reduce API change.",
      "parentUuid": "597aef5b_f4e92b75",
      "range": {
        "startLine": 37,
        "startChar": 3,
        "endLine": 37,
        "endChar": 8
      },
      "revId": "247dde3892da5e9ac5ca04ab68d05bee538bed9d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e4639ba6_cf491cb8",
        "filename": "packages/Tethering/common/TetheringLib/src/android/net/TetheringManager.java",
        "patchSetId": 31
      },
      "lineNbr": 50,
      "author": {
        "id": 1288034
      },
      "writtenOn": "2019-12-19T05:13:00Z",
      "side": 1,
      "message": "Where is this read ? I don\u0027t see it read in this patch.\nWhich thread should this be accessed from ?",
      "range": {
        "startLine": 50,
        "startChar": 0,
        "endLine": 50,
        "endChar": 36
      },
      "revId": "247dde3892da5e9ac5ca04ab68d05bee538bed9d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7483736f_c84a3384",
        "filename": "packages/Tethering/common/TetheringLib/src/android/net/TetheringManager.java",
        "patchSetId": 31
      },
      "lineNbr": 50,
      "author": {
        "id": 1308504
      },
      "writtenOn": "2019-12-19T10:22:28Z",
      "side": 1,
      "message": "Ack, this is not used yet. Removed them in this CL and may add it back when I add the user.",
      "parentUuid": "e4639ba6_cf491cb8",
      "range": {
        "startLine": 50,
        "startChar": 0,
        "endLine": 50,
        "endChar": 36
      },
      "revId": "247dde3892da5e9ac5ca04ab68d05bee538bed9d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c0f3df78_8959ddab",
        "filename": "packages/Tethering/common/TetheringLib/src/android/net/TetheringManager.java",
        "patchSetId": 31
      },
      "lineNbr": 92,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2019-12-18T14:53:24Z",
      "side": 1,
      "message": "This class doesn\u0027t seem very useful. Why not just use a ConditionVariable directly? Also, I personally find the name difficult to understand.",
      "range": {
        "startLine": 92,
        "startChar": 4,
        "endLine": 92,
        "endChar": 36
      },
      "revId": "247dde3892da5e9ac5ca04ab68d05bee538bed9d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2c970ac0_e5caedf0",
        "filename": "packages/Tethering/common/TetheringLib/src/android/net/TetheringManager.java",
        "patchSetId": 31
      },
      "lineNbr": 92,
      "author": {
        "id": 1308504
      },
      "writtenOn": "2019-12-19T04:08:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c0f3df78_8959ddab",
      "range": {
        "startLine": 92,
        "startChar": 4,
        "endLine": 92,
        "endChar": 36
      },
      "revId": "247dde3892da5e9ac5ca04ab68d05bee538bed9d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a9afc2fb_8ba9a285",
        "filename": "packages/Tethering/common/TetheringLib/src/android/net/TetheringManager.java",
        "patchSetId": 31
      },
      "lineNbr": 204,
      "author": {
        "id": 1288034
      },
      "writtenOn": "2019-12-19T05:13:00Z",
      "side": 1,
      "message": "This seems a little verbose, maybe it\u0027s not necessary ?",
      "range": {
        "startLine": 204,
        "startChar": 7,
        "endLine": 204,
        "endChar": 49
      },
      "revId": "247dde3892da5e9ac5ca04ab68d05bee538bed9d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aa34a168_49c37cde",
        "filename": "packages/Tethering/common/TetheringLib/src/android/net/TetheringManager.java",
        "patchSetId": 31
      },
      "lineNbr": 204,
      "author": {
        "id": 1308504
      },
      "writtenOn": "2019-12-19T10:22:28Z",
      "side": 1,
      "message": "This is rare to used, only user may be bt tethering. If someone use it directly, it is worth to print its package name because tethering may not give it upstream if entitlement is needed.",
      "parentUuid": "a9afc2fb_8ba9a285",
      "range": {
        "startLine": 204,
        "startChar": 7,
        "endLine": 204,
        "endChar": 49
      },
      "revId": "247dde3892da5e9ac5ca04ab68d05bee538bed9d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ce0eb652_6ca6e128",
        "filename": "packages/Tethering/common/TetheringLib/src/android/net/TetheringManager.java",
        "patchSetId": 31
      },
      "lineNbr": 397,
      "author": {
        "id": 1288034
      },
      "writtenOn": "2019-12-19T05:13:00Z",
      "side": 1,
      "message": "Why is the callback put back ?",
      "range": {
        "startLine": 397,
        "startChar": 12,
        "endLine": 397,
        "endChar": 67
      },
      "revId": "247dde3892da5e9ac5ca04ab68d05bee538bed9d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3d407d76_bc2af67c",
        "filename": "packages/Tethering/common/TetheringLib/src/android/net/TetheringManager.java",
        "patchSetId": 31
      },
      "lineNbr": 397,
      "author": {
        "id": 1308504
      },
      "writtenOn": "2019-12-19T10:22:28Z",
      "side": 1,
      "message": "Ooops, this is bug. Thanks for catching it.",
      "parentUuid": "ce0eb652_6ca6e128",
      "range": {
        "startLine": 397,
        "startChar": 12,
        "endLine": 397,
        "endChar": 67
      },
      "revId": "247dde3892da5e9ac5ca04ab68d05bee538bed9d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "63345502_f8d13434",
        "filename": "packages/Tethering/src/com/android/server/connectivity/tethering/TetheringService.java",
        "patchSetId": 31
      },
      "lineNbr": 110,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2019-12-18T14:53:24Z",
      "side": 1,
      "message": "This looks strange, or at least very different from standard Android service patterns.\n\nTetheringConnector is basically the same as an Android system service such as ConnectivityService, NetworkStatsService, ActivityManagerService, etc.: it\u0027s a binder endpoint which accepts requests from clients through a manager class. So I\u0027d expect this to be called TetheringService (or TetheringSystemService or something similar), and be in its own class.\n\nInstead it\u0027s a static inner class of something called TetheringService, which is not a system service with a binder interface but a service that is bound by the system server, and as far as I can tell exists only so the system server can start tethering and communicate with it (which it doesn\u0027t usually do, because all communication with tethering goes through the manager class). So: why is TetherinConnector an inner class of TetheringService, if it\u0027s static, and there\u0027s only one TetheringService in the system and only one TetheringConnector for that service?\n\nAlso, the relationship to Tethering is strange. The inner class and the outer service both have a reference to mTethering, so there is no clear ownership model. But it seems that most of the methods in Tethering are used from the connector.\n\nFinally: if TetheringService is only intended to be a simple class that contains a TetheringConnector that does all the actual work, then why does it have methods of its own, that TetheringConnector calls out to? Why aren\u0027t those methods on TetheringConnector directly?\n\nISTM that this would be much easier to understand, or at least much more consistent with other services, if the class now called TetheringConnector were renamed to or TetheringService, and all the intelligence was in that class. Then what is now TetheringService could just be called TetheringStarter or TetheringSystemServerEndpoint, and it could be a very small class whose only job would be to bind to the service and keep it running.\n\nBut perhaps I\u0027m misunderstanding the design here.",
      "range": {
        "startLine": 106,
        "startChar": 0,
        "endLine": 110,
        "endChar": 0
      },
      "revId": "247dde3892da5e9ac5ca04ab68d05bee538bed9d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ba59cb93_5358c8a0",
        "filename": "packages/Tethering/src/com/android/server/connectivity/tethering/TetheringService.java",
        "patchSetId": 31
      },
      "lineNbr": 110,
      "author": {
        "id": 1308504
      },
      "writtenOn": "2019-12-19T04:08:27Z",
      "side": 1,
      "message": "My original thought is TetheringService extend the service so I should call it TetheringService.\nITetheringConnector is a binder which client can use it to connect with tethering service.\nThis the relationship between TetheringService and ITetheringConnector. Tethering is an internal object which hide the main logic of tethering and hold by TetheringService. It is created in onCreate() an object that contains everything and has all the fields final.\nRefer the review background:\nhttps://android-review.googlesource.com/c/platform/frameworks/base/+/1131002/10/packages/Tethering/src/com/android/server/connectivity/tethering/TetheringService.java#b185\n\nI also like your perspective, I think it is more clear because now there are three component ITetheringConnector, TetheringService, and Tethering. The naming of Tethering and TetheringService is very similar, so their role is not intuition for reader. The rename would touch much of code that you should already reviewed, I will have a follow up to rename and clean up your suggestion here.\nITetheringConnector -\u003e TetheringService\nTetheringService -\u003e TetheringStarter",
      "parentUuid": "63345502_f8d13434",
      "range": {
        "startLine": 106,
        "startChar": 0,
        "endLine": 110,
        "endChar": 0
      },
      "revId": "247dde3892da5e9ac5ca04ab68d05bee538bed9d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b475a026_a70fd723",
        "filename": "packages/Tethering/src/com/android/server/connectivity/tethering/TetheringService.java",
        "patchSetId": 31
      },
      "lineNbr": 110,
      "author": {
        "id": 1308504
      },
      "writtenOn": "2019-12-19T10:38:33Z",
      "side": 1,
      "message": "Tracking by b/146542157",
      "parentUuid": "ba59cb93_5358c8a0",
      "range": {
        "startLine": 106,
        "startChar": 0,
        "endLine": 110,
        "endChar": 0
      },
      "revId": "247dde3892da5e9ac5ca04ab68d05bee538bed9d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f839bdba_7dee5008",
        "filename": "packages/Tethering/src/com/android/server/connectivity/tethering/TetheringService.java",
        "patchSetId": 31
      },
      "lineNbr": 127,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2019-12-18T14:53:24Z",
      "side": 1,
      "message": "This pattern seems risky and error-prone in that some validation of the input (e.g., permissions checks) are handled here in TetheringConnector, but some is handled in Tethering.\n\nI fear that this will be confusing and lead to programming errors like missing/contradictory/insufficient input validation and/or permission checking.\n\nIn this specific example, why can\u0027t we just make Tethering do the permission check and the check for tethering supported and return the int?",
      "range": {
        "startLine": 119,
        "startChar": 0,
        "endLine": 127,
        "endChar": 60
      },
      "revId": "247dde3892da5e9ac5ca04ab68d05bee538bed9d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aac83ed6_9eb67eb5",
        "filename": "packages/Tethering/src/com/android/server/connectivity/tethering/TetheringService.java",
        "patchSetId": 31
      },
      "lineNbr": 127,
      "author": {
        "id": 1308504
      },
      "writtenOn": "2019-12-19T04:08:27Z",
      "side": 1,
      "message": "Why you say some in TetheringConnector, but some is handled in Tethering ??\nI want all of them in TetheringConnector. That Tethering should be internal object that don\u0027t need to care about outside access permission. Now it is clear that all of outside access is come from ITetheringConnecotr. I just protect the permission here that it is also clear it is under handler thread in ITetheringConnector.\nPerhaps your concern is isTetheringSupported ?? I put it here just for TetheringDependcies that could be injection for test. I will also fix t his when I do the rename work that isTetheringSupported would be move into Tethering but its logic may still put in TetheringDependcies for testing injection.",
      "parentUuid": "f839bdba_7dee5008",
      "range": {
        "startLine": 119,
        "startChar": 0,
        "endLine": 127,
        "endChar": 60
      },
      "revId": "247dde3892da5e9ac5ca04ab68d05bee538bed9d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ed9f5ad8_9256d8f7",
        "filename": "packages/Tethering/src/com/android/server/connectivity/tethering/TetheringService.java",
        "patchSetId": 31
      },
      "lineNbr": 142,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2019-12-18T14:53:24Z",
      "side": 1,
      "message": "There are many identical copies of this code. Please reduce code duplication somehow. One idea would be to do something like:\n\n    if (checkAndNotifyTetherChangePermissionDenied(listener, callerPkg)) return;\n    if (checkAndNotifyTetheringNotSupported(listener)) return;\n\nOr even merge those two into one method. Something like:\n\n    if (checkAndNotifyCommonError(listener, callerPkg)) return;",
      "range": {
        "startLine": 135,
        "startChar": 0,
        "endLine": 142,
        "endChar": 17
      },
      "revId": "247dde3892da5e9ac5ca04ab68d05bee538bed9d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "592ceb67_05d6a0c4",
        "filename": "packages/Tethering/src/com/android/server/connectivity/tethering/TetheringService.java",
        "patchSetId": 31
      },
      "lineNbr": 142,
      "author": {
        "id": 1308504
      },
      "writtenOn": "2019-12-19T04:08:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ed9f5ad8_9256d8f7",
      "range": {
        "startLine": 135,
        "startChar": 0,
        "endLine": 142,
        "endChar": 17
      },
      "revId": "247dde3892da5e9ac5ca04ab68d05bee538bed9d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafa6aed_eba956b6",
        "filename": "packages/Tethering/src/com/android/server/connectivity/tethering/TetheringService.java",
        "patchSetId": 31
      },
      "lineNbr": 376,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2019-12-18T14:53:24Z",
      "side": 1,
      "message": "This doesn\u0027t look great. Perhaps it\u0027s necessary for now, but it seems like we\u0027d want this to be asynchronous, such that this class would get a callback whenever the network stack is available? Did you work together with Remi on this?",
      "range": {
        "startLine": 370,
        "startChar": 0,
        "endLine": 376,
        "endChar": 46
      },
      "revId": "247dde3892da5e9ac5ca04ab68d05bee538bed9d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "644ebe4d_200842f6",
        "filename": "packages/Tethering/src/com/android/server/connectivity/tethering/TetheringService.java",
        "patchSetId": 31
      },
      "lineNbr": 376,
      "author": {
        "id": 1308504
      },
      "writtenOn": "2019-12-19T04:08:27Z",
      "side": 1,
      "message": "Ack, yes. Will tracking by b/146312721",
      "parentUuid": "fafa6aed_eba956b6",
      "range": {
        "startLine": 370,
        "startChar": 0,
        "endLine": 376,
        "endChar": 46
      },
      "revId": "247dde3892da5e9ac5ca04ab68d05bee538bed9d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6609f52c_08e4e4d2",
        "filename": "packages/Tethering/src/com/android/server/connectivity/tethering/TetheringService.java",
        "patchSetId": 31
      },
      "lineNbr": 376,
      "author": {
        "id": 1288034
      },
      "writtenOn": "2019-12-19T05:17:24Z",
      "side": 1,
      "message": "Right now I think polling is the only way (and would only happen if called very early on boot), but it should be refactored to some utility class, so that clients can just call makeDhcpServer, which is already async.\nIt would probably be better to introduce that class in another change though, this one is big enough.",
      "parentUuid": "644ebe4d_200842f6",
      "range": {
        "startLine": 370,
        "startChar": 0,
        "endLine": 376,
        "endChar": 46
      },
      "revId": "247dde3892da5e9ac5ca04ab68d05bee538bed9d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}