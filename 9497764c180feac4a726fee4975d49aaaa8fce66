{
  "comments": [
    {
      "key": {
        "uuid": "59742598_ac95cc65",
        "filename": "core/jni/android_os_HwRemoteBinder.cpp",
        "patchSetId": 1
      },
      "lineNbr": 421,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2017-11-01T20:28:53Z",
      "side": 1,
      "message": "can we somehow use interfacesEqual from HIDL?",
      "range": {
        "startLine": 420,
        "startChar": 11,
        "endLine": 421,
        "endChar": 76
      },
      "revId": "9497764c180feac4a726fee4975d49aaaa8fce66",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5db8b4e1_4755f3fb",
        "filename": "core/jni/android_os_HwRemoteBinder.cpp",
        "patchSetId": 1
      },
      "lineNbr": 421,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2017-11-01T23:35:45Z",
      "side": 1,
      "message": "No. interfacesEqual compares C++ proxies, not internal binder objects. But in Java, we can only compare binder objects directly (since the logic \"proxy wraps a binder object\" is implemented in Java).\n\nA Java proxy has nothing related to a C++ proxy.",
      "parentUuid": "59742598_ac95cc65",
      "range": {
        "startLine": 420,
        "startChar": 11,
        "endLine": 421,
        "endChar": 76
      },
      "revId": "9497764c180feac4a726fee4975d49aaaa8fce66",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f0de9c04_08ffa30b",
        "filename": "core/jni/android_os_HwRemoteBinder.cpp",
        "patchSetId": 1
      },
      "lineNbr": 427,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2017-11-01T20:28:53Z",
      "side": 1,
      "message": "Should be (l ^ (l \u003e\u003e\u003e 32)), right?. Also, why do we need a comment here? jlong \u003d jint:jint (stitched together). This makes sure all the data gets into the hash.\n\nAlso, nit: maybe \"sizeof(jlong) / 2 * 8\" instead of 32.",
      "range": {
        "startLine": 427,
        "startChar": 62,
        "endLine": 427,
        "endChar": 82
      },
      "revId": "9497764c180feac4a726fee4975d49aaaa8fce66",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4cd1f53c_6053f11d",
        "filename": "core/jni/android_os_HwRemoteBinder.cpp",
        "patchSetId": 1
      },
      "lineNbr": 427,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2017-11-01T23:35:45Z",
      "side": 1,
      "message": "\u003e Should be (l ^ (l \u003e\u003e\u003e 32)), right?\nThere is no \u003e\u003e\u003e operator in C++. Also, it doesn\u0027t matter because we are taking the lower 32 bits.\n\nI actually wanted to call Long.hashCode instead, but I think that\u0027s an overkill (since I need to FindMethodOrDie etc., which is very annoying and inefficient), so I just reimplement it here.\n\n(And I\u0027d like to keep 32 because that\u0027s the expression copied from Long.hashCode java doc)",
      "parentUuid": "f0de9c04_08ffa30b",
      "range": {
        "startLine": 427,
        "startChar": 62,
        "endLine": 427,
        "endChar": 82
      },
      "revId": "9497764c180feac4a726fee4975d49aaaa8fce66",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}