{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "ec69e8ee_cb621aca",
        "filename": "services/core/java/com/android/server/ConnectivityService.java",
        "patchSetId": 5
      },
      "lineNbr": 294,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2020-12-16T14:22:32Z",
      "side": 1,
      "message": "Why do we need this? Did you just copy it from the existing property? I don\u0027t think we\u0027ve ever changed it, and when this code is mainlined I think it won\u0027t be able to read from arbitrary properties.",
      "range": {
        "startLine": 294,
        "startChar": 69,
        "endLine": 294,
        "endChar": 97
      },
      "revId": "79cb2d6e087e22b8e7aeb5fa89666423eae3c2d1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "47f9ef63_3c5b44a4",
        "filename": "services/core/java/com/android/server/ConnectivityService.java",
        "patchSetId": 5
      },
      "lineNbr": 7437,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2020-12-16T14:22:32Z",
      "side": 1,
      "message": "Can you explain why?",
      "range": {
        "startLine": 7437,
        "startChar": 12,
        "endLine": 7437,
        "endChar": 72
      },
      "revId": "79cb2d6e087e22b8e7aeb5fa89666423eae3c2d1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d6c92a00_3729d907",
        "filename": "services/core/java/com/android/server/connectivity/NetworkAgentInfo.java",
        "patchSetId": 5
      },
      "lineNbr": 118,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2020-12-16T14:22:32Z",
      "side": 1,
      "message": "Can you update this comment to reflect this new way in which you\u0027re using the lingering code?",
      "range": {
        "startLine": 118,
        "startChar": 0,
        "endLine": 118,
        "endChar": 14
      },
      "revId": "79cb2d6e087e22b8e7aeb5fa89666423eae3c2d1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "15a787e0_e0b88421",
        "filename": "services/core/java/com/android/server/connectivity/NetworkAgentInfo.java",
        "patchSetId": 5
      },
      "lineNbr": 687,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2020-12-16T14:22:32Z",
      "side": 1,
      "message": "\"lingering\" is a term that has been used for years in this code and has a well-established meaning: a network that was needed and is no longer needed because all the requests were outscored (not just because the requests went away - the requests must have moved to another network).\n\nThis new state behaves the same (for now?) but it\u0027s conceptually different. This state is for a network that we think will be used soon, but might not be used. So can we come up with a new word here, different from \"lingering\"? \"Nascent\"? \"Opportunistic\"?\n\nIt should be easy to distinguish this state from the current lingering state by checking whether it only has one linger timer, for REQUEST_ID_NONE.",
      "range": {
        "startLine": 687,
        "startChar": 37,
        "endLine": 687,
        "endChar": 46
      },
      "revId": "79cb2d6e087e22b8e7aeb5fa89666423eae3c2d1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "532e282c_cedfe5d3",
        "filename": "tests/net/java/com/android/server/ConnectivityServiceTest.java",
        "patchSetId": 5
      },
      "lineNbr": 1659,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2020-12-16T14:22:32Z",
      "side": 1,
      "message": "AIUI this requires that the code run within 100ms of the event or the test will fail. That could be flaky (even if it\u0027s not flaky on your device, it could be flaky on cuttlefish, etc.)\n\nAre there other tests that require 100ms accuracy already? If there are not, I wouldn\u0027t assume that the test infrastructure can run the test reliably enough for it not to be flaky.",
      "range": {
        "startLine": 1659,
        "startChar": 16,
        "endLine": 1659,
        "endChar": 90
      },
      "revId": "79cb2d6e087e22b8e7aeb5fa89666423eae3c2d1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e5d152f7_fabbe06b",
        "filename": "tests/net/java/com/android/server/ConnectivityServiceTest.java",
        "patchSetId": 5
      },
      "lineNbr": 1663,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2020-12-16T14:22:32Z",
      "side": 1,
      "message": "I think you should make things a bit more difficult for your new code. :-) For example, you should at least have the network satisfy a request, and then remove the request, to check that the timer continues to run.\n\nAlso, might want to check what happens if there\u0027s a background request for this network. Presumably the network will go in the background, but it would be good to have a test for that.\n\nFinally, would be good to check what happens if a request does arrive during the linger time. I don\u0027t think the code will send any callbacks, but we should check that the network doesn\u0027t disconnect ðŸ˜Š\n\nLook at testMultipleLingering for other ideas on difficult cases where you might find unexpected behaviour.",
      "range": {
        "startLine": 1663,
        "startChar": 4,
        "endLine": 1663,
        "endChar": 5
      },
      "revId": "79cb2d6e087e22b8e7aeb5fa89666423eae3c2d1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}