{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "ec69e8ee_cb621aca",
        "filename": "services/core/java/com/android/server/ConnectivityService.java",
        "patchSetId": 5
      },
      "lineNbr": 294,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2020-12-16T14:22:32Z",
      "side": 1,
      "message": "Why do we need this? Did you just copy it from the existing property? I don\u0027t think we\u0027ve ever changed it, and when this code is mainlined I think it won\u0027t be able to read from arbitrary properties.",
      "range": {
        "startLine": 294,
        "startChar": 69,
        "endLine": 294,
        "endChar": 97
      },
      "revId": "79cb2d6e087e22b8e7aeb5fa89666423eae3c2d1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "24e6b89f_044a3229",
        "filename": "services/core/java/com/android/server/ConnectivityService.java",
        "patchSetId": 5
      },
      "lineNbr": 294,
      "author": {
        "id": 1306837
      },
      "writtenOn": "2020-12-21T13:14:35Z",
      "side": 1,
      "message": "Done, \nbut it seems to me that we might want it to be customizable for OEM to adjust for low-ended devices?\nAdded a todo. Feel free to reopen if disagreed.",
      "parentUuid": "ec69e8ee_cb621aca",
      "range": {
        "startLine": 294,
        "startChar": 69,
        "endLine": 294,
        "endChar": 97
      },
      "revId": "79cb2d6e087e22b8e7aeb5fa89666423eae3c2d1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "47f9ef63_3c5b44a4",
        "filename": "services/core/java/com/android/server/ConnectivityService.java",
        "patchSetId": 5
      },
      "lineNbr": 7437,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2020-12-16T14:22:32Z",
      "side": 1,
      "message": "Can you explain why?",
      "range": {
        "startLine": 7437,
        "startChar": 12,
        "endLine": 7437,
        "endChar": 72
      },
      "revId": "79cb2d6e087e22b8e7aeb5fa89666423eae3c2d1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "64d27d06_7cc1bd27",
        "filename": "services/core/java/com/android/server/ConnectivityService.java",
        "patchSetId": 5
      },
      "lineNbr": 7437,
      "author": {
        "id": 1306837
      },
      "writtenOn": "2020-12-21T13:14:35Z",
      "side": 1,
      "message": "Rephrased, see if it works for you.",
      "parentUuid": "47f9ef63_3c5b44a4",
      "range": {
        "startLine": 7437,
        "startChar": 12,
        "endLine": 7437,
        "endChar": 72
      },
      "revId": "79cb2d6e087e22b8e7aeb5fa89666423eae3c2d1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d6c92a00_3729d907",
        "filename": "services/core/java/com/android/server/connectivity/NetworkAgentInfo.java",
        "patchSetId": 5
      },
      "lineNbr": 118,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2020-12-16T14:22:32Z",
      "side": 1,
      "message": "Can you update this comment to reflect this new way in which you\u0027re using the lingering code?",
      "range": {
        "startLine": 118,
        "startChar": 0,
        "endLine": 118,
        "endChar": 14
      },
      "revId": "79cb2d6e087e22b8e7aeb5fa89666423eae3c2d1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "882c965d_03b43e6c",
        "filename": "services/core/java/com/android/server/connectivity/NetworkAgentInfo.java",
        "patchSetId": 5
      },
      "lineNbr": 118,
      "author": {
        "id": 1306837
      },
      "writtenOn": "2020-12-21T13:14:35Z",
      "side": 1,
      "message": "Done.\nTry to make it better but not sure.\nSince we are reusing the lingering logic but the meaning is different,\nthis is already kind of confusing.",
      "parentUuid": "d6c92a00_3729d907",
      "range": {
        "startLine": 118,
        "startChar": 0,
        "endLine": 118,
        "endChar": 14
      },
      "revId": "79cb2d6e087e22b8e7aeb5fa89666423eae3c2d1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "15a787e0_e0b88421",
        "filename": "services/core/java/com/android/server/connectivity/NetworkAgentInfo.java",
        "patchSetId": 5
      },
      "lineNbr": 687,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2020-12-16T14:22:32Z",
      "side": 1,
      "message": "\"lingering\" is a term that has been used for years in this code and has a well-established meaning: a network that was needed and is no longer needed because all the requests were outscored (not just because the requests went away - the requests must have moved to another network).\n\nThis new state behaves the same (for now?) but it\u0027s conceptually different. This state is for a network that we think will be used soon, but might not be used. So can we come up with a new word here, different from \"lingering\"? \"Nascent\"? \"Opportunistic\"?\n\nIt should be easy to distinguish this state from the current lingering state by checking whether it only has one linger timer, for REQUEST_ID_NONE.",
      "range": {
        "startLine": 687,
        "startChar": 37,
        "endLine": 687,
        "endChar": 46
      },
      "revId": "79cb2d6e087e22b8e7aeb5fa89666423eae3c2d1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "176baa93_a43f5634",
        "filename": "services/core/java/com/android/server/connectivity/NetworkAgentInfo.java",
        "patchSetId": 5
      },
      "lineNbr": 687,
      "author": {
        "id": 1306837
      },
      "writtenOn": "2020-12-21T13:14:35Z",
      "side": 1,
      "message": "Done.\nSee if it works for you.\n\nBut I\u0027m not sure in what degree do we want to separate the functionality?\ne.g. from: linger unlinger  isLingering  mLingering mLingerTimers\nto setNascent(true/false) isNascent  mNascent mNasentTimer\n\nTo me it seems overkill if we do too much, WDYT?",
      "parentUuid": "15a787e0_e0b88421",
      "range": {
        "startLine": 687,
        "startChar": 37,
        "endLine": 687,
        "endChar": 46
      },
      "revId": "79cb2d6e087e22b8e7aeb5fa89666423eae3c2d1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "12201f0e_c0e0394e",
        "filename": "services/core/java/com/android/server/connectivity/NetworkAgentInfo.java",
        "patchSetId": 5
      },
      "lineNbr": 687,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2021-02-01T15:22:52Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "176baa93_a43f5634",
      "range": {
        "startLine": 687,
        "startChar": 37,
        "endLine": 687,
        "endChar": 46
      },
      "revId": "79cb2d6e087e22b8e7aeb5fa89666423eae3c2d1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "532e282c_cedfe5d3",
        "filename": "tests/net/java/com/android/server/ConnectivityServiceTest.java",
        "patchSetId": 5
      },
      "lineNbr": 1659,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2020-12-16T14:22:32Z",
      "side": 1,
      "message": "AIUI this requires that the code run within 100ms of the event or the test will fail. That could be flaky (even if it\u0027s not flaky on your device, it could be flaky on cuttlefish, etc.)\n\nAre there other tests that require 100ms accuracy already? If there are not, I wouldn\u0027t assume that the test infrastructure can run the test reliably enough for it not to be flaky.",
      "range": {
        "startLine": 1659,
        "startChar": 16,
        "endLine": 1659,
        "endChar": 90
      },
      "revId": "79cb2d6e087e22b8e7aeb5fa89666423eae3c2d1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6a941ea2_c78c2172",
        "filename": "tests/net/java/com/android/server/ConnectivityServiceTest.java",
        "patchSetId": 5
      },
      "lineNbr": 1659,
      "author": {
        "id": 1306837
      },
      "writtenOn": "2020-12-21T13:14:35Z",
      "side": 1,
      "message": "Yes we have two tests which already use this mechanism, refer to:\nhttps://osscs.corp.google.com/android/platform/superproject/+/master:frameworks/base/tests/net/java/com/android/server/ConnectivityServiceTest.java;l\u003d2298?q\u003dConnectivityServiceTest\u0026ss\u003dandroid\nSo for short-term I think it \"might\" be ok?\n\nFor long-term,\nI have another patch stack to adapt TestLooper into CS, if that happens we can use something like mTestLooper.moveTimeForward(long milliSeconds), that allows us to not really wait for the time, and verify things accurately regardless of the device processing speed. But it is SUPER slow now.\nhttps://android-review.googlesource.com/c/platform/frameworks/base/+/1438375\n\nWDYT?",
      "parentUuid": "532e282c_cedfe5d3",
      "range": {
        "startLine": 1659,
        "startChar": 16,
        "endLine": 1659,
        "endChar": 90
      },
      "revId": "79cb2d6e087e22b8e7aeb5fa89666423eae3c2d1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1d4f6e85_f20fdb14",
        "filename": "tests/net/java/com/android/server/ConnectivityServiceTest.java",
        "patchSetId": 5
      },
      "lineNbr": 1659,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2021-02-01T15:22:52Z",
      "side": 1,
      "message": "Ack. Maybe just keep an eye on the dashboards to check whether this test is flaky or not, and if not, don\u0027t worry about it?",
      "parentUuid": "6a941ea2_c78c2172",
      "range": {
        "startLine": 1659,
        "startChar": 16,
        "endLine": 1659,
        "endChar": 90
      },
      "revId": "79cb2d6e087e22b8e7aeb5fa89666423eae3c2d1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e5d152f7_fabbe06b",
        "filename": "tests/net/java/com/android/server/ConnectivityServiceTest.java",
        "patchSetId": 5
      },
      "lineNbr": 1663,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2020-12-16T14:22:32Z",
      "side": 1,
      "message": "I think you should make things a bit more difficult for your new code. :-) For example, you should at least have the network satisfy a request, and then remove the request, to check that the timer continues to run.\n\nAlso, might want to check what happens if there\u0027s a background request for this network. Presumably the network will go in the background, but it would be good to have a test for that.\n\nFinally, would be good to check what happens if a request does arrive during the linger time. I don\u0027t think the code will send any callbacks, but we should check that the network doesn\u0027t disconnect 😊\n\nLook at testMultipleLingering for other ideas on difficult cases where you might find unexpected behaviour.",
      "range": {
        "startLine": 1663,
        "startChar": 4,
        "endLine": 1663,
        "endChar": 5
      },
      "revId": "79cb2d6e087e22b8e7aeb5fa89666423eae3c2d1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6ef699a4_dc046720",
        "filename": "tests/net/java/com/android/server/ConnectivityServiceTest.java",
        "patchSetId": 5
      },
      "lineNbr": 1663,
      "author": {
        "id": 1306837
      },
      "writtenOn": "2020-12-21T13:14:35Z",
      "side": 1,
      "message": "Done.\n Add test cases which:\n 1. Verify the network will be torn down without rescheduling if request is added and removed.\n 2. Verify the network should not be torn down if a request arrived in time and satisfied.\n 3. Verify the network goes to background if linger complete with a background request",
      "parentUuid": "e5d152f7_fabbe06b",
      "range": {
        "startLine": 1663,
        "startChar": 4,
        "endLine": 1663,
        "endChar": 5
      },
      "revId": "79cb2d6e087e22b8e7aeb5fa89666423eae3c2d1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}