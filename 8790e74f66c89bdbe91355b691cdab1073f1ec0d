{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "97355e01_246c2d75",
        "filename": "core/java/android/app/ActivityThread.java",
        "patchSetId": 15
      },
      "lineNbr": 7430,
      "author": {
        "id": 1561214
      },
      "writtenOn": "2024-10-11T17:48:22Z",
      "side": 1,
      "message": "We have called the `addApplicaiton()` above, but why do we need to call `addApplication()` again in the `initInstrumentation()`?",
      "revId": "8790e74f66c89bdbe91355b691cdab1073f1ec0d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5e0d2842_2e33db44",
        "filename": "core/java/android/app/ActivityThread.java",
        "patchSetId": 15
      },
      "lineNbr": 7430,
      "author": {
        "id": 1083168
      },
      "writtenOn": "2024-10-11T18:09:00Z",
      "side": 1,
      "message": "The addApplication above declares the app package name (e.g.: `my.app.com`). In most usecases, there is only one app in a process.\n\nBut when you run instrumented tests (initInstrumentation) you request another app (e.g.: `test.my.app.com`) to be brought into this process so we need to call it again.\n\nAn app process can host many apks. You can even start an app and tell it to run within another app process via `AndroidManifest.xml`\u0027s `android:process (that is why we also call addApplication in LoadedApk.java).",
      "parentUuid": "97355e01_246c2d75",
      "revId": "8790e74f66c89bdbe91355b691cdab1073f1ec0d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "95870c2a_956dd02a",
        "filename": "core/java/android/app/ActivityThread.java",
        "patchSetId": 15
      },
      "lineNbr": 7771,
      "author": {
        "id": 1561214
      },
      "writtenOn": "2024-10-11T21:50:48Z",
      "side": 1,
      "message": "Hm. Okay, but just one caveat: for the self-instrument case, will there be any issue, if this line removes the application from its list but it may actually still need it?",
      "fixSuggestions": [
        {
          "fixId": "20e2f5eb_509af972",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "core/java/android/app/ActivityThread.java",
              "range": {
                "startLine": 7774,
                "startChar": 0,
                "endLine": 7783,
                "endChar": 0
              },
              "replacement": "         mInstrumentation.onDestroy();\n         mInstrumentationPackageName \u003d null;\n         mInstrumentationAppDir \u003d null;\n         mInstrumentationSplitAppDirs \u003d null;\n         mInstrumentationLibDir \u003d null;\n         mInstrumentedAppDir \u003d null;\n         mInstrumentedSplitAppDirs \u003d null;\n         mInstrumentedLibDir \u003d null;\n         mInstrumentingWithoutRestart \u003d false;\n"
            }
          ]
        }
      ],
      "revId": "8790e74f66c89bdbe91355b691cdab1073f1ec0d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3fd62e9b_17ba7871",
        "filename": "core/java/android/app/ActivityThread.java",
        "patchSetId": 15
      },
      "lineNbr": 7771,
      "author": {
        "id": 1083168
      },
      "writtenOn": "2024-10-11T21:57:45Z",
      "side": 1,
      "message": "This method is called when instrumentation ends. At which point the instrumentation app is removed from this process. Below you can see how `mInstrumentationPackageName1 is set to null so ` it may actually still need it` is not possible. \n\nIt is guaranteed that instrumentation is no longer needed by ActivityThread, so VMDebug should tell adbd it is gone.",
      "parentUuid": "95870c2a_956dd02a",
      "revId": "8790e74f66c89bdbe91355b691cdab1073f1ec0d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1586a031_fc3a6e56",
        "filename": "core/java/android/app/ActivityThread.java",
        "patchSetId": 15
      },
      "lineNbr": 7771,
      "author": {
        "id": 1561214
      },
      "writtenOn": "2024-10-11T23:13:52Z",
      "side": 1,
      "message": "I understand, I meant the self-instrumentation case. Plus it could be used in \"instrument without restart\". So think about this:\n\nAt process start, we firstly called VMDebug.addApplication(package) and then during the initialization of instrumentation, we actually called that again. If whoever receives the callback \"AddApplication()\", they might be ignoring the 2nd one because it\u0027s the same package. And later when we stop the instrumentation, the callback interface might be thinking it should remove the package from its booking system. After that its booking system will be empty, but at this moment the process is still alive, if the app wants to send debug info back, will there be any problem?",
      "parentUuid": "3fd62e9b_17ba7871",
      "revId": "8790e74f66c89bdbe91355b691cdab1073f1ec0d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "50da4e14_980a8d0f",
        "filename": "core/java/android/app/ActivityThread.java",
        "patchSetId": 15
      },
      "lineNbr": 7771,
      "author": {
        "id": 1083168
      },
      "writtenOn": "2024-10-15T00:02:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1586a031_fc3a6e56",
      "revId": "8790e74f66c89bdbe91355b691cdab1073f1ec0d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}