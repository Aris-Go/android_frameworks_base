{
  "comments": [
    {
      "key": {
        "uuid": "4badd0ba_00323fb7",
        "filename": "core/java/android/net/ConnectivityManager.java",
        "patchSetId": 3
      },
      "lineNbr": 1487,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2017-02-01T06:53:05Z",
      "side": 1,
      "message": "Nit: I\u0027d just throw an IllegalArgumentException for any invalid input since that is not a failure mode but a programming error.\n\nAll the callers of this code are going to be tightly coupled with it, so I don\u0027t see the benefit of adding code to support graceful error recovery.",
      "range": {
        "startLine": 1482,
        "startChar": 0,
        "endLine": 1487,
        "endChar": 39
      },
      "revId": "d1905493d8b69e8f77875e43469b33bc932bd222",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27707ccf_6a433c03",
        "filename": "core/java/android/net/ConnectivityManager.java",
        "patchSetId": 3
      },
      "lineNbr": 1487,
      "author": {
        "id": 1000451
      },
      "writtenOn": "2017-02-01T08:34:16Z",
      "side": 1,
      "message": "Done, kinda sorta.",
      "range": {
        "startLine": 1482,
        "startChar": 0,
        "endLine": 1487,
        "endChar": 39
      },
      "revId": "d1905493d8b69e8f77875e43469b33bc932bd222",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ab9e7788_0f522908",
        "filename": "core/java/android/net/ConnectivityManager.java",
        "patchSetId": 3
      },
      "lineNbr": 1493,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2017-02-01T06:53:05Z",
      "side": 1,
      "message": "Instead of duplicating the knowledge about what\u0027s restricted and what\u0027s not, I would suggest unconditionally doing:\n\n    nc.maybeMarkCapabilitiesRestricted();\n\nbefore:\n\n    return nc;",
      "range": {
        "startLine": 1493,
        "startChar": 16,
        "endLine": 1493,
        "endChar": 87
      },
      "revId": "d1905493d8b69e8f77875e43469b33bc932bd222",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c1fa5d3a_5fab8c1b",
        "filename": "core/java/android/net/ConnectivityManager.java",
        "patchSetId": 3
      },
      "lineNbr": 1493,
      "author": {
        "id": 1000451
      },
      "writtenOn": "2017-02-01T08:34:16Z",
      "side": 1,
      "message": "Done",
      "range": {
        "startLine": 1493,
        "startChar": 16,
        "endLine": 1493,
        "endChar": 87
      },
      "revId": "d1905493d8b69e8f77875e43469b33bc932bd222",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "24f672e8_2d2a9500",
        "filename": "core/java/android/net/ConnectivityManager.java",
        "patchSetId": 3
      },
      "lineNbr": 1504,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2017-02-01T06:53:05Z",
      "side": 1,
      "message": "Nit: now that you have this new code, can you also simplify networkCapabilitiesForFeature to call it? That method could become something very simple along the lines of:\n\n    private NetworkCapabilities networkCapabilitiesForFeature(int networkType, String feature) {\n        if (networkType \u003d\u003d TYPE_MOBILE) {\n            switch (feature) {\n                case \"enableMMS\":\n                    return networkCapabilitiesForType(TYPE_MOBILE_MMS);\n                case \"enableSUPL\":\n                    return networkCapabilitiesForType(TYPE_MOBILE_SUPL);\n                case \"enableDUN\":\n                case \"enableDUNAlways\":\n                    return networkCapabilitiesForType(TYPE_MOBILE_SUPL);\n                ....\n            }\n        } else if (networkType \u003d\u003d TYPE_WIFI \u0026\u0026 \"p2p\".equals(feature)) {\n            return networkCapabilitiesForType(TYPE_WIFI_P2P);\n        }\n\n        return null;\n    }",
      "revId": "d1905493d8b69e8f77875e43469b33bc932bd222",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f3034945_c191ca3a",
        "filename": "core/java/android/net/ConnectivityManager.java",
        "patchSetId": 3
      },
      "lineNbr": 1504,
      "author": {
        "id": 1000451
      },
      "writtenOn": "2017-02-01T08:34:16Z",
      "side": 1,
      "message": "Done",
      "revId": "d1905493d8b69e8f77875e43469b33bc932bd222",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1e0580f7_ff61f984",
        "filename": "core/java/android/net/NetworkCapabilities.java",
        "patchSetId": 3
      },
      "lineNbr": 426,
      "author": {
        "id": 1107893
      },
      "writtenOn": "2017-02-01T01:04:31Z",
      "side": 1,
      "message": "is this necessary ?",
      "range": {
        "startLine": 426,
        "startChar": 4,
        "endLine": 426,
        "endChar": 17
      },
      "revId": "d1905493d8b69e8f77875e43469b33bc932bd222",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "25be772b_ee509299",
        "filename": "core/java/android/net/NetworkCapabilities.java",
        "patchSetId": 3
      },
      "lineNbr": 426,
      "author": {
        "id": 1000451
      },
      "writtenOn": "2017-02-01T08:34:16Z",
      "side": 1,
      "message": "Strictly speaking: no.  But it has been a convention I\u0027ve seen used in our code base in the past.",
      "range": {
        "startLine": 426,
        "startChar": 4,
        "endLine": 426,
        "endChar": 17
      },
      "revId": "d1905493d8b69e8f77875e43469b33bc932bd222",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aa194f47_09f28da3",
        "filename": "services/core/java/com/android/server/connectivity/tethering/UpstreamNetworkMonitor.java",
        "patchSetId": 3
      },
      "lineNbr": 71,
      "author": {
        "id": 1107893
      },
      "writtenOn": "2017-02-01T01:04:31Z",
      "side": 1,
      "message": "consider prefixing these constants with CALLBACK_ or for clarifying their purpose.",
      "range": {
        "startLine": 69,
        "startChar": 0,
        "endLine": 71,
        "endChar": 48
      },
      "revId": "d1905493d8b69e8f77875e43469b33bc932bd222",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "852fae81_544bb80b",
        "filename": "services/core/java/com/android/server/connectivity/tethering/UpstreamNetworkMonitor.java",
        "patchSetId": 3
      },
      "lineNbr": 71,
      "author": {
        "id": 1000451
      },
      "writtenOn": "2017-02-01T08:34:16Z",
      "side": 1,
      "message": "Done",
      "range": {
        "startLine": 69,
        "startChar": 0,
        "endLine": 71,
        "endChar": 48
      },
      "revId": "d1905493d8b69e8f77875e43469b33bc932bd222",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4b87685a_b3a80968",
        "filename": "services/core/java/com/android/server/connectivity/tethering/UpstreamNetworkMonitor.java",
        "patchSetId": 3
      },
      "lineNbr": 184,
      "author": {
        "id": 1107893
      },
      "writtenOn": "2017-02-01T01:04:31Z",
      "side": 1,
      "message": "consider using a switch.",
      "range": {
        "startLine": 182,
        "startChar": 0,
        "endLine": 184,
        "endChar": 81
      },
      "revId": "d1905493d8b69e8f77875e43469b33bc932bd222",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8d6f9e76_0c25ba35",
        "filename": "services/core/java/com/android/server/connectivity/tethering/UpstreamNetworkMonitor.java",
        "patchSetId": 3
      },
      "lineNbr": 184,
      "author": {
        "id": 1000451
      },
      "writtenOn": "2017-02-01T08:34:16Z",
      "side": 1,
      "message": "Done",
      "range": {
        "startLine": 182,
        "startChar": 0,
        "endLine": 184,
        "endChar": 81
      },
      "revId": "d1905493d8b69e8f77875e43469b33bc932bd222",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ca5150e7_170b8894",
        "filename": "tests/net/java/android/net/ConnectivityManagerTest.java",
        "patchSetId": 3
      },
      "lineNbr": 43,
      "author": {
        "id": 1107893
      },
      "writtenOn": "2017-02-01T01:04:31Z",
      "side": 1,
      "message": "I suggest a static import of all the TRANSPORT_* constants you need.",
      "range": {
        "startLine": 43,
        "startChar": 35,
        "endLine": 43,
        "endChar": 73
      },
      "revId": "d1905493d8b69e8f77875e43469b33bc932bd222",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "88d789f9_3fba5c8f",
        "filename": "tests/net/java/android/net/ConnectivityManagerTest.java",
        "patchSetId": 3
      },
      "lineNbr": 43,
      "author": {
        "id": 1000451
      },
      "writtenOn": "2017-02-01T08:34:16Z",
      "side": 1,
      "message": "Done",
      "range": {
        "startLine": 43,
        "startChar": 35,
        "endLine": 43,
        "endChar": 73
      },
      "revId": "d1905493d8b69e8f77875e43469b33bc932bd222",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1f9dce4b_e2f41992",
        "filename": "tests/net/java/android/net/ConnectivityManagerTest.java",
        "patchSetId": 3
      },
      "lineNbr": 47,
      "author": {
        "id": 1107893
      },
      "writtenOn": "2017-02-01T01:04:31Z",
      "side": 1,
      "message": "Not necessarily important if you have any higher priority tasks. Here are just a couple of comments about testing:\n\n- if you see repeated pattern in tests, consider refactoring it like non-test code. For instance here you could have:\n\nassertHasCapabalities(NetworkCapabilities nc, int... caps) {\n  for (int c : caps) {\n    assertTrue(nc.hasCapability, caps);\n  }\n}\n\nyou can also create a testcase method like this:\n\nvoid verifyNetworkCapabalitiesForType(int type, int transport, int... caps) {\n  final NetCap nc \u003d ConnMgr.netCapForType(type);\n  assertNonNull(nc);\n  assertTrue(nc.hasTransport(transport));\n  assertHasCapabilities(nc, caps);\n}\n\n- assertTrue() is very unhelpful for debugging, because it prints messages like \"got false, expected true\" which are not immediately actionable. One alternative for better test failure messages is using the overloaded version with a string:\n\nassertTrue(\"expected capability \" + transportName(c), nc.hasCapability(c));",
      "range": {
        "startLine": 43,
        "startChar": 9,
        "endLine": 47,
        "endChar": 81
      },
      "revId": "d1905493d8b69e8f77875e43469b33bc932bd222",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cede3a1c_8309682e",
        "filename": "tests/net/java/android/net/ConnectivityManagerTest.java",
        "patchSetId": 3
      },
      "lineNbr": 47,
      "author": {
        "id": 1000451
      },
      "writtenOn": "2017-02-01T08:34:16Z",
      "side": 1,
      "message": "I didn\u0027t expand all the assertTrue() logging this time \u0027round, but I did refactor to verifyNetworkCapabilities...sort of.",
      "range": {
        "startLine": 43,
        "startChar": 9,
        "endLine": 47,
        "endChar": 81
      },
      "revId": "d1905493d8b69e8f77875e43469b33bc932bd222",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}