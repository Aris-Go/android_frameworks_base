{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "8ed0faa5_1e0cb483",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1096528
      },
      "writtenOn": "2024-05-25T03:11:55Z",
      "side": 1,
      "message": "Hi @asmitapoddar@google.com @vdevmurari@google.com @arpitks@google.com! Please consider this change and let me know if you\u0027d like any alterations or have any objections.",
      "revId": "43da06f310c76bdb0e475730f54c4a92b4597e07",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dce7019c_fd42135e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1096528
      },
      "writtenOn": "2024-05-30T18:02:39Z",
      "side": 1,
      "message": "Hi @asmitapoddar@google.com @vdevmurari@google.com @arpitks@google.com just a quick ping again for visibility. Thanks!",
      "parentUuid": "8ed0faa5_1e0cb483",
      "revId": "43da06f310c76bdb0e475730f54c4a92b4597e07",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "73e53da4_6a370524",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1407716
      },
      "writtenOn": "2024-06-03T14:12:22Z",
      "side": 1,
      "message": "Hi @tophyr@gmail.com,\n\nThanks for the change! Can you please elaborate why this is needed?\n\nWe are actively trying to reduce the dependencies on global monitors for input, and would eventually like to remove this API altogether. There may be alternative APIs that might be better suited for your use case.",
      "revId": "43da06f310c76bdb0e475730f54c4a92b4597e07",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f6649cdf_8cd62826",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1149384
      },
      "writtenOn": "2024-06-03T16:43:43Z",
      "side": 1,
      "message": "Right, I would expect apps with this permissions to launch a window with SPY flag instead. I don\u0027t think we should be building on top of this monitor stuff, and should ideally try to remove it.",
      "parentUuid": "73e53da4_6a370524",
      "revId": "43da06f310c76bdb0e475730f54c4a92b4597e07",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a1fb9d23_2a1734ba",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1149384
      },
      "writtenOn": "2024-06-03T16:44:13Z",
      "side": 1,
      "message": "Reopening",
      "parentUuid": "f6649cdf_8cd62826",
      "revId": "43da06f310c76bdb0e475730f54c4a92b4597e07",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a47e04c4_db855dbb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1096528
      },
      "writtenOn": "2024-06-04T00:54:57Z",
      "side": 1,
      "message": "@prabirmsp@google.com @svv@google.com I saw the spy window stuff but it seems focused on gesture monitors.\n\nThe use case here is a (appropriately-privileged) Service-based system that needs to monitor both KeyEvent and non-touch-based MotionEvent streams. Gesture monitors can\u0027t do that, unfortunately. Because it\u0027s a Service, it doesn\u0027t really have a Window either.\n\nI do see that nearly all of the references to `monitorInput()` have been eliminated - afaict all monitors in AOSP have been interested in pointer events. Do you have any suggestions on how to better accomplish monitoring of KeyEvents?",
      "parentUuid": "a1fb9d23_2a1734ba",
      "revId": "43da06f310c76bdb0e475730f54c4a92b4597e07",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0357f4fc_096522c5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1096528
      },
      "writtenOn": "2024-06-04T00:54:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dce7019c_fd42135e",
      "revId": "43da06f310c76bdb0e475730f54c4a92b4597e07",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9e61460a_d47031c1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1149384
      },
      "writtenOn": "2024-06-04T08:17:27Z",
      "side": 1,
      "message": "Can you explain why the service needs to monitor keys? What is it doing with them? What kind of keys is it for? We don\u0027t have an API today for key pilfering. What happens if your service decides to handle the key, and at the same time, some focused window also decides to handle the key?",
      "parentUuid": "a47e04c4_db855dbb",
      "revId": "43da06f310c76bdb0e475730f54c4a92b4597e07",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d023568f_8983da6e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1096528
      },
      "writtenOn": "2024-06-04T17:10:31Z",
      "side": 1,
      "message": "I don\u0027t want to \"pilfer\", or prevent the intended destination from receiving, the event. I just want to receive it in parallel, which is why the InputMonitor functionality seemed so perfect.\n\nThe specific use case right now is for gamepad and joystick events, which are delivered as a combination of KeyEvents and MotionEvents.",
      "parentUuid": "9e61460a_d47031c1",
      "revId": "43da06f310c76bdb0e475730f54c4a92b4597e07",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a2e1a3c5_10dc673e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1149384
      },
      "writtenOn": "2024-06-04T17:14:08Z",
      "side": 1,
      "message": "What are you trying to do with the gamepad / joystick events if you don\u0027t want to pilfer or handle them?",
      "parentUuid": "d023568f_8983da6e",
      "revId": "43da06f310c76bdb0e475730f54c4a92b4597e07",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6362d8e4_04457015",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1096528
      },
      "writtenOn": "2024-06-04T17:26:21Z",
      "side": 1,
      "message": "I do need to handle them, I just don\u0027t need to prevent the destination from receiving them. The gamepad state is effectively being copied and exposed via a secondary API, for compatibility reasons. Applications will use either this secondary API, *or* the traditional flinger input, for consuming gamepad input - not both.\n\nI considered intercepting the flung input inside the target application (via modifications to the device\u0027s NDK implementation) but decided that was a smelly approach; I don\u0027t want to modify the client\u0027s behavior nor do I want my service to receive input *from* the client.",
      "parentUuid": "a2e1a3c5_10dc673e",
      "revId": "43da06f310c76bdb0e475730f54c4a92b4597e07",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}