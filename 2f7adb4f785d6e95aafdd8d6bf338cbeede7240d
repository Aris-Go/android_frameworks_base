{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "ed04b663_cc56d10b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1080076
      },
      "writtenOn": "2024-04-12T20:07:23Z",
      "side": 1,
      "message": "Curious if we could have a generic hole-punching for all apks and elfs in the /data/app directory regardless of the file format. All readonly files in the app installation directories could be optimized like this, as they won\u0027t ever change after installation. Also, the code doesn\u0027t need to _only_ do it for the alignment pieces if we\u0027re only looking for full aligned blocks of zeroes - this kind of check is pretty fast if the file is still in the page cache right after writing",
      "revId": "2f7adb4f785d6e95aafdd8d6bf338cbeede7240d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cea89c49_5d6ca296",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1080076
      },
      "writtenOn": "2024-04-12T20:09:12Z",
      "side": 1,
      "message": "it may also make sense to turn the whole feature off on IncFS, where the blocks may not be present at all and the code could be triggering an on-demand load from Play Store\ngo/incfs",
      "parentUuid": "ed04b663_cc56d10b",
      "revId": "2f7adb4f785d6e95aafdd8d6bf338cbeede7240d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2ad061aa_d9e6499c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2024-04-12T20:52:25Z",
      "side": 1,
      "message": "This path won\u0027t get hit for incremental, and it would already be a problem since it copies the whole file directly.\n\nYou can see incremental files are handled here in a separate branch, so the copy is never invoked:\nhttps://cs.android.com/android/platform/superproject/main/+/main:frameworks/base/core/java/com/android/internal/content/NativeLibraryHelper.java;l\u003d353;drc\u003d1030f5807e6b4fb593a675fb3f91e77bbadc5b94",
      "parentUuid": "cea89c49_5d6ca296",
      "revId": "2f7adb4f785d6e95aafdd8d6bf338cbeede7240d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1afdeca6_208fe36c",
        "filename": "core/jni/com_android_internal_content_FileSystemUtils.cpp",
        "patchSetId": 3
      },
      "lineNbr": 226,
      "author": {
        "id": 1080076
      },
      "writtenOn": "2024-04-12T20:03:05Z",
      "side": 1,
      "message": "nit: I\u0027m surprised this code doesn\u0027t have any error code checking for several syscalls",
      "range": {
        "startLine": 226,
        "startChar": 4,
        "endLine": 226,
        "endChar": 11
      },
      "revId": "2f7adb4f785d6e95aafdd8d6bf338cbeede7240d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0ef0a858_86a737f8",
        "filename": "core/jni/com_android_internal_content_FileSystemUtils.cpp",
        "patchSetId": 3
      },
      "lineNbr": 226,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2024-04-12T20:52:25Z",
      "side": 1,
      "message": "+1. this should be checked 100%, if it fails, we might call punch holes too many times, which wouldn\u0027t really be useful",
      "parentUuid": "1afdeca6_208fe36c",
      "range": {
        "startLine": 226,
        "startChar": 4,
        "endLine": 226,
        "endChar": 11
      },
      "revId": "2f7adb4f785d6e95aafdd8d6bf338cbeede7240d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "526ad4e2_11cdb901",
        "filename": "core/jni/com_android_internal_content_FileSystemUtils.cpp",
        "patchSetId": 3
      },
      "lineNbr": 249,
      "author": {
        "id": 1080076
      },
      "writtenOn": "2024-04-12T20:03:05Z",
      "side": 1,
      "message": "this variable is uint16_t, so it can\u0027t physically be \u003e64k",
      "range": {
        "startLine": 249,
        "startChar": 8,
        "endLine": 249,
        "endChar": 21
      },
      "revId": "2f7adb4f785d6e95aafdd8d6bf338cbeede7240d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ba4ecbad_5c442068",
        "filename": "core/jni/com_android_internal_content_FileSystemUtils.cpp",
        "patchSetId": 3
      },
      "lineNbr": 277,
      "author": {
        "id": 1499410
      },
      "writtenOn": "2024-04-12T18:12:57Z",
      "side": 1,
      "message": "I think you can skip some of the checks below by doing:\n\n```\nwhile (buf[currentSize] !\u003d 0 \u0026\u0026 currentSize \u003c extraFieldLen-1) { currentSize++; }\n```\n\n\nSuggestion: you might simplify the loop like:\n\n\n```\n    int start \u003d -1; // -1 means we have not found a start\n    for (int i \u003d 0; i \u003c size; ++i) {\n        if (buf[i] \u003d\u003d 0 \u0026\u0026 start \u003d -1) {\n            start \u003d i;\n        } else if (buf[i] !\u003d 0 \u0026\u0026 start !\u003d -1) {\n            int end \u003d i - 1;\n            \n            // punchStart  \u003d start\n            // punchLen \u003d end-start+1\n            // Do fallocate work\n        }\n    }\n```\n\n```",
      "range": {
        "startLine": 277,
        "startChar": 8,
        "endLine": 277,
        "endChar": 27
      },
      "revId": "2f7adb4f785d6e95aafdd8d6bf338cbeede7240d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "54bef833_80f02c62",
        "filename": "core/jni/com_android_internal_content_FileSystemUtils.cpp",
        "patchSetId": 3
      },
      "lineNbr": 299,
      "author": {
        "id": 1080076
      },
      "writtenOn": "2024-04-12T20:03:05Z",
      "side": 1,
      "message": "as I understand, it only makes sense to run for block-aligned offsets, otherwise it forcefully writes zeroes into the partially affected block. Should there be a check that there\u0027s a full block inside the [punchOffset, punchOffset + punchLen) and maybe it\u0027s better to trim it down just to the block boundaries to not cause extra zeroing.\n\nman:\n\u003eWithin the specified range, partial filesystem blocks are zeroed,\n       and whole filesystem blocks are removed from the file",
      "range": {
        "startLine": 299,
        "startChar": 39,
        "endLine": 299,
        "endChar": 59
      },
      "revId": "2f7adb4f785d6e95aafdd8d6bf338cbeede7240d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "58e247b1_35d2ce34",
        "filename": "core/jni/com_android_internal_content_NativeLibraryHelper.cpp",
        "patchSetId": 3
      },
      "lineNbr": 245,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2024-04-12T16:30:33Z",
      "side": 1,
      "message": "are you still going to add the punch holes for the extracted files for non-ext4 files? where is that CL?",
      "range": {
        "startLine": 239,
        "startChar": 2,
        "endLine": 245,
        "endChar": 5
      },
      "revId": "2f7adb4f785d6e95aafdd8d6bf338cbeede7240d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3f0fc66e_617c7969",
        "filename": "core/jni/com_android_internal_content_NativeLibraryHelper.cpp",
        "patchSetId": 3
      },
      "lineNbr": 245,
      "author": {
        "id": 1956258
      },
      "writtenOn": "2024-04-12T17:08:04Z",
      "side": 1,
      "message": "Added here: https://android-review.git.corp.google.com/c/platform/frameworks/base/+/3039899/1",
      "parentUuid": "58e247b1_35d2ce34",
      "range": {
        "startLine": 239,
        "startChar": 2,
        "endLine": 245,
        "endChar": 5
      },
      "revId": "2f7adb4f785d6e95aafdd8d6bf338cbeede7240d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}