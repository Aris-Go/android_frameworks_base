{
  "comments": [
    {
      "key": {
        "uuid": "0c8347ed_b25a61da",
        "filename": "core/java/android/net/DnsPacket.java",
        "patchSetId": 13
      },
      "lineNbr": 91,
      "author": {
        "id": 1015428
      },
      "writtenOn": "2019-01-21T05:58:00Z",
      "side": 1,
      "message": "Write-only member. You can remove.",
      "range": {
        "startLine": 91,
        "startChar": 20,
        "endLine": 91,
        "endChar": 37
      },
      "revId": "a90feb978ffb35289176812f84999a3333afd107",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fd997e78_0533b487",
        "filename": "core/java/android/net/DnsPacket.java",
        "patchSetId": 13
      },
      "lineNbr": 91,
      "author": {
        "id": 1337176
      },
      "writtenOn": "2019-01-21T11:21:18Z",
      "side": 1,
      "message": "We might need this information to convert DnsSection back to byte array format.\nAnyway, it might be the further CL.\nI will remove it first.",
      "parentUuid": "0c8347ed_b25a61da",
      "range": {
        "startLine": 91,
        "startChar": 20,
        "endLine": 91,
        "endChar": 37
      },
      "revId": "a90feb978ffb35289176812f84999a3333afd107",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f32c2561_9d43eb0f",
        "filename": "core/java/android/net/DnsPacket.java",
        "patchSetId": 13
      },
      "lineNbr": 91,
      "author": {
        "id": 1015428
      },
      "writtenOn": "2019-01-21T13:18:37Z",
      "side": 1,
      "message": "Thanks. I don\u0027t see what use you have in mind for it. Let\u0027s add it back if it\u0027s needed when it is.",
      "parentUuid": "fd997e78_0533b487",
      "range": {
        "startLine": 91,
        "startChar": 20,
        "endLine": 91,
        "endChar": 37
      },
      "revId": "a90feb978ffb35289176812f84999a3333afd107",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0ce8abc9_e20579cb",
        "filename": "core/java/android/net/DnsPacket.java",
        "patchSetId": 13
      },
      "lineNbr": 206,
      "author": {
        "id": 1015428
      },
      "writtenOn": "2019-01-21T05:58:00Z",
      "side": 1,
      "message": "The member makes this extremely difficult to follow (generally speaking members in recursive code are a nightmare to track). Why not simply encapsulate the position in this function ?\n\nreadCompressedName(offset) {\n  oldPosition \u003d buf.position();\n  buf.position(offset);\n  len \u003d ...\n  name \u003d readString\n  buf.position(oldPosition);\n  return name;\n}\n\n...and remove the member.",
      "range": {
        "startLine": 206,
        "startChar": 12,
        "endLine": 206,
        "endChar": 51
      },
      "revId": "a90feb978ffb35289176812f84999a3333afd107",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "69201d77_ddce79a6",
        "filename": "core/java/android/net/DnsPacket.java",
        "patchSetId": 13
      },
      "lineNbr": 206,
      "author": {
        "id": 1337176
      },
      "writtenOn": "2019-01-21T11:21:18Z",
      "side": 1,
      "message": "The pointer might point to a position which followed by labels(\u003e\u003d0) and pointer( 0 or 1).\nWe couldn\u0027t use readCompressedName which only read label once.\nWithout the member mCompressedPos, we might need to use much recursive logic to implement it.\nBesides, we might need this information(mCompressedPos) to convert DnsSection to wire format back.\nI wonder if we have other simple way, any idea?",
      "parentUuid": "0ce8abc9_e20579cb",
      "range": {
        "startLine": 206,
        "startChar": 12,
        "endLine": 206,
        "endChar": 51
      },
      "revId": "a90feb978ffb35289176812f84999a3333afd107",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ee7da938_3b5199a9",
        "filename": "core/java/android/net/DnsPacket.java",
        "patchSetId": 13
      },
      "lineNbr": 206,
      "author": {
        "id": 1015428
      },
      "writtenOn": "2019-01-21T13:18:37Z",
      "side": 1,
      "message": "Generally speaking recursion with locals is much easier to understand than storing in a member stuff that is used across functions inside a conceptual loop. I\u0027m not sure what kind of complicated recursive logic you have in mind but I have trouble imagining a recursion in this case that\u0027s harder to understand than this member.\n\nAnyway, what about simply calling parseName instead of readString in my example ? I did miss that the pointer means we should read the entire sequence, but we already have parseName doing this, and recursive calling is good exactly at this.\nFor what it\u0027s worth, it actually makes things simpler. Because we actually don\u0027t have to try and get individual labels, we can inline back readString and readCompressedName.\n\nHere is what I\u0027m imagining from your work :\n\n  private String parseName(@NonNull ByteBuffer buf) throws\n          BufferUnderflowException, ParseException {\n    final StringJoiner sj \u003d new StringJoiner(\".\");\n    String nameSection \u003d readNameSection(buf);\n    int labelCount \u003d 0;\n    while (null !\u003d nameSection) {\n      if (++labelCount \u003e MAXLABELCOUNT) {\n        throw new ParseException(\"Parse name fail, too many labels\");\n      }\n      sj.add(nameSection);\n      nameSection \u003d readNameSection(buf);\n    }\n    return sj.toString();\n  }\n\n  private String readNameSection(@NonNull ByteBuffer buf) throws\n          BufferUnderflowException, ParseException {\n    final int len \u003d BitUtils.uint8(buf.get());\n    if (len \u003d\u003d 0) return null;\n    final int mask \u003d len \u0026 NAME_COMPRESSION;\n    if (mask !\u003d NAME_NORMAL \u0026\u0026 mask !\u003d NAME_COMPRESSION) {\n      throw new ParseException(\"Parse name fail, bad label type\");\n    }\n    if (mask \u003d\u003d NAME_NORMAL) {\n      if (len \u003e MAXLABELSIZE) {\n        throw new ParseException(\"Parse normal name fail, invalid label length\");\n      }\n      final byte[] label \u003d new byte[len];\n      buf.get(label);\n      return labelToString(label); // maybe even optimize the array out here by reworking labelToString\n    } else {\n      // Name compression based on RFC 1035 - 4.1.4 Message compression\n      final int offset \u003d ((len \u0026 ~NAME_COMPRESSION) \u003c\u003c 8) + BitUtils.uint8(buf.get());\n      final int oldPos \u003d buf.position();\n      if (offset \u003e\u003d (oldPos - 2)) {\n        throw new ParseException(\"Parse compression name fail, invalid compression\");\n      }\n      buf.position(offset);\n      final int len \u003d BitUtils.uint8(buf.get());\n      if (NAME_NORMAL !\u003d (len \u0026 NAME_COMPRESSION)) {\n        throw new ParseException(\"Parse compression name fail, invalid offset\");\n      }\n      final String name \u003d parseName(buf);\n      buf.position(oldPosition);\n      return name;\n    }\n  }\n\nI think this is simpler and easier to understand than anything storing the position in a member.\n\nYour worries about an infinite loop are well founded. It seems to me like the test for the offset being strictly inferior to the start of the pointer is protection enough against it, but I\u0027ll think a bit more about this tomorrow.",
      "parentUuid": "69201d77_ddce79a6",
      "range": {
        "startLine": 206,
        "startChar": 12,
        "endLine": 206,
        "endChar": 51
      },
      "revId": "a90feb978ffb35289176812f84999a3333afd107",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9161658e_eea6148f",
        "filename": "core/java/android/net/DnsPacket.java",
        "patchSetId": 13
      },
      "lineNbr": 206,
      "author": {
        "id": 1337176
      },
      "writtenOn": "2019-01-22T10:36:10Z",
      "side": 1,
      "message": "Thanks for writing the parsing function in recursive way.\nIt is really helpful.\nThe parsing function become simpler.\nI just add some checking condition based on rfc1035",
      "parentUuid": "ee7da938_3b5199a9",
      "range": {
        "startLine": 206,
        "startChar": 12,
        "endLine": 206,
        "endChar": 51
      },
      "revId": "a90feb978ffb35289176812f84999a3333afd107",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4be0ee87_c42c43cf",
        "filename": "core/java/android/net/DnsResolver.java",
        "patchSetId": 13
      },
      "lineNbr": 231,
      "author": {
        "id": 1015428
      },
      "writtenOn": "2019-01-21T05:58:00Z",
      "side": 1,
      "message": "Can you factorize these two methods ?",
      "range": {
        "startLine": 188,
        "startChar": 0,
        "endLine": 231,
        "endChar": 5
      },
      "revId": "a90feb978ffb35289176812f84999a3333afd107",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ee8fc287_bc11f32d",
        "filename": "core/java/android/net/DnsResolver.java",
        "patchSetId": 13
      },
      "lineNbr": 231,
      "author": {
        "id": 1337176
      },
      "writtenOn": "2019-01-21T11:21:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4be0ee87_c42c43cf",
      "range": {
        "startLine": 188,
        "startChar": 0,
        "endLine": 231,
        "endChar": 5
      },
      "revId": "a90feb978ffb35289176812f84999a3333afd107",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "906173d3_8d4c6b5f",
        "filename": "core/java/android/net/DnsResolver.java",
        "patchSetId": 13
      },
      "lineNbr": 262,
      "author": {
        "id": 1015428
      },
      "writtenOn": "2019-01-21T05:58:00Z",
      "side": 1,
      "message": "I might be lacking knowledge of the protocol, but if this is the same type as the query but neither A or AAAA, will your code be able to parse it ? Or should we simply remove this third clause ?",
      "range": {
        "startLine": 262,
        "startChar": 63,
        "endLine": 262,
        "endChar": 83
      },
      "revId": "a90feb978ffb35289176812f84999a3333afd107",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "54f772f7_b339a8d5",
        "filename": "core/java/android/net/DnsResolver.java",
        "patchSetId": 13
      },
      "lineNbr": 262,
      "author": {
        "id": 1337176
      },
      "writtenOn": "2019-01-21T11:21:18Z",
      "side": 1,
      "message": "If we query something in AAAA(mQueryType \u003d AAAA), but response is in A (nsType \u003d A)\nWe might not parse this answer.",
      "parentUuid": "906173d3_8d4c6b5f",
      "range": {
        "startLine": 262,
        "startChar": 63,
        "endLine": 262,
        "endChar": 83
      },
      "revId": "a90feb978ffb35289176812f84999a3333afd107",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "29e9bbbf_fed6d386",
        "filename": "core/java/android/net/DnsResolver.java",
        "patchSetId": 13
      },
      "lineNbr": 262,
      "author": {
        "id": 1015428
      },
      "writtenOn": "2019-01-21T13:57:20Z",
      "side": 1,
      "message": "I see. Then don\u0027t you mean\n\n  if ((nsType !\u003d TYPE_A \u0026\u0026 nsType !\u003d TYPE_AAAA) || nsType !\u003d mQueryType) {\n    continue;\n  }\n\n?",
      "parentUuid": "54f772f7_b339a8d5",
      "range": {
        "startLine": 262,
        "startChar": 63,
        "endLine": 262,
        "endChar": 83
      },
      "revId": "a90feb978ffb35289176812f84999a3333afd107",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "665530a4_311ce8b0",
        "filename": "core/java/android/net/DnsResolver.java",
        "patchSetId": 13
      },
      "lineNbr": 262,
      "author": {
        "id": 1337176
      },
      "writtenOn": "2019-01-22T10:36:10Z",
      "side": 1,
      "message": "Thanks. I should be more careful to avoid this kind of mistake.",
      "parentUuid": "29e9bbbf_fed6d386",
      "range": {
        "startLine": 262,
        "startChar": 63,
        "endLine": 262,
        "endChar": 83
      },
      "revId": "a90feb978ffb35289176812f84999a3333afd107",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}