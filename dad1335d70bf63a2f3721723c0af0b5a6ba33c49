{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "7a09d870_74d6b065",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1332604
      },
      "writtenOn": "2022-11-21T14:02:14Z",
      "side": 1,
      "message": "Thanks Shen!\n\nWe will consider this approach and provide feedback later.",
      "revId": "dad1335d70bf63a2f3721723c0af0b5a6ba33c49",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5eefa4ce_e3758d48",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1332604
      },
      "writtenOn": "2022-11-24T17:59:12Z",
      "side": 1,
      "message": "As per studying the difference between onLowMemory() and onTrimMemory(), I also agree to use onTrimMemory() instead. In my understanding, the trigger situation of onLowMemory() is similar to the TRIM_MEMORY_COMPLETE. \n\nHere\u0027s my follow-up questions:\n\n1. Why do we choose `TRIM_MEMORY_BACKGROUND` rather than `TRIM_MEMORY_MODERATE` to trim the size to 0?\n\n2. In the monkey test mentioned on the bug, I am curious about whether this patch can totally resolve the IllegalStateException? \n\nIf I understand correctly, the IllegalStateException is related to the `cache size` and `LinkedHashMap size`. The `evictAll()` method seems invoked when the map is empty but the size is not 0 to lead to this exception.\n\nHow about checking the size of `snapshot()` in release() before invoking evictAll() as a quick workaround?\n\n3. Would you mind helping to reproduce and provide the debug logs about the `size` and `map.isEmpty()`?  It would be helpful for us to come up with the solution.\n```\nif (size \u003c 0 || (map.isEmpty() \u0026\u0026 size !\u003d 0)) {\n                    throw new IllegalStateException(getClass().getName()\n                            + \".sizeOf() is reporting inconsistent results!\");\n                }\n```\n\nBig thanks for identifying this potential issue and let us know there is another good way to handle onLowMemory(). :)",
      "parentUuid": "7a09d870_74d6b065",
      "revId": "dad1335d70bf63a2f3721723c0af0b5a6ba33c49",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5f6ddf76_d030660d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1275415
      },
      "writtenOn": "2022-11-25T06:09:26Z",
      "side": 1,
      "message": "Hi Yanting:\n\nThanks for your conscientious follow-up, I\u0027ll try my best to answer these questions.\n\n1. I choose the level for the reason that `TRIM_MEMORY_MODERATE` always means that the process is going to be killed, and I\u0027m afraid that will be too late for us to trim the memory. Also as you may have read in the [comment](https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/content/ComponentCallbacks2.java;l\u003d120?q\u003dTRIM_MEMORY_BACKGROUND) of `TRIM_MEMORY_BACKGROUND`, it is suggest to do resource clean-up in this level. Actually this mechanism has been introduced to [Glide](https://cs.android.com/android/platform/superproject/+/master:external/glide/library/src/main/java/com/bumptech/glide/load/engine/cache/LruResourceCache.java;l\u003d44?q\u003dLruResourceCache) and working perfectly for year in innumerable apps, so I think there should not be any problems.\n\n2. We are still watching our test feedback for this bug, sorry for no more logs. We can now only suspect that the problem is caused by calling `evictAll` too frequently, so we introduced this method trying to do the clean-up in another better and reasonable way. I used to consider adding a `size \u003e 0` check before calling `evictAll()` which is similar to what you have mentioned, but found not many similar ways of calling after searching the entire code base, I believe `LruCache` is intended to be designed like this. \n\nIf I have to fix this problem in a quicker way, I\u0027d like to amend `release()` by calling `mDrawableCache.trimToSize(0)` rather than calling `mDrawableCache.evictAll()` to avoid encountering \"LruCache traps\". Glide did it simply like [this](https://cs.android.com/android/platform/superproject/+/master:external/glide/library/src/main/java/com/bumptech/glide/util/LruCache.java;l\u003d145?q\u003dcom.bumptech.glide.util.lru), I have no idea why Android provided `envictAll()` with such implementation. Anyway, it\u0027s another thing, maybe we should create another CL to fix like this while itroducing `trimMemory()` is also needed.\n\n3. I\u0027m glad to provide you with more information as soon as we get it. Currently we may not have that much test resources, please use ayeaye and Presubmit-verify by any chance to do Google\u0027s test.",
      "parentUuid": "5eefa4ce_e3758d48",
      "revId": "dad1335d70bf63a2f3721723c0af0b5a6ba33c49",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "446cd8c2_9c58578b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1332604
      },
      "writtenOn": "2022-11-29T03:05:28Z",
      "side": 1,
      "message": "Got it! Thanks for your detailed information!\n\nThe current solution looks good to me, but I am looking forward to have some strong evidences to make sure it can be fix appropriately.\n\nConsidering this problem is more related to the monkey test, and we havenâ€™t got some real user cases about it. Would you mind holding this change for a while until there is a positive result from the test feedback of your side?\n\nFeel free to let me know if you have different ideas, thanks a lot!",
      "parentUuid": "5f6ddf76_d030660d",
      "revId": "dad1335d70bf63a2f3721723c0af0b5a6ba33c49",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d1e62e10_d65b6455",
        "filename": "packages/SettingsLib/src/com/android/settingslib/applications/AppIconCacheManager.java",
        "patchSetId": 6
      },
      "lineNbr": 121,
      "author": {
        "id": 1332604
      },
      "writtenOn": "2022-11-24T17:59:12Z",
      "side": 1,
      "message": "In my experience, we do not encourage adding test purpose code in the main logic, is it possible to test the trimMemory without this function?",
      "range": {
        "startLine": 115,
        "startChar": 0,
        "endLine": 121,
        "endChar": 5
      },
      "revId": "dad1335d70bf63a2f3721723c0af0b5a6ba33c49",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "138937f0_0e7378f8",
        "filename": "packages/SettingsLib/src/com/android/settingslib/applications/AppIconCacheManager.java",
        "patchSetId": 6
      },
      "lineNbr": 121,
      "author": {
        "id": 1275415
      },
      "writtenOn": "2022-11-25T06:09:26Z",
      "side": 1,
      "message": "The reason for the change is that the icon size in the test case (`10 * 10 * 4 / 1024`) is far from `AppIconCacheManager`\u0027s definiation (`Math.round(CACHE_RATIO * Runtime.getRuntime().maxMemory() / 1024)`). This kind of difference would make the test meaningless, as the threshold would be far from being reached.\n\nHowever, I do agree with the principle you mentioned. I\u0027ve uploaded another workaround to do the trimMemory test without breaking the original ones, please take a look.",
      "parentUuid": "d1e62e10_d65b6455",
      "range": {
        "startLine": 115,
        "startChar": 0,
        "endLine": 121,
        "endChar": 5
      },
      "revId": "dad1335d70bf63a2f3721723c0af0b5a6ba33c49",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "79c33d18_6e42258e",
        "filename": "packages/SettingsLib/src/com/android/settingslib/applications/AppIconCacheManager.java",
        "patchSetId": 6
      },
      "lineNbr": 136,
      "author": {
        "id": 1332604
      },
      "writtenOn": "2022-11-24T17:59:12Z",
      "side": 1,
      "message": "Please follow the capital letter, T.",
      "range": {
        "startLine": 136,
        "startChar": 15,
        "endLine": 136,
        "endChar": 16
      },
      "revId": "dad1335d70bf63a2f3721723c0af0b5a6ba33c49",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4862e370_ca6e284f",
        "filename": "packages/SettingsLib/src/com/android/settingslib/applications/AppIconCacheManager.java",
        "patchSetId": 6
      },
      "lineNbr": 136,
      "author": {
        "id": 1275415
      },
      "writtenOn": "2022-11-25T06:09:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "79c33d18_6e42258e",
      "range": {
        "startLine": 136,
        "startChar": 15,
        "endLine": 136,
        "endChar": 16
      },
      "revId": "dad1335d70bf63a2f3721723c0af0b5a6ba33c49",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}