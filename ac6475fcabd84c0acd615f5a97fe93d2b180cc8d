{
  "comments": [
    {
      "key": {
        "uuid": "AAAHZn///5k\u003d",
        "filename": "core/java/android/os/SELinux.java",
        "patchSetId": 3
      },
      "lineNbr": 111,
      "author": {
        "id": 1003966
      },
      "writtenOn": "2012-07-18T20:52:41Z",
      "side": 1,
      "message": "\"final\" isn\u0027t needed on static methods. They can\u0027t be overridden.\n\nWould it make more sense to have a restorecon method which took a File object.\n\nYou could always do something like:\n\nprivate static native boolean restorecon_native(String pathname)\u0027\npublic static boolean restorecon(File pathname) {\n  return restorecon_native(pathname.getCanonicalPath());\n}\n\nto keep the JNI code the same.",
      "revId": "ac6475fcabd84c0acd615f5a97fe93d2b180cc8d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAHZn///5g\u003d",
        "filename": "core/jni/android_os_SELinux.cpp",
        "patchSetId": 3
      },
      "lineNbr": 482,
      "author": {
        "id": 1003966
      },
      "writtenOn": "2012-07-18T20:52:41Z",
      "side": 1,
      "message": "Simplify to \"return (ret \u003d\u003d 0);\"",
      "revId": "ac6475fcabd84c0acd615f5a97fe93d2b180cc8d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAHZn///5o\u003d",
        "filename": "core/jni/android_os_SELinux.cpp",
        "patchSetId": 3
      },
      "lineNbr": 484,
      "author": {
        "id": 1003966
      },
      "writtenOn": "2012-07-18T20:52:41Z",
      "side": 1,
      "message": "Returning true if HAVE_SELINUX is false seems wrong here.  Perhaps it would be better to have restorecon throw an IOException if HAVE_SELINUX isn\u0027t defined.  Thoughts?",
      "revId": "ac6475fcabd84c0acd615f5a97fe93d2b180cc8d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAHe3///6w\u003d",
        "filename": "core/jni/android_os_SELinux.cpp",
        "patchSetId": 3
      },
      "lineNbr": 484,
      "author": {
        "id": 1013034
      },
      "writtenOn": "2012-07-18T22:08:17Z",
      "side": 1,
      "message": "Throwing an exception means that Java code that calls restorecon has to catch it, only to ignore it and continue anyway.  This gives the Java code the opportunity to react to the fact that SELinux support has not been compiled in.  I can\u0027t, however, imagine any useful way for it to react besides continuing as if everything has succeeded, which the current code already accomplishes.\n\nOther thoughts?",
      "parentUuid": "AAAHZn///5o\u003d",
      "revId": "ac6475fcabd84c0acd615f5a97fe93d2b180cc8d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAHfX////A\u003d",
        "filename": "core/jni/android_os_SELinux.cpp",
        "patchSetId": 3
      },
      "lineNbr": 484,
      "author": {
        "id": 1013887
      },
      "writtenOn": "2012-07-18T22:11:01Z",
      "side": 1,
      "message": "Completely agree with Matthew. The purpose of the \u0027return true\u0027 is to create a no-op scenario when HAVE_SELINUX :\u003d false",
      "parentUuid": "AAAHe3///6w\u003d",
      "revId": "ac6475fcabd84c0acd615f5a97fe93d2b180cc8d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAHfn////s\u003d",
        "filename": "core/jni/android_os_SELinux.cpp",
        "patchSetId": 3
      },
      "lineNbr": 484,
      "author": {
        "id": 1013433
      },
      "writtenOn": "2012-07-18T22:26:17Z",
      "side": 1,
      "message": "In my mind it does succeed, its setting the context to NULL. Plus it follows convention established through these bindings. I also agree with the above statements too. The biggest benefit is NO-OP and makes the java code much simpler.",
      "parentUuid": "AAAHZn///5o\u003d",
      "revId": "ac6475fcabd84c0acd615f5a97fe93d2b180cc8d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}