{
  "comments": [
    {
      "key": {
        "uuid": "AAAHZn///5k\u003d",
        "filename": "core/java/android/os/SELinux.java",
        "patchSetId": 3
      },
      "lineNbr": 111,
      "author": {
        "id": 1003966
      },
      "writtenOn": "2012-07-18T20:52:41Z",
      "side": 1,
      "message": "\"final\" isn\u0027t needed on static methods. They can\u0027t be overridden.\n\nWould it make more sense to have a restorecon method which took a File object.\n\nYou could always do something like:\n\nprivate static native boolean restorecon_native(String pathname)\u0027\npublic static boolean restorecon(File pathname) {\n  return restorecon_native(pathname.getCanonicalPath());\n}\n\nto keep the JNI code the same.",
      "revId": "ac6475fcabd84c0acd615f5a97fe93d2b180cc8d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAHe3///2w\u003d",
        "filename": "core/jni/android_os_SELinux.cpp",
        "patchSetId": 3
      },
      "lineNbr": 465,
      "author": {
        "id": 1013034
      },
      "writtenOn": "2012-07-18T23:25:44Z",
      "side": 1,
      "message": "Fix spelling of \"successfully\"",
      "revId": "ac6475fcabd84c0acd615f5a97fe93d2b180cc8d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAHZn///5g\u003d",
        "filename": "core/jni/android_os_SELinux.cpp",
        "patchSetId": 3
      },
      "lineNbr": 482,
      "author": {
        "id": 1003966
      },
      "writtenOn": "2012-07-18T20:52:41Z",
      "side": 1,
      "message": "Simplify to \"return (ret \u003d\u003d 0);\"",
      "revId": "ac6475fcabd84c0acd615f5a97fe93d2b180cc8d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAHZn///5o\u003d",
        "filename": "core/jni/android_os_SELinux.cpp",
        "patchSetId": 3
      },
      "lineNbr": 484,
      "author": {
        "id": 1003966
      },
      "writtenOn": "2012-07-18T20:52:41Z",
      "side": 1,
      "message": "Returning true if HAVE_SELINUX is false seems wrong here.  Perhaps it would be better to have restorecon throw an IOException if HAVE_SELINUX isn\u0027t defined.  Thoughts?",
      "revId": "ac6475fcabd84c0acd615f5a97fe93d2b180cc8d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAHe3///6w\u003d",
        "filename": "core/jni/android_os_SELinux.cpp",
        "patchSetId": 3
      },
      "lineNbr": 484,
      "author": {
        "id": 1013034
      },
      "writtenOn": "2012-07-18T22:08:17Z",
      "side": 1,
      "message": "Throwing an exception means that Java code that calls restorecon has to catch it, only to ignore it and continue anyway.  This gives the Java code the opportunity to react to the fact that SELinux support has not been compiled in.  I can\u0027t, however, imagine any useful way for it to react besides continuing as if everything has succeeded, which the current code already accomplishes.\n\nOther thoughts?",
      "parentUuid": "AAAHZn///5o\u003d",
      "revId": "ac6475fcabd84c0acd615f5a97fe93d2b180cc8d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAHfX////A\u003d",
        "filename": "core/jni/android_os_SELinux.cpp",
        "patchSetId": 3
      },
      "lineNbr": 484,
      "author": {
        "id": 1013887
      },
      "writtenOn": "2012-07-18T22:11:01Z",
      "side": 1,
      "message": "Completely agree with Matthew. The purpose of the \u0027return true\u0027 is to create a no-op scenario when HAVE_SELINUX :\u003d false",
      "parentUuid": "AAAHe3///6w\u003d",
      "revId": "ac6475fcabd84c0acd615f5a97fe93d2b180cc8d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAHfn////s\u003d",
        "filename": "core/jni/android_os_SELinux.cpp",
        "patchSetId": 3
      },
      "lineNbr": 484,
      "author": {
        "id": 1013433
      },
      "writtenOn": "2012-07-18T22:26:17Z",
      "side": 1,
      "message": "In my mind it does succeed, its setting the context to NULL. Plus it follows convention established through these bindings. I also agree with the above statements too. The biggest benefit is NO-OP and makes the java code much simpler.",
      "parentUuid": "AAAHZn///5o\u003d",
      "revId": "ac6475fcabd84c0acd615f5a97fe93d2b180cc8d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAHe3///20\u003d",
        "filename": "core/jni/android_os_SELinux.cpp",
        "patchSetId": 3
      },
      "lineNbr": 484,
      "author": {
        "id": 1013034
      },
      "writtenOn": "2012-07-18T23:25:44Z",
      "side": 1,
      "message": "After discussion with nnk and gcondra, here is a solution the 3 of us are happy with.\n\nThrow an IllegalStateException when restorecon is called with SELinux disabled (either compiled in but disabled or not compiled in at all).  The caller can either (a) check whether SELinux is disabled before calling restorecon, or (b) try calling restorecon and catch the exception.\n\nIn the current implementation, a caller may think SELinux is enabled when it is actually not, see a successful restorecon, and have no idea that the restorecon actually did nothing.  The implementation outlined above addresses this problem because the caller will see the exception.",
      "parentUuid": "AAAHfn////s\u003d",
      "revId": "ac6475fcabd84c0acd615f5a97fe93d2b180cc8d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAHf3///8I\u003d",
        "filename": "core/jni/android_os_SELinux.cpp",
        "patchSetId": 3
      },
      "lineNbr": 484,
      "author": {
        "id": 1010111
      },
      "writtenOn": "2012-07-19T12:58:34Z",
      "side": 1,
      "message": "If we take that approach, then callers must always wrap calls to the SELinux APIs with either a prior check of isSELinuxEnabled() or an exception handler.  And in almost every case, they will simply skip the API call if SELinux is disabled or ignore the exception.  By returning success in the SELinux-disabled case, we avoid this ugliness in every caller, while still allowing callers who care about SELinux-enabled status to explicitly check using isSELinuxEnabled().\nConsider the SELinux.checkSELinuxAccess() calls in ZygoteConnection.java as an example.  At the moment, we can unconditionally call them without needing a prior check of isSELinuxEnabled or an exception handler for the SELinux-disabled case, knowing that they will always return true (i.e. allowed) if SELinux was disabled at build time or runtime.  If we switch to this model, we have to wrap them all, and we\u0027ll just end up doing the same thing at each call site.",
      "parentUuid": "AAAHe3///20\u003d",
      "revId": "ac6475fcabd84c0acd615f5a97fe93d2b180cc8d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAHhX///2g\u003d",
        "filename": "core/jni/android_os_SELinux.cpp",
        "patchSetId": 3
      },
      "lineNbr": 484,
      "author": {
        "id": 1010466
      },
      "writtenOn": "2012-07-19T14:03:27Z",
      "side": 1,
      "message": "I would also argue that if SE Linux is disabled, then the \"default SELinux security context\" is restored by doing nothing, so returning true is logically the correct behavior.",
      "parentUuid": "AAAHf3///8I\u003d",
      "revId": "ac6475fcabd84c0acd615f5a97fe93d2b180cc8d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAHe3///3U\u003d",
        "filename": "services/java/com/android/server/pm/PackageManagerService.java",
        "patchSetId": 3
      },
      "lineNbr": 7408,
      "author": {
        "id": 1013034
      },
      "writtenOn": "2012-07-18T23:25:44Z",
      "side": 1,
      "message": "Indent 4 chars instead of 2.",
      "revId": "ac6475fcabd84c0acd615f5a97fe93d2b180cc8d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}