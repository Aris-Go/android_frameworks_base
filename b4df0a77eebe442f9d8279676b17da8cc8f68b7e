{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "8bffd86c_ddcd6aa1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1725686
      },
      "writtenOn": "2021-11-16T07:16:36Z",
      "side": 1,
      "message": "Robert, do you agree with this approach?",
      "revId": "b4df0a77eebe442f9d8279676b17da8cc8f68b7e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a0d2af6_ea154155",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1468761
      },
      "writtenOn": "2021-11-16T09:54:56Z",
      "side": 1,
      "message": "Observations:\n- @ServiceThreadOnly means same thread which systemReady() is called on, right? So no threading concerns with accessing mPowerManager.\n- Order between onAddressAllocated and systemReady is not guaranteed\n- If system is not yet ready, boot will be interpreted as quiescent boot\n\nMy question is, if boot is mistakenly considered quiescent, what are the effects and how do you recover?\nCan we make this more deterministic (guarantee onAddressAllocated happens after systemReady)?",
      "parentUuid": "8bffd86c_ddcd6aa1",
      "revId": "b4df0a77eebe442f9d8279676b17da8cc8f68b7e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "14cefed7_93c95530",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1725686
      },
      "writtenOn": "2021-11-16T18:52:28Z",
      "side": 1,
      "message": "As we discussed, there are actually some threading issues with accessing PowerManager in HdmiControlService before systemReady(). I will file a bug to keep track of those. Let\u0027s find a fix for the present issue, without fixing all the threading issues, as Amlogic is waiting for a solution for this.\n\nVenkat will investigate the order in which onAddressAllocated and onBootPhase(PHASE_SYSTEM_SERVICES_READY) are called. If generally onAddressAllocated() happens after onBootPhase(PHASE_SYSTEM_SERVICES_READY), I don\u0027t have a concern with merging this change.\n\nOne thing this change doesn\u0027t consider, is the case where quiescent mode is exited and we continue as a regular boot, because a power or wake key was pressed. This is really an edge case, and quiescent boots are timed to avoid users wanting to use their devices at that time. It should be fine to not consider this case, but we can still add it as a comment.\n\nOn a final note, it would probably be possible to switch calls around and only turn on system audio mode, or query the network for who\u0027s active source at a later time, avoiding the threading issues and considering the case where we exit quiescent mode. However, we don\u0027t actively maintain the audio system CEC implementation and don\u0027t have a soundbar device to test this on. Therefore, this would be a risky change to make, potentially doing more harm than good.",
      "parentUuid": "5a0d2af6_ea154155",
      "revId": "b4df0a77eebe442f9d8279676b17da8cc8f68b7e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b893e4af_28b52fc3",
        "filename": "services/core/java/com/android/server/hdmi/HdmiControlService.java",
        "patchSetId": 5
      },
      "lineNbr": 639,
      "author": {
        "id": 1725686
      },
      "writtenOn": "2021-11-16T07:16:36Z",
      "side": 1,
      "message": "This can be null as well.\n\nYou can set mDisplayManager similarly to mPowerManager (see onBootPhase) and add a null check here as well.",
      "range": {
        "startLine": 638,
        "startChar": 19,
        "endLine": 639,
        "endChar": 71
      },
      "revId": "b4df0a77eebe442f9d8279676b17da8cc8f68b7e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5eef7abc_6aa36e19",
        "filename": "services/core/java/com/android/server/hdmi/HdmiControlService.java",
        "patchSetId": 5
      },
      "lineNbr": 639,
      "author": {
        "id": 1068291
      },
      "writtenOn": "2021-11-16T09:36:28Z",
      "side": 1,
      "message": "In that case, quiescent boot will always be true, if the boot has not completed by the time the address is allocated. Could we initialise mDisplayManager and mPowerManager in this method in case they are still null (or maybe initialise only mDisplayManager)?",
      "parentUuid": "b893e4af_28b52fc3",
      "range": {
        "startLine": 638,
        "startChar": 19,
        "endLine": 639,
        "endChar": 71
      },
      "revId": "b4df0a77eebe442f9d8279676b17da8cc8f68b7e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "39524cad_761b0df9",
        "filename": "services/core/java/com/android/server/hdmi/HdmiControlService.java",
        "patchSetId": 5
      },
      "lineNbr": 639,
      "author": {
        "id": 1725686
      },
      "writtenOn": "2021-11-16T09:49:32Z",
      "side": 1,
      "message": "mPowerManager and mDisplayManager are set when the system services are ready, which is before the boot is completed.\n\nInitializing mDisplayManager here won\u0027t work before onBootPhase(PHASE_SYSTEM_SERVICES_READY). So better to set it onBootPhase(PHASE_SYSTEM_SERVICES_READY), just like for mPowerManager.",
      "parentUuid": "5eef7abc_6aa36e19",
      "range": {
        "startLine": 638,
        "startChar": 19,
        "endLine": 639,
        "endChar": 71
      },
      "revId": "b4df0a77eebe442f9d8279676b17da8cc8f68b7e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "92479aa3_fb606c14",
        "filename": "services/core/java/com/android/server/hdmi/HdmiControlService.java",
        "patchSetId": 5
      },
      "lineNbr": 639,
      "author": {
        "id": 1068291
      },
      "writtenOn": "2021-11-16T09:51:54Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "39524cad_761b0df9",
      "range": {
        "startLine": 638,
        "startChar": 19,
        "endLine": 639,
        "endChar": 71
      },
      "revId": "b4df0a77eebe442f9d8279676b17da8cc8f68b7e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "93f84dc9_e972b71a",
        "filename": "services/core/java/com/android/server/hdmi/HdmiControlService.java",
        "patchSetId": 5
      },
      "lineNbr": 639,
      "author": {
        "id": 1468761
      },
      "writtenOn": "2021-11-16T09:54:56Z",
      "side": 1,
      "message": "PowerManager and DisplayManager are some of the earliest SystemServices that are started. getSystemService(DisplayManager.class) shouldn\u0027t be null at this point, but it\u0027s still not a great idea to call into system services before system services are ready.\n+1 to initializing mDisplayManager on PHASE_SYSTEM_SERVICES_READY",
      "parentUuid": "5eef7abc_6aa36e19",
      "range": {
        "startLine": 638,
        "startChar": 19,
        "endLine": 639,
        "endChar": 71
      },
      "revId": "b4df0a77eebe442f9d8279676b17da8cc8f68b7e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eff34940_ebd575f9",
        "filename": "services/core/java/com/android/server/hdmi/HdmiControlService.java",
        "patchSetId": 5
      },
      "lineNbr": 639,
      "author": {
        "id": 1068291
      },
      "writtenOn": "2021-11-16T10:33:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "93f84dc9_e972b71a",
      "range": {
        "startLine": 638,
        "startChar": 19,
        "endLine": 639,
        "endChar": 71
      },
      "revId": "b4df0a77eebe442f9d8279676b17da8cc8f68b7e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}