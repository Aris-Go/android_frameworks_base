{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "c22541ec_b6ff2690",
        "filename": "core/java/android/net/NetworkCapabilities.java",
        "patchSetId": 8
      },
      "lineNbr": 422,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2021-01-14T14:28:18Z",
      "side": 1,
      "message": "Does this really need to be set by default? I think the code would be simpler if we did *not* add it by default, and only add it if necessary when a NetworkRequest is built. See comment below about double negatives.",
      "range": {
        "startLine": 422,
        "startChar": 12,
        "endLine": 422,
        "endChar": 52
      },
      "revId": "b7d37c57d759cbd0b72ef9ac82fff86474339237",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "abdfc416_fa61efbf",
        "filename": "core/java/android/net/NetworkCapabilities.java",
        "patchSetId": 8
      },
      "lineNbr": 486,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2021-01-14T14:28:18Z",
      "side": 1,
      "message": "\"Capabilities that are accessible\"\n\nThat said, I wouldn\u0027t use the word \"accessible\" here, because this is not a security property, it only affects what is visible by default in NetworkCallbacks.\n\nFor the same reason, I think \"despite\" is not the right word either. As best I can understand, this should be:\n\n/**\n * Capabilities that are currently incompatible with VCN networks and thus require that the\n * NOT_VCN_MANAGED not be present in NetworkRequests.\n */\nprivate static final long VCN_UNSUPPORTED_CAPABILITIES \u003d \n        ...;\n\nEven if we do that rename, though, I don\u0027t think this is a good approach. Explicitly enumerating the capabilities here is brittle and is likely to break as soon as telephony adds a new network capability, which happens every now and again. I think we\u0027re better off enumerating the capabilities that the VCN *is* capable of, and having the opposite list.\n\nBy doing an intersection between this list and the list of capabilities, I think that basically just boils down to two: INTERNET and DUN.\n\nTherefore, I would suggest: why can\u0027t we live with something much simpler, i.e.:\n\n- If a request doesn\u0027t request INTERNET or DUN: no need to do anything.\n- If a request requests INTERNET or DUN, add the NOT_VCN_MANAGED bit.",
      "range": {
        "startLine": 486,
        "startChar": 7,
        "endLine": 486,
        "endChar": 77
      },
      "revId": "b7d37c57d759cbd0b72ef9ac82fff86474339237",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2a87b4a8_074c8da6",
        "filename": "core/java/android/net/NetworkCapabilities.java",
        "patchSetId": 8
      },
      "lineNbr": 486,
      "author": {
        "id": 1306837
      },
      "writtenOn": "2021-01-15T03:36:06Z",
      "side": 1,
      "message": "I think no matter what solution we choose, if the user explicitly want or doesn\u0027t want the capability, they\u0027ll still need a way to do that. \nAnd for people who is too lazy to add INTERNET or DUN, we still need to add for them. Thus:\n\n1. new NetworkRequest.Builder()\n  .addTransport(CELLULAR).build().\n-\u003e should have NOT_VCN_MANAGED\n\n2. new NetworkRequest.Builder()\n  .addTransport(CELLULAR).removeCapability(NOT_VCN_MANAGED).build(). \n-\u003e shouldn\u0027t have NOT_VCN_MANAGED\n\n3. new NetworkRequest.Builder()\n  .addTransport(CELLULAR).addCapability(NOT_ROAMING).build()\n-\u003e should have NOT_VCN_MANAGED\n\n4. new NetworkRequest.Builder()\n  .addCapability(INTERNET).removeCapability(NOT_VCN_MANAGED).build()\n-\u003e shouldn\u0027t have NOT_VCN_MANAGED\n\n5. new NetworkRequest.Builder()\n  .addCapability(MMS).addCapability(NOT_VCN_MANAGED).build()\n-\u003e should have NOT_VCN_MANAGED\n\nFrom the test case above the way you suggest will fail 1 \u0026 4.",
      "parentUuid": "abdfc416_fa61efbf",
      "range": {
        "startLine": 486,
        "startChar": 7,
        "endLine": 486,
        "endChar": 77
      },
      "revId": "b7d37c57d759cbd0b72ef9ac82fff86474339237",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "71ccb5b5_a88d0ff6",
        "filename": "core/java/android/net/NetworkCapabilities.java",
        "patchSetId": 8
      },
      "lineNbr": 486,
      "author": {
        "id": 1306837
      },
      "writtenOn": "2021-01-20T08:35:46Z",
      "side": 1,
      "message": "Per discussion, here is the plan, correct me if anything wrong:\n\n 1. Remove NOT_VCN_MANAGED from DEFAULT_CAPABILITIES, and for every NetworkAgent implementation, add NOT_VCN_MANAGED manually.\n 2. Add a tri-state in NetworkRequest, probably an Enum named mSetNotVcnManaged, with 3 possible values: TRUE, FALSE, AUTO\n 3. if user calls addCapability(NOT_VCN_MANAGED) set to true, FALSE if removeCapability(NOT_VCN_MANAGED)\n 4. pass it to nc.maybeBypassingVcnForNonInternetRequest\n 5. a. if TRUE, add NOT_VCN_MANAGED,\n    b. if AUTO, then\n      if(nc \u0026 NON_REQUETABLE_CAPABILITIES) \u003d\u003d0\n        \u0026\u0026 (nc \u0026 VCN_SUPPORTED_CAPABILITIES) !\u003d0)\n            add NOT_VCN_MANAGED;\n\nThus, the test case 3 in previous comment breaks, but it is what we expected.",
      "parentUuid": "2a87b4a8_074c8da6",
      "range": {
        "startLine": 486,
        "startChar": 7,
        "endLine": 486,
        "endChar": 77
      },
      "revId": "b7d37c57d759cbd0b72ef9ac82fff86474339237",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7e388e68_c47ae2d6",
        "filename": "core/java/android/net/NetworkCapabilities.java",
        "patchSetId": 8
      },
      "lineNbr": 486,
      "author": {
        "id": 1015428
      },
      "writtenOn": "2021-01-20T08:49:39Z",
      "side": 1,
      "message": "Yeah almost.\n1. I think VcnService is supposed to do that and you don\u0027t have to do it. Please check with Ben.\n2. Add this in NetworkRequest.Builder rather than NetworkRequest. Make it an IntDef because the framework team doesn\u0027t want Enum classes in the framework.\n3. Yes\n4. Not sure what you mean by this, is this a new function to deduce the NOT_VCN_MANAGED capability ? If so call it deduceNotVcnManagedCapability. It should be called in build().\n5. a. if TRUE, add\n   b. if AUTO, then\n      if (0 !\u003d (nc.capabilities \u0026 ~(DEFAULT_CAPABILITIES | VCN_SUPPORTED))) add\n\nAutomatic mode means we add it if the NC has any capability besides the default ones, INTERNET and DUN.",
      "parentUuid": "71ccb5b5_a88d0ff6",
      "range": {
        "startLine": 486,
        "startChar": 7,
        "endLine": 486,
        "endChar": 77
      },
      "revId": "b7d37c57d759cbd0b72ef9ac82fff86474339237",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d58d179d_405f504d",
        "filename": "core/java/android/net/NetworkCapabilities.java",
        "patchSetId": 8
      },
      "lineNbr": 486,
      "author": {
        "id": 1015428
      },
      "writtenOn": "2021-01-20T09:56:50Z",
      "side": 1,
      "message": "Okay I meant `0 \u003d\u003d` instead of `0 !\u003d`",
      "parentUuid": "7e388e68_c47ae2d6",
      "range": {
        "startLine": 486,
        "startChar": 7,
        "endLine": 486,
        "endChar": 77
      },
      "revId": "b7d37c57d759cbd0b72ef9ac82fff86474339237",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0c9a4152_b7f74b11",
        "filename": "core/java/android/net/NetworkCapabilities.java",
        "patchSetId": 8
      },
      "lineNbr": 486,
      "author": {
        "id": 1306837
      },
      "writtenOn": "2021-01-20T14:00:37Z",
      "side": 1,
      "message": "Done except 1.\nWe\u0027ll need to wait for Ben\u0027s comment.",
      "parentUuid": "d58d179d_405f504d",
      "range": {
        "startLine": 486,
        "startChar": 7,
        "endLine": 486,
        "endChar": 77
      },
      "revId": "b7d37c57d759cbd0b72ef9ac82fff86474339237",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d335afbc_8681e096",
        "filename": "core/java/android/net/NetworkCapabilities.java",
        "patchSetId": 8
      },
      "lineNbr": 486,
      "author": {
        "id": 1221725
      },
      "writtenOn": "2021-01-21T08:33:09Z",
      "side": 1,
      "message": "1 will be done ONLY for NetworkAgents that produce VCN-managable networks. i.e., Cell\u0027s DataConnection and Wifi\u0027s ClientModeImpl. I suspect we\u0027ll need a generic way to ensure Bluetooth tethering, WifiAware, USB tethering, etc all get this new capability.\n\nPotentially we could in the NetworkAgent update the capabilities upon instantiation/registration, such that if AUTO, upgrade to TRUE, and the VCN will make sure to set it to FALSE. (or was the thought that this was only for the NetworkRequest flow?)",
      "parentUuid": "0c9a4152_b7f74b11",
      "range": {
        "startLine": 486,
        "startChar": 7,
        "endLine": 486,
        "endChar": 77
      },
      "revId": "b7d37c57d759cbd0b72ef9ac82fff86474339237",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4b68c882_e74906ff",
        "filename": "core/java/android/net/NetworkCapabilities.java",
        "patchSetId": 8
      },
      "lineNbr": 486,
      "author": {
        "id": 1221725
      },
      "writtenOn": "2021-01-21T08:45:19Z",
      "side": 1,
      "message": "Re (1), I think having a more generic solution would be advantageous, so we don\u0027t have to play whack-a-mole with all the various NetworkAgents.\n\nI\u0027d like to have a correct-by-default/functional-by-default implementation for each of the network agents, in an attempt to minimize the things a NetworkProvider that can\u0027t support VCNs to have to twiddle in order to get the networking correct. As such, I\u0027d like for the Providers/Factories to not have to rely on the VcnManagementService to add a bit to make things functional (the entire set of all networks, minus the subset of VCN-managed networks), but rather expect VcnManagementService to remove the bits ONLY if it owns the network (which is a MUCH smaller subset).",
      "parentUuid": "d335afbc_8681e096",
      "range": {
        "startLine": 486,
        "startChar": 7,
        "endLine": 486,
        "endChar": 77
      },
      "revId": "b7d37c57d759cbd0b72ef9ac82fff86474339237",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "27a2cd2d_72432a72",
        "filename": "core/java/android/net/NetworkCapabilities.java",
        "patchSetId": 8
      },
      "lineNbr": 486,
      "author": {
        "id": 1015428
      },
      "writtenOn": "2021-01-28T09:16:01Z",
      "side": 1,
      "message": "There is no such thing as a correct-by-default implementation for network agent in the presence of default capabilities and that\u0027s a big part of the issue with them. If you say that this capability has to be always set by default for agents, than changes in the future when, say, some telephony agent comes in. The answer to that kind of question is always going to be \"yeah but it\u0027s a telephony agent so it MUST know to remove it !\"... and yeah I could make the exact opposite argument and be the exact same amount of right. Also remember that your \"correct\" is somebody else\u0027s \"incorrect\", as has been exemplified literally countless times during the design of the VCN.\n\nIn practice the simple fact is that adding capabilities like NOT_VCN is a mess in particular because the simpler solution is, by far, to go and touch all the network factories. Making a \"default agent\" implementation is deceptively tempting, but it actually complexify things, because every time you add anything you still have to think about each individual agent but you have to reckon with whatever the \"default\" implementation of the agent is doing on top of the default capabilities implementation, so it\u0027s even worse. Not as bad as actually adding one to the default caps, which at this point I think is downright untractable.\n\n\nEdit (this was written some time ago) : changed strategies.",
      "parentUuid": "4b68c882_e74906ff",
      "range": {
        "startLine": 486,
        "startChar": 7,
        "endLine": 486,
        "endChar": 77
      },
      "revId": "b7d37c57d759cbd0b72ef9ac82fff86474339237",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "942beaef_2ea8b8f5",
        "filename": "core/java/android/net/NetworkCapabilities.java",
        "patchSetId": 8
      },
      "lineNbr": 488,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2021-01-14T14:28:18Z",
      "side": 1,
      "message": "not any more",
      "range": {
        "startLine": 488,
        "startChar": 54,
        "endLine": 488,
        "endChar": 84
      },
      "revId": "b7d37c57d759cbd0b72ef9ac82fff86474339237",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "87a4b151_92ee0f1b",
        "filename": "core/java/android/net/NetworkCapabilities.java",
        "patchSetId": 8
      },
      "lineNbr": 773,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2021-01-14T14:28:18Z",
      "side": 1,
      "message": "Nit: would shorten to \"maybeRemoveNotVcnManaged\", since it\u0027s shorter and simpler but still accurately describes what this method is supposed to do. Also, given the double negative (\"remove\" + \"not\"), I think it would be simpler if we removed NOT_VCN_MANAGED by default and only added NOT_VCN_MANAGED, if necessary, in NetworkRequest.Builder#build. See comments above.",
      "range": {
        "startLine": 773,
        "startChar": 16,
        "endLine": 773,
        "endChar": 54
      },
      "revId": "b7d37c57d759cbd0b72ef9ac82fff86474339237",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}