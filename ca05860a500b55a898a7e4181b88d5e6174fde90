{
  "comments": [
    {
      "key": {
        "uuid": "fe16a183_bb208f0b",
        "filename": "core/java/android/net/ConnectivityManager.java",
        "patchSetId": 6
      },
      "lineNbr": 481,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2020-04-29T03:09:33Z",
      "side": 1,
      "message": "I believe this is not sufficient, there needs to be a TetheringManager.TETHERING_WIGIG constant as well. That is not possible for R initial launch because of API freeze. It will have to wait for a subsequent mainline update.",
      "range": {
        "startLine": 481,
        "startChar": 28,
        "endLine": 481,
        "endChar": 43
      },
      "revId": "ca05860a500b55a898a7e4181b88d5e6174fde90",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7472f66f_894caba4",
        "filename": "core/java/android/net/ConnectivityManager.java",
        "patchSetId": 6
      },
      "lineNbr": 481,
      "author": {
        "id": 1601766
      },
      "writtenOn": "2020-04-30T21:32:56Z",
      "side": 1,
      "message": "the addition of TetheringManager.TETHERING_WIGIG was accidentally removed from the latest patch, we added it few patches before, I will add it back.\nBasically we don\u0027t need to use the TETHERING_WIGIG type outside the tethering module so we can make it @hide (is this possible any more?) or even make it a non-public field.",
      "parentUuid": "fe16a183_bb208f0b",
      "range": {
        "startLine": 481,
        "startChar": 28,
        "endLine": 481,
        "endChar": 43
      },
      "revId": "ca05860a500b55a898a7e4181b88d5e6174fde90",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "345b8ddc_c3c5278a",
        "filename": "packages/Tethering/res/values/config.xml",
        "patchSetId": 6
      },
      "lineNbr": 175,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2020-04-29T03:09:33Z",
      "side": 1,
      "message": "Why are both of these necessary? What is FST and how is it different from wigig? Also see comments in Tethering.java.",
      "range": {
        "startLine": 169,
        "startChar": 0,
        "endLine": 175,
        "endChar": 71
      },
      "revId": "ca05860a500b55a898a7e4181b88d5e6174fde90",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0aba64d3_9429a679",
        "filename": "packages/Tethering/res/values/config.xml",
        "patchSetId": 6
      },
      "lineNbr": 175,
      "author": {
        "id": 1601766
      },
      "writtenOn": "2020-04-30T21:32:56Z",
      "side": 1,
      "message": "FST (fast session transfer) is a feature allowing to connect a WIFI and wigig SoftAP so users will connect to WIFI SoftAP, but switch to wigig when available to get a faster connection.\nAfter internal discussion it looks like the FST part of this patch is not critical, so I will remove it.",
      "parentUuid": "345b8ddc_c3c5278a",
      "range": {
        "startLine": 169,
        "startChar": 0,
        "endLine": 175,
        "endChar": 71
      },
      "revId": "ca05860a500b55a898a7e4181b88d5e6174fde90",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e4d0cf27_e1eccbac",
        "filename": "packages/Tethering/src/android/net/ip/IpServer.java",
        "patchSetId": 6
      },
      "lineNbr": 618,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2020-04-29T03:09:33Z",
      "side": 1,
      "message": "Can you address this TODO in this CL? Should be pretty simple. Just change \"String getRandomWifiIPv4Address()\" to \"String getRandomIPv4Address(String baseAddress)\". Then you can do:\n\n            } else if (mInterfaceType \u003d\u003d TetheringManager.TETHERING_WIFI) {\n                srvAddr \u003d (Inet4Address) parseNumericAddress(getRandomIPv4Address(WIFI_HOST_IFACE_ADDR));\n                prefixLen \u003d WIFI_HOST_IFACE_PREFIX_LENGTH;\n            } else if (mInterfaceType \u003d\u003d TetheringManager.TETHERING_ETHERNET) {\n                srvAddr \u003d (Inet4Address) parseNumericAddress(getRandomIPv4Address(ETHERNET_IFACE_ADDR));\n                prefixLen \u003d ETHERNET_IFACE_PREFIX_LENGTH;\n            } else if (mInterfaceType \u003d\u003d TetheringManager.TETHERING_WIGIG) {\n                srvAddr \u003d (Inet4Address) parseNumericAddress(getRandomIPv4Address(WIGIG_IFACE_ADDR));\n                prefixLen \u003d WIGIG_IFACE_PREFIX_LENGTH;\n            }",
      "range": {
        "startLine": 617,
        "startChar": 0,
        "endLine": 618,
        "endChar": 79
      },
      "revId": "ca05860a500b55a898a7e4181b88d5e6174fde90",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cb0a17c4_3ad5981c",
        "filename": "packages/Tethering/src/android/net/ip/IpServer.java",
        "patchSetId": 6
      },
      "lineNbr": 618,
      "author": {
        "id": 1601766
      },
      "writtenOn": "2020-04-30T21:32:56Z",
      "side": 1,
      "message": "Sounds good. I will update the patch to resolve the TODO.",
      "parentUuid": "e4d0cf27_e1eccbac",
      "range": {
        "startLine": 617,
        "startChar": 0,
        "endLine": 618,
        "endChar": 79
      },
      "revId": "ca05860a500b55a898a7e4181b88d5e6174fde90",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "214c63c6_095304dd",
        "filename": "packages/Tethering/src/com/android/networkstack/tethering/Tethering.java",
        "patchSetId": 6
      },
      "lineNbr": 457,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2020-04-29T03:09:33Z",
      "side": 1,
      "message": "Mark, isn\u0027t this a legacy codepath that we would prefer not to use any more? Should wigig tethering instead do something similar to wifi tethering, where the broadcast itself provides the interface name on which to start?",
      "range": {
        "startLine": 456,
        "startChar": 0,
        "endLine": 457,
        "endChar": 64
      },
      "revId": "ca05860a500b55a898a7e4181b88d5e6174fde90",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "654d4a86_00ba41c6",
        "filename": "packages/Tethering/src/com/android/networkstack/tethering/Tethering.java",
        "patchSetId": 6
      },
      "lineNbr": 457,
      "author": {
        "id": 1308504
      },
      "writtenOn": "2020-04-29T04:12:29Z",
      "side": 1,
      "message": "Right, I\u0027ll suggest to remove the code here and totally remove the wigig interface define in TetheringConfiguration.java. Then we can have a callback or intent like wifi tethering. Except for the existing tetherings(e.g. wifi, usb, bluetooth) which need to backward compatible with Settings\u0027s usage. The new added tethering should let its downstream framework(wigig) tell tethering which interface is ready for wigig tethering or when interface is down so the IpServer can be totally removed because it is no needed anymore.",
      "parentUuid": "214c63c6_095304dd",
      "range": {
        "startLine": 456,
        "startChar": 0,
        "endLine": 457,
        "endChar": 64
      },
      "revId": "ca05860a500b55a898a7e4181b88d5e6174fde90",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "65f09b6c_08acc0da",
        "filename": "packages/Tethering/src/com/android/networkstack/tethering/Tethering.java",
        "patchSetId": 6
      },
      "lineNbr": 457,
      "author": {
        "id": 1601766
      },
      "writtenOn": "2020-04-30T21:32:56Z",
      "side": 1,
      "message": "the wigig framework is based on an old version of the WIFI framework, and uses the old way of starting tethering - it monitors for ConnectivityManager.ACTION_TETHER_STATE_CHANGED then calls ConnectivityManager.tether. We had an issue with stopping the SoftAP and this fix was added here to address it. \nUsing the WIFI way means the tethering module needs to know some constants from the wigig framework API (like WigigManager.WIGIG_AP_STATE_ENABLED), I think it is better not to expose any API since the wigig framework will hopefully disappear in Android S.",
      "parentUuid": "654d4a86_00ba41c6",
      "range": {
        "startLine": 456,
        "startChar": 0,
        "endLine": 457,
        "endChar": 64
      },
      "revId": "ca05860a500b55a898a7e4181b88d5e6174fde90",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fbdec5c0_c4db36e5",
        "filename": "packages/Tethering/src/com/android/networkstack/tethering/Tethering.java",
        "patchSetId": 6
      },
      "lineNbr": 457,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2020-05-07T06:22:08Z",
      "side": 1,
      "message": "Generally speaking I agree that we shouldn\u0027t be using legacy mechanisms like this. Mark, would moving to the better solution require new APIs?",
      "parentUuid": "65f09b6c_08acc0da",
      "range": {
        "startLine": 456,
        "startChar": 0,
        "endLine": 457,
        "endChar": 64
      },
      "revId": "ca05860a500b55a898a7e4181b88d5e6174fde90",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ecb5ee07_10e37d11",
        "filename": "packages/Tethering/src/com/android/networkstack/tethering/Tethering.java",
        "patchSetId": 6
      },
      "lineNbr": 457,
      "author": {
        "id": 1308504
      },
      "writtenOn": "2020-05-07T07:09:58Z",
      "side": 1,
      "message": "For better solution: at least we need to define intent string and intent extra or have new API from wifi/wigig(?) framework for tethering to register callback.",
      "parentUuid": "fbdec5c0_c4db36e5",
      "range": {
        "startLine": 456,
        "startChar": 0,
        "endLine": 457,
        "endChar": 64
      },
      "revId": "ca05860a500b55a898a7e4181b88d5e6174fde90",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "454c985c_9ae4c7e4",
        "filename": "packages/Tethering/src/com/android/networkstack/tethering/Tethering.java",
        "patchSetId": 6
      },
      "lineNbr": 457,
      "author": {
        "id": 1601766
      },
      "writtenOn": "2020-05-08T08:55:17Z",
      "side": 1,
      "message": "Based on your comments I consider 2 possible solutions:\n1. Regarding using intent string and extra - I think it is better not to define it as API since this change is only needed temporarily for Android R and in Android S we will hopefully have a better solution which will add wigig support in WIFI framework. The wigig framework is a Qualcomm value-add so it is not possible to expose APIs from there to AOSP. Is it possible to define the intent string and extra in this class locally and give them (hard-coded) values matching the current intent sent by wigig framework? If this is possible we can switch wigig framework to use the standard tethering method like wifi framework does.\n2. If we can keep using the legacy method for Android R, we actually don\u0027t need to use the TETHERING_WIGIG type externally, as we only use the interface name (wigig0) from outside in ConnectivityManager.tether and here the separate interface type is only needed to give a separate subnet to wigig SoftAP for coexisting with WIFI SoftAP. Can we define TETHERING_WIGIG locally here or in TetheringConfiguration (can add a comment in TetheringManager or give it higher number to prevent future conflicts, though we can probably remove it in Android S), that way we can remove the definition from TetheringMangaer/ConnectivityManager and the change will be also simplified further.\n\nWill any of these solutions be acceptable?",
      "parentUuid": "ecb5ee07_10e37d11",
      "range": {
        "startLine": 456,
        "startChar": 0,
        "endLine": 457,
        "endChar": 64
      },
      "revId": "ca05860a500b55a898a7e4181b88d5e6174fde90",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "53ae2aa5_fe75eefc",
        "filename": "packages/Tethering/src/com/android/networkstack/tethering/Tethering.java",
        "patchSetId": 6
      },
      "lineNbr": 457,
      "author": {
        "id": 1308504
      },
      "writtenOn": "2020-05-13T01:39:48Z",
      "side": 1,
      "message": "If this is temporary for Android R, maybe option 2 is better.\nFor option 1: If wigig and wifi hotspot can\u0027t enabled at the same time, how about reuse wifi ap state change intent ?\n\nFor option 2: If this is only for R, it is acceptable to use legacy method. We have plan to disable ConnectivityManager#tether(also TetheringManager#tether) in Android S. BTW, we can\u0027t remove definition which is temporary added for WIGIG till Android R is no longer supported. Because tethering module is single branch and updatable by mainline push. When Android S is launch, android R devices still can get new tethering module which is the same as S devices.",
      "parentUuid": "454c985c_9ae4c7e4",
      "range": {
        "startLine": 456,
        "startChar": 0,
        "endLine": 457,
        "endChar": 64
      },
      "revId": "ca05860a500b55a898a7e4181b88d5e6174fde90",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eba4ca84_7e8abdb6",
        "filename": "packages/Tethering/src/com/android/networkstack/tethering/Tethering.java",
        "patchSetId": 6
      },
      "lineNbr": 457,
      "author": {
        "id": 1601766
      },
      "writtenOn": "2020-05-15T16:18:22Z",
      "side": 1,
      "message": "Regarding option 1, wigig framework is independent from wifi framework so wigig and wifi hotspot can be enabled at the same time so we cannot reuse the wifi ap state change.\nI will upload an updated change which implements option#2.",
      "parentUuid": "53ae2aa5_fe75eefc",
      "range": {
        "startLine": 456,
        "startChar": 0,
        "endLine": 457,
        "endChar": 64
      },
      "revId": "ca05860a500b55a898a7e4181b88d5e6174fde90",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "99eb7584_d1f1d36a",
        "filename": "packages/Tethering/src/com/android/networkstack/tethering/TetheringConfiguration.java",
        "patchSetId": 6
      },
      "lineNbr": 120,
      "author": {
        "id": 1308504
      },
      "writtenOn": "2020-04-29T04:12:29Z",
      "side": 1,
      "message": "Could we let wifi or wigig framework tell tethering which interface is used for Wigig every time start wigig tethering instead of predeine wigig interface name in tethering ?",
      "range": {
        "startLine": 120,
        "startChar": 52,
        "endLine": 120,
        "endChar": 79
      },
      "revId": "ca05860a500b55a898a7e4181b88d5e6174fde90",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b3b68495_596619fa",
        "filename": "packages/Tethering/src/com/android/networkstack/tethering/TetheringConfiguration.java",
        "patchSetId": 6
      },
      "lineNbr": 120,
      "author": {
        "id": 1074459
      },
      "writtenOn": "2020-04-29T04:30:06Z",
      "side": 1,
      "message": "Yes, wifi interface names needs to be plumbed in from the wifi stack. Please don\u0027t hardcode these elsewhere outside of the wifi stack. The current tethered ifaces for regular tethering does not harcode the interface name(i.e wlan0 or wlan1) anywhere outside of the wifi HAL.",
      "parentUuid": "99eb7584_d1f1d36a",
      "range": {
        "startLine": 120,
        "startChar": 52,
        "endLine": 120,
        "endChar": 79
      },
      "revId": "ca05860a500b55a898a7e4181b88d5e6174fde90",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8047b213_d18ff107",
        "filename": "packages/Tethering/src/com/android/networkstack/tethering/TetheringConfiguration.java",
        "patchSetId": 6
      },
      "lineNbr": 120,
      "author": {
        "id": 1601766
      },
      "writtenOn": "2020-04-30T21:32:56Z",
      "side": 1,
      "message": "Note, the wifi interfaces are \"partially\" hard-coded here, the config_tether_wifi_regexs contain a pattern (wlan\\\\d) to recognize WIFI interfaces.\nCan we do the same with wigig? that is instead of config_wigig_interface_name we will add config_tether_wigig_regexs with \"wigig\\\\d\" to catch wigig interfaces?\nRegarding the config_tether_fst_regexs I will remove it as we don\u0027t think the FST feature is critical for upsteaming here.",
      "parentUuid": "b3b68495_596619fa",
      "range": {
        "startLine": 120,
        "startChar": 52,
        "endLine": 120,
        "endChar": 79
      },
      "revId": "ca05860a500b55a898a7e4181b88d5e6174fde90",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cbbce190_28c3ec1d",
        "filename": "packages/Tethering/src/com/android/networkstack/tethering/TetheringConfiguration.java",
        "patchSetId": 6
      },
      "lineNbr": 149,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2020-04-29T03:09:33Z",
      "side": 1,
      "message": "I\u0027m not sure we can do this. If we do, then it\u0027s possible to configure the system in such a way that the wifi interface regexp matches an interface that is not used for wifi tethering. Other parts of the system expect that the interfaces will be correct, and those parts of the system will break.\n\nIt seems that we should either make sure that wigig *is* wifi tethering, or *is not* wifi tethering. I don\u0027t think we can support both in the current state of the code.",
      "range": {
        "startLine": 149,
        "startChar": 16,
        "endLine": 149,
        "endChar": 50
      },
      "revId": "ca05860a500b55a898a7e4181b88d5e6174fde90",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a7f7bcd4_4ba55eb8",
        "filename": "packages/Tethering/src/com/android/networkstack/tethering/TetheringConfiguration.java",
        "patchSetId": 6
      },
      "lineNbr": 149,
      "author": {
        "id": 1601766
      },
      "writtenOn": "2020-04-30T21:32:56Z",
      "side": 1,
      "message": "good point, I will check and see if we can identify wigig separately, maybe using separate config_tether_wigig_regexs",
      "parentUuid": "cbbce190_28c3ec1d",
      "range": {
        "startLine": 149,
        "startChar": 16,
        "endLine": 149,
        "endChar": 50
      },
      "revId": "ca05860a500b55a898a7e4181b88d5e6174fde90",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "996f9a07_286fba06",
        "filename": "packages/Tethering/src/com/android/networkstack/tethering/TetheringConfiguration.java",
        "patchSetId": 6
      },
      "lineNbr": 155,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2020-04-29T03:09:33Z",
      "side": 1,
      "message": "Ditto.",
      "range": {
        "startLine": 154,
        "startChar": 0,
        "endLine": 155,
        "endChar": 49
      },
      "revId": "ca05860a500b55a898a7e4181b88d5e6174fde90",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3fdf83bd_1c4a1876",
        "filename": "packages/Tethering/src/com/android/networkstack/tethering/TetheringConfiguration.java",
        "patchSetId": 6
      },
      "lineNbr": 155,
      "author": {
        "id": 1601766
      },
      "writtenOn": "2020-04-30T21:32:56Z",
      "side": 1,
      "message": "see reply above.",
      "parentUuid": "996f9a07_286fba06",
      "range": {
        "startLine": 154,
        "startChar": 0,
        "endLine": 155,
        "endChar": 49
      },
      "revId": "ca05860a500b55a898a7e4181b88d5e6174fde90",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}