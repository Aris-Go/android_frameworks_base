{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "231dcd8a_af3ee833",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1061116
      },
      "writtenOn": "2021-02-04T18:09:57Z",
      "side": 1,
      "message": "I\u0027ve tidied this up now, javadocs, tests and all, so ready for in-depth review.",
      "revId": "30bb354e9c061e9af8fb888609f717ee263af776",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b0bda9c4_3df79a7c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1431994
      },
      "writtenOn": "2021-02-08T16:54:13Z",
      "side": 1,
      "message": "Looks generally fine, left a few comments.\n\nI\u0027m just wondering if there could be a way to extend the existing \u0027deferred\u0027 concept instead of deprecating it. Were there issues with that approach?",
      "revId": "30bb354e9c061e9af8fb888609f717ee263af776",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0709a00b_95bc3f5c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1061116
      },
      "writtenOn": "2021-02-08T17:08:35Z",
      "side": 1,
      "message": "Thanks for quick review!",
      "revId": "30bb354e9c061e9af8fb888609f717ee263af776",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fed452c0_ddebf967",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1061116
      },
      "writtenOn": "2021-02-08T17:08:35Z",
      "side": 1,
      "message": "Hmm, I felt this was a cleaner way, especially for overrides that use multiple version ranges. It\u0027s unclear what would go to deferred in that case. Also feels like less moving back and forth between deferred and evaluated.",
      "parentUuid": "b0bda9c4_3df79a7c",
      "revId": "30bb354e9c061e9af8fb888609f717ee263af776",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2f287cc2_743c3e28",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1431994
      },
      "writtenOn": "2021-02-08T17:19:07Z",
      "side": 1,
      "message": "Fair enough, sounds good.",
      "parentUuid": "fed452c0_ddebf967",
      "revId": "30bb354e9c061e9af8fb888609f717ee263af776",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "173fd643_780fd591",
        "filename": "core/java/android/app/compat/PackageOverride.java",
        "patchSetId": 3
      },
      "lineNbr": 129,
      "author": {
        "id": 1431994
      },
      "writtenOn": "2021-02-08T16:54:13Z",
      "side": 1,
      "message": "Maybe this is showing my ignorance, but it seems like you\u0027d have simpler checks (in `containsVersion` and `isOverlapping`) if you used Long.MIN_VALUE and Long.MAX_VALUE instead of null. I assume there are other good reasons to use null, though?",
      "range": {
        "startLine": 124,
        "startChar": 8,
        "endLine": 129,
        "endChar": 43
      },
      "revId": "30bb354e9c061e9af8fb888609f717ee263af776",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "058e7c08_1d784af9",
        "filename": "core/java/android/app/compat/PackageOverride.java",
        "patchSetId": 3
      },
      "lineNbr": 129,
      "author": {
        "id": 1061116
      },
      "writtenOn": "2021-02-08T17:08:35Z",
      "side": 1,
      "message": "Yeah, I swayed back and forth, will change to MIN, MAX.",
      "parentUuid": "173fd643_780fd591",
      "range": {
        "startLine": 124,
        "startChar": 8,
        "endLine": 129,
        "endChar": 43
      },
      "revId": "30bb354e9c061e9af8fb888609f717ee263af776",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ad57063e_da8cea16",
        "filename": "core/java/android/app/compat/PackageOverride.java",
        "patchSetId": 3
      },
      "lineNbr": 129,
      "author": {
        "id": 1061116
      },
      "writtenOn": "2021-02-09T13:47:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "058e7c08_1d784af9",
      "range": {
        "startLine": 124,
        "startChar": 8,
        "endLine": 129,
        "endChar": 43
      },
      "revId": "30bb354e9c061e9af8fb888609f717ee263af776",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "71fd76ce_b2e2771d",
        "filename": "core/java/android/app/compat/PackageOverride.java",
        "patchSetId": 3
      },
      "lineNbr": 139,
      "author": {
        "id": 1431994
      },
      "writtenOn": "2021-02-08T16:54:13Z",
      "side": 1,
      "message": "Are these checks necessary?\nYou could probably just make them null if equal to the extremes.",
      "range": {
        "startLine": 136,
        "startChar": 12,
        "endLine": 139,
        "endChar": 44
      },
      "revId": "30bb354e9c061e9af8fb888609f717ee263af776",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9b7019b1_c5ea00d1",
        "filename": "core/java/android/app/compat/PackageOverride.java",
        "patchSetId": 3
      },
      "lineNbr": 139,
      "author": {
        "id": 1061116
      },
      "writtenOn": "2021-02-09T13:47:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "71fd76ce_b2e2771d",
      "range": {
        "startLine": 136,
        "startChar": 12,
        "endLine": 139,
        "endChar": 44
      },
      "revId": "30bb354e9c061e9af8fb888609f717ee263af776",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ed9b4d91_abb761a2",
        "filename": "services/core/java/com/android/server/compat/CompatChange.java",
        "patchSetId": 3
      },
      "lineNbr": 365,
      "author": {
        "id": 1431994
      },
      "writtenOn": "2021-02-08T16:54:13Z",
      "side": 1,
      "message": "This seems to enforce my other comment about nullability.\nAlso, this may be a weird point, but versions are always non-negative, so 0L could make sense as a default.",
      "range": {
        "startLine": 363,
        "startChar": 20,
        "endLine": 365,
        "endChar": 89
      },
      "revId": "30bb354e9c061e9af8fb888609f717ee263af776",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "37f60908_239adf63",
        "filename": "services/core/java/com/android/server/compat/CompatChange.java",
        "patchSetId": 3
      },
      "lineNbr": 365,
      "author": {
        "id": 1061116
      },
      "writtenOn": "2021-02-08T17:08:35Z",
      "side": 1,
      "message": "I wasn\u0027t sure if the platform actually enforces non-negative version numbers, so i felt I wanted to play it safe. I\u0027ll switch away from null, it just adds complexity for no gain.",
      "parentUuid": "ed9b4d91_abb761a2",
      "range": {
        "startLine": 363,
        "startChar": 20,
        "endLine": 365,
        "endChar": 89
      },
      "revId": "30bb354e9c061e9af8fb888609f717ee263af776",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6aa0f830_a6b162df",
        "filename": "services/core/java/com/android/server/compat/CompatChange.java",
        "patchSetId": 3
      },
      "lineNbr": 414,
      "author": {
        "id": 1431994
      },
      "writtenOn": "2021-02-08T16:54:13Z",
      "side": 1,
      "message": "These changes need to be reflected in CTS as well http://cs/android/cts/hostsidetests/appcompat/host/lib/src/android/compat/cts/Change.java (for parsing from toString and from XML)",
      "range": {
        "startLine": 410,
        "startChar": 8,
        "endLine": 414,
        "endChar": 63
      },
      "revId": "30bb354e9c061e9af8fb888609f717ee263af776",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8f1e0596_773083bb",
        "filename": "services/core/java/com/android/server/compat/CompatChange.java",
        "patchSetId": 3
      },
      "lineNbr": 414,
      "author": {
        "id": 1061116
      },
      "writtenOn": "2021-02-08T17:08:35Z",
      "side": 1,
      "message": "Thanks, will look into that next. What\u0027s the set of tests you run on CTS?",
      "parentUuid": "6aa0f830_a6b162df",
      "range": {
        "startLine": 410,
        "startChar": 8,
        "endLine": 414,
        "endChar": 63
      },
      "revId": "30bb354e9c061e9af8fb888609f717ee263af776",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4fc51618_c7e65570",
        "filename": "services/core/java/com/android/server/compat/CompatChange.java",
        "patchSetId": 3
      },
      "lineNbr": 414,
      "author": {
        "id": 1431994
      },
      "writtenOn": "2021-02-08T17:19:07Z",
      "side": 1,
      "message": "The affected test is http://cs/android/cts/hostsidetests/appcompat/compatchanges/src/com/android/cts/appcompat/CompatChangesValidConfigTest.java , but I usually run the full\n`atest CtsAppCompatHostTestCases`",
      "parentUuid": "8f1e0596_773083bb",
      "range": {
        "startLine": 410,
        "startChar": 8,
        "endLine": 414,
        "endChar": 63
      },
      "revId": "30bb354e9c061e9af8fb888609f717ee263af776",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "53626973_b46c1573",
        "filename": "services/core/java/com/android/server/compat/CompatChange.java",
        "patchSetId": 3
      },
      "lineNbr": 414,
      "author": {
        "id": 1061116
      },
      "writtenOn": "2021-02-09T13:47:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4fc51618_c7e65570",
      "range": {
        "startLine": 410,
        "startChar": 8,
        "endLine": 414,
        "endChar": 63
      },
      "revId": "30bb354e9c061e9af8fb888609f717ee263af776",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "70d08e88_23971222",
        "filename": "services/tests/servicestests/src/com/android/server/compat/CompatConfigTest.java",
        "patchSetId": 3
      },
      "lineNbr": 434,
      "author": {
        "id": 1431994
      },
      "writtenOn": "2021-02-08T17:19:07Z",
      "side": 1,
      "message": "I assume the package manager would prevent users from directly upgrading from debuggable build to a regular one already, so this check is pretty superfluous. Wanted to be rather safe than sorry.",
      "range": {
        "startLine": 434,
        "startChar": 0,
        "endLine": 434,
        "endChar": 84
      },
      "revId": "30bb354e9c061e9af8fb888609f717ee263af776",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "96c20d43_bff1f336",
        "filename": "services/tests/servicestests/src/com/android/server/compat/CompatConfigTest.java",
        "patchSetId": 3
      },
      "lineNbr": 434,
      "author": {
        "id": 1061116
      },
      "writtenOn": "2021-02-09T13:47:18Z",
      "side": 1,
      "message": "Removed this comment. It was there because in an earlier iteration the test was failing, but all good now.",
      "parentUuid": "70d08e88_23971222",
      "range": {
        "startLine": 434,
        "startChar": 0,
        "endLine": 434,
        "endChar": 84
      },
      "revId": "30bb354e9c061e9af8fb888609f717ee263af776",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}