{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "6a8f104f_03c5b7d7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1308504
      },
      "writtenOn": "2020-10-23T06:51:12Z",
      "side": 1,
      "message": "LGTM if Lorenzo don\u0027t have other objection.",
      "revId": "acb737d43fcfd1d460fdd7d2767658635b380670",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "62c3c884_9238b850",
        "filename": "packages/Tethering/src/com/android/networkstack/tethering/BpfCoordinator.java",
        "patchSetId": 1
      },
      "lineNbr": 221,
      "author": {
        "id": 1308504
      },
      "writtenOn": "2020-10-23T06:51:12Z",
      "side": 1,
      "message": "startPolling is called when main SM enter TetherModeAliveState and stopPolling is called when leaving TetherModeAliveState. Although this may be a little bit late after IpServer(downstream interface setup) be Tethered, but this seems fine because tethering won\u0027t have upstream before enter TetherModeAliveState. Maybe we just need to rename startPolling()/stopPolling() to other proper name.",
      "range": {
        "startLine": 220,
        "startChar": 8,
        "endLine": 221,
        "endChar": 37
      },
      "revId": "acb737d43fcfd1d460fdd7d2767658635b380670",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7de4ad49_6c525dc6",
        "filename": "packages/Tethering/src/com/android/networkstack/tethering/BpfCoordinator.java",
        "patchSetId": 1
      },
      "lineNbr": 221,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2020-10-23T10:14:25Z",
      "side": 1,
      "message": "+1 on changing the name. If this is only used for BPF, maybe rename to startBpf / stopBpf and mBpfStarted?",
      "parentUuid": "62c3c884_9238b850",
      "range": {
        "startLine": 220,
        "startChar": 8,
        "endLine": 221,
        "endChar": 37
      },
      "revId": "acb737d43fcfd1d460fdd7d2767658635b380670",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a98a691a_1c2d1f2b",
        "filename": "packages/Tethering/src/com/android/networkstack/tethering/BpfCoordinator.java",
        "patchSetId": 1
      },
      "lineNbr": 221,
      "author": {
        "id": 1348424
      },
      "writtenOn": "2020-10-26T11:10:37Z",
      "side": 1,
      "message": "Thanks for both of your sharing\n\nOnce we have confirmed where the trigger point to go, I will change the function name. \n\nFor now, I am not sure if stopPolling() is a good place to stop the conntrack monitoring. In my memory (if it is correct), this function will be called earlier than all IPServer stop their state machine. It means the conntrack event monitor may miss the IPCTNL_MSG_CT_DELETE event if any. Unless this condition could be relied on a timeout mechanism from conntrack message attribute CTA_TIMEOUT (?). I have no good answer for now. But it is my concern. So I have not decided the trigger point yet.",
      "parentUuid": "7de4ad49_6c525dc6",
      "range": {
        "startLine": 220,
        "startChar": 8,
        "endLine": 221,
        "endChar": 37
      },
      "revId": "acb737d43fcfd1d460fdd7d2767658635b380670",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}