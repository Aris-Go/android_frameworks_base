{
  "comments": [
    {
      "key": {
        "uuid": "2e06dfff_3d9af7b6",
        "filename": "api/current.txt",
        "patchSetId": 1
      },
      "lineNbr": 27250,
      "author": {
        "id": 1059543
      },
      "writtenOn": "2019-04-09T15:46:34Z",
      "side": 1,
      "message": "Naming nit - exceptions are implicitly an error, so this could just be DnsException not DnsErrorException",
      "range": {
        "startLine": 27250,
        "startChar": 34,
        "endLine": 27250,
        "endChar": 51
      },
      "revId": "f2ce103c6cf154de6de6448a76dc3ba08a578add",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "23ea0f3b_3f35d6d7",
        "filename": "api/current.txt",
        "patchSetId": 1
      },
      "lineNbr": 27250,
      "author": {
        "id": 1337176
      },
      "writtenOn": "2019-04-10T07:51:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2e06dfff_3d9af7b6",
      "range": {
        "startLine": 27250,
        "startChar": 34,
        "endLine": 27250,
        "endChar": 51
      },
      "revId": "f2ce103c6cf154de6de6448a76dc3ba08a578add",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6f64c5ec_43cc28dd",
        "filename": "core/java/android/net/DnsResolver.java",
        "patchSetId": 1
      },
      "lineNbr": 98,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2019-04-10T16:57:10Z",
      "side": 1,
      "message": "Can ERROR_TIMEOUT actually happen? If not, we should hide it.",
      "revId": "f2ce103c6cf154de6de6448a76dc3ba08a578add",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "815c462e_32d6e56b",
        "filename": "core/java/android/net/DnsResolver.java",
        "patchSetId": 1
      },
      "lineNbr": 98,
      "author": {
        "id": 1337176
      },
      "writtenOn": "2019-04-11T03:57:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6f64c5ec_43cc28dd",
      "revId": "f2ce103c6cf154de6de6448a76dc3ba08a578add",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "24248be8_5e7e7935",
        "filename": "core/java/android/net/DnsResolver.java",
        "patchSetId": 1
      },
      "lineNbr": 103,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2019-04-10T16:57:10Z",
      "side": 1,
      "message": "/** Indicates that there was an error parsing the response the query. The cause of this error is available via getCause() and is a ParseException. */",
      "range": {
        "startLine": 103,
        "startChar": 28,
        "endLine": 103,
        "endChar": 39
      },
      "revId": "f2ce103c6cf154de6de6448a76dc3ba08a578add",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7f26b04a_c7694e7d",
        "filename": "core/java/android/net/DnsResolver.java",
        "patchSetId": 1
      },
      "lineNbr": 103,
      "author": {
        "id": 1337176
      },
      "writtenOn": "2019-04-11T03:57:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "24248be8_5e7e7935",
      "range": {
        "startLine": 103,
        "startChar": 28,
        "endLine": 103,
        "endChar": 39
      },
      "revId": "f2ce103c6cf154de6de6448a76dc3ba08a578add",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d7c79531_77ecbcb3",
        "filename": "core/java/android/net/DnsResolver.java",
        "patchSetId": 1
      },
      "lineNbr": 105,
      "author": {
        "id": 1059543
      },
      "writtenOn": "2019-04-09T15:46:34Z",
      "side": 1,
      "message": "What does a TLS failure from dns-over-tls look like? I don\u0027t know of any errno that matches this...",
      "range": {
        "startLine": 105,
        "startChar": 28,
        "endLine": 105,
        "endChar": 40
      },
      "revId": "f2ce103c6cf154de6de6448a76dc3ba08a578add",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b57bcbff_5ae0d110",
        "filename": "core/java/android/net/DnsResolver.java",
        "patchSetId": 1
      },
      "lineNbr": 105,
      "author": {
        "id": 1337176
      },
      "writtenOn": "2019-04-10T07:51:01Z",
      "side": 1,
      "message": "Native resolver has not reported any specific error for dns-over-tls, it is treated as generic DNS query error.",
      "parentUuid": "d7c79531_77ecbcb3",
      "range": {
        "startLine": 105,
        "startChar": 28,
        "endLine": 105,
        "endChar": 40
      },
      "revId": "f2ce103c6cf154de6de6448a76dc3ba08a578add",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "61f4c7f8_f872d0a5",
        "filename": "core/java/android/net/DnsResolver.java",
        "patchSetId": 1
      },
      "lineNbr": 105,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2019-04-10T16:57:10Z",
      "side": 1,
      "message": "Right. That failure code is too deep in the resolver code to surface accurately, at least at the moment.",
      "parentUuid": "b57bcbff_5ae0d110",
      "range": {
        "startLine": 105,
        "startChar": 28,
        "endLine": 105,
        "endChar": 40
      },
      "revId": "f2ce103c6cf154de6de6448a76dc3ba08a578add",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "84dc60c1_340f3f70",
        "filename": "core/java/android/net/DnsResolver.java",
        "patchSetId": 1
      },
      "lineNbr": 105,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2019-04-10T16:57:10Z",
      "side": 1,
      "message": "/** Indicates that there was an error sending the query. The cause of this error is available via getCause() and is an ErrnoException. */",
      "range": {
        "startLine": 105,
        "startChar": 4,
        "endLine": 105,
        "endChar": 40
      },
      "revId": "f2ce103c6cf154de6de6448a76dc3ba08a578add",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0a7b9272_f8226369",
        "filename": "core/java/android/net/DnsResolver.java",
        "patchSetId": 1
      },
      "lineNbr": 105,
      "author": {
        "id": 1337176
      },
      "writtenOn": "2019-04-11T03:57:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "84dc60c1_340f3f70",
      "range": {
        "startLine": 105,
        "startChar": 4,
        "endLine": 105,
        "endChar": 40
      },
      "revId": "f2ce103c6cf154de6de6448a76dc3ba08a578add",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "50750c2a_f6470da8",
        "filename": "core/java/android/net/DnsResolver.java",
        "patchSetId": 1
      },
      "lineNbr": 128,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2019-04-10T16:57:10Z",
      "side": 1,
      "message": "or",
      "range": {
        "startLine": 128,
        "startChar": 56,
        "endLine": 128,
        "endChar": 57
      },
      "revId": "f2ce103c6cf154de6de6448a76dc3ba08a578add",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "219eb1e4_95d5baa0",
        "filename": "core/java/android/net/DnsResolver.java",
        "patchSetId": 1
      },
      "lineNbr": 128,
      "author": {
        "id": 1337176
      },
      "writtenOn": "2019-04-11T03:57:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "50750c2a_f6470da8",
      "range": {
        "startLine": 128,
        "startChar": 56,
        "endLine": 128,
        "endChar": 57
      },
      "revId": "f2ce103c6cf154de6de6448a76dc3ba08a578add",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d44be93c_df3b2346",
        "filename": "core/java/android/net/DnsResolver.java",
        "patchSetId": 1
      },
      "lineNbr": 134,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2019-04-10T16:57:10Z",
      "side": 1,
      "message": "The response code in the DNS response.",
      "range": {
        "startLine": 134,
        "startChar": 24,
        "endLine": 134,
        "endChar": 43
      },
      "revId": "f2ce103c6cf154de6de6448a76dc3ba08a578add",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2ae30e18_b08692c2",
        "filename": "core/java/android/net/DnsResolver.java",
        "patchSetId": 1
      },
      "lineNbr": 134,
      "author": {
        "id": 1337176
      },
      "writtenOn": "2019-04-11T03:57:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d44be93c_df3b2346",
      "range": {
        "startLine": 134,
        "startChar": 24,
        "endLine": 134,
        "endChar": 43
      },
      "revId": "f2ce103c6cf154de6de6448a76dc3ba08a578add",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c4e229fd_86ecd577",
        "filename": "core/java/android/net/DnsResolver.java",
        "patchSetId": 1
      },
      "lineNbr": 196,
      "author": {
        "id": 1059543
      },
      "writtenOn": "2019-04-09T15:46:34Z",
      "side": 1,
      "message": "nit - can be an expression lambda, no need for {}",
      "range": {
        "startLine": 196,
        "startChar": 0,
        "endLine": 196,
        "endChar": 36
      },
      "revId": "f2ce103c6cf154de6de6448a76dc3ba08a578add",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5e4f6a32_8c3e9015",
        "filename": "core/java/android/net/DnsResolver.java",
        "patchSetId": 1
      },
      "lineNbr": 196,
      "author": {
        "id": 1337176
      },
      "writtenOn": "2019-04-10T07:51:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c4e229fd_86ecd577",
      "range": {
        "startLine": 196,
        "startChar": 0,
        "endLine": 196,
        "endChar": 36
      },
      "revId": "f2ce103c6cf154de6de6448a76dc3ba08a578add",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "15194afb_b8f41285",
        "filename": "core/java/android/net/DnsResolver.java",
        "patchSetId": 1
      },
      "lineNbr": 314,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2019-04-10T16:57:10Z",
      "side": 1,
      "message": "a",
      "range": {
        "startLine": 314,
        "startChar": 23,
        "endLine": 314,
        "endChar": 25
      },
      "revId": "f2ce103c6cf154de6de6448a76dc3ba08a578add",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6b80cc0a_76f704ae",
        "filename": "core/java/android/net/DnsResolver.java",
        "patchSetId": 1
      },
      "lineNbr": 314,
      "author": {
        "id": 1337176
      },
      "writtenOn": "2019-04-11T03:57:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "15194afb_b8f41285",
      "range": {
        "startLine": 314,
        "startChar": 23,
        "endLine": 314,
        "endChar": 25
      },
      "revId": "f2ce103c6cf154de6de6448a76dc3ba08a578add",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2a0ca4bc_133bd486",
        "filename": "core/java/android/net/DnsResolver.java",
        "patchSetId": 1
      },
      "lineNbr": 325,
      "author": {
        "id": 1059543
      },
      "writtenOn": "2019-04-09T15:46:34Z",
      "side": 1,
      "message": "Isn\u0027t this going to do synchronous network I/O?",
      "range": {
        "startLine": 325,
        "startChar": 34,
        "endLine": 325,
        "endChar": 42
      },
      "revId": "f2ce103c6cf154de6de6448a76dc3ba08a578add",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "56a054a3_c165d794",
        "filename": "core/java/android/net/DnsResolver.java",
        "patchSetId": 1
      },
      "lineNbr": 325,
      "author": {
        "id": 1337176
      },
      "writtenOn": "2019-04-10T07:51:01Z",
      "side": 1,
      "message": "yeah, is is necessary to check connectivity, we probably don\u0027t want to query the connection type which device can\u0027t use.\nAlso add another overload API, then user could choose what they want to use. \nHowever, I guess this one is the most useful one because most of apps only want a async version of getAddressByName...",
      "parentUuid": "2a0ca4bc_133bd486",
      "range": {
        "startLine": 325,
        "startChar": 34,
        "endLine": 325,
        "endChar": 42
      },
      "revId": "f2ce103c6cf154de6de6448a76dc3ba08a578add",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6824eec4_4737310e",
        "filename": "core/java/android/net/DnsResolver.java",
        "patchSetId": 1
      },
      "lineNbr": 325,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2019-04-10T16:57:10Z",
      "side": 1,
      "message": "It\u0027s synchronous, but not blocking. The calls complete immediately without sending any packets or waiting for the network. They basically just do a routing lookup and assign a source address (or fail).",
      "parentUuid": "56a054a3_c165d794",
      "range": {
        "startLine": 325,
        "startChar": 34,
        "endLine": 325,
        "endChar": 42
      },
      "revId": "f2ce103c6cf154de6de6448a76dc3ba08a578add",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "466cf332_111f31b3",
        "filename": "core/java/android/net/DnsResolver.java",
        "patchSetId": 1
      },
      "lineNbr": 325,
      "author": {
        "id": 1059543
      },
      "writtenOn": "2019-04-11T04:07:48Z",
      "side": 1,
      "message": "Is strictmode smart enough to see that? Perhaps add a test that verifies that it doesn\u0027t get flagged as networking. \n\nhttps://developer.android.com/reference/android/os/StrictMode.ThreadPolicy.Builder#detectNetwork()",
      "parentUuid": "6824eec4_4737310e",
      "range": {
        "startLine": 325,
        "startChar": 34,
        "endLine": 325,
        "endChar": 42
      },
      "revId": "f2ce103c6cf154de6de6448a76dc3ba08a578add",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "881a6800_c9ddc42a",
        "filename": "core/java/android/net/DnsResolver.java",
        "patchSetId": 1
      },
      "lineNbr": 349,
      "author": {
        "id": 1059543
      },
      "writtenOn": "2019-04-09T15:46:34Z",
      "side": 1,
      "message": "I know this is only 2 millis, but it\u0027s still extremely weird to see a method that\u0027s supposed to be async calling thread.sleep inline - plus the interrupt handling is wrong. If the current thread is interrupted, this method will silently clear that interrupt and not sleep, and won\u0027t restore the interrupt.",
      "range": {
        "startLine": 349,
        "startChar": 25,
        "endLine": 349,
        "endChar": 38
      },
      "revId": "f2ce103c6cf154de6de6448a76dc3ba08a578add",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "be4e57f6_de4b123f",
        "filename": "core/java/android/net/DnsResolver.java",
        "patchSetId": 1
      },
      "lineNbr": 349,
      "author": {
        "id": 1337176
      },
      "writtenOn": "2019-04-10T07:51:01Z",
      "side": 1,
      "message": "I think the sleep time is necessary even it is weird... since we can\u0027t control gateways.\nI would like to treat InterruptedException as query failed. what do you think about it?",
      "parentUuid": "881a6800_c9ddc42a",
      "range": {
        "startLine": 349,
        "startChar": 25,
        "endLine": 349,
        "endChar": 38
      },
      "revId": "f2ce103c6cf154de6de6448a76dc3ba08a578add",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "400901f8_32873ea1",
        "filename": "core/java/android/net/DnsResolver.java",
        "patchSetId": 1
      },
      "lineNbr": 349,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2019-04-10T16:57:10Z",
      "side": 1,
      "message": "We can send the queries back to back but anecdotal evidence from a few years ago suggests that some home routers choke when you do this.\n\nIf we want to we can remove the sleep by posting a handler to the main thread. It will complicate the control flow, but it won\u0027t be an API change.\n\nAs for whether to return the error to the user - perhaps not? Given how unlikely it is to receive an interrupt in these 2 milliseconds, and how unlikely it is to be behind a DNS resolver that can\u0027t deal with back-to-back queries, I\u0027d say maybe just catch the InterruptedException and continue with the next query without completing the sleep. I don\u0027t feel strongly about this though.\n\nCharles, what is the correct way to handle interrupts? Just check interrupted before sleeping, and after the sleep, set it to the value that it had before?",
      "parentUuid": "be4e57f6_de4b123f",
      "range": {
        "startLine": 349,
        "startChar": 25,
        "endLine": 349,
        "endChar": 38
      },
      "revId": "f2ce103c6cf154de6de6448a76dc3ba08a578add",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "36e22c95_ba514b1e",
        "filename": "core/java/android/net/DnsResolver.java",
        "patchSetId": 1
      },
      "lineNbr": 349,
      "author": {
        "id": 1337176
      },
      "writtenOn": "2019-04-11T03:57:46Z",
      "side": 1,
      "message": "OK, Roll back first",
      "parentUuid": "400901f8_32873ea1",
      "range": {
        "startLine": 349,
        "startChar": 25,
        "endLine": 349,
        "endChar": 38
      },
      "revId": "f2ce103c6cf154de6de6448a76dc3ba08a578add",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3dff0ddc_2e25a854",
        "filename": "core/java/android/net/DnsResolver.java",
        "patchSetId": 1
      },
      "lineNbr": 349,
      "author": {
        "id": 1059543
      },
      "writtenOn": "2019-04-11T04:07:48Z",
      "side": 1,
      "message": "My problem isn\u0027t the delay, it\u0027s that you\u0027re blocking in what\u0027s supposed to be an async method. You should not block, and if you don\u0027t block you won\u0027t need to handle InterruptedException at all.\n\nIf you do want to/have to handle interruptedexception, the correct thing here is to use a construct like this:\nhttps://cs.corp.google.com/piper///depot/google3/third_party/java_src/google_common/current/java/com/google/common/util/concurrent/Uninterruptibles.java?q\u003dsleepuninterruptibly\u0026sq\u003d-file:google3/experimental\u0026g\u003d0\u0026l\u003d355\n\nSo that you basically ignore the interrupt, but don\u0027t swallow it.",
      "parentUuid": "be4e57f6_de4b123f",
      "range": {
        "startLine": 349,
        "startChar": 25,
        "endLine": 349,
        "endChar": 38
      },
      "revId": "f2ce103c6cf154de6de6448a76dc3ba08a578add",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bfb225cf_d007aad8",
        "filename": "core/java/android/net/DnsResolver.java",
        "patchSetId": 1
      },
      "lineNbr": 403,
      "author": {
        "id": 1059543
      },
      "writtenOn": "2019-04-09T15:46:34Z",
      "side": 1,
      "message": "Isn\u0027t going through the main thread and then back to the user\u0027s executor going to introduce significant latency? The UI thread is pretty busy, especially at startup. For a DNS request that gets fired off early in a process lifetime, this could cause a hundreds of ms delay.",
      "range": {
        "startLine": 403,
        "startChar": 15,
        "endLine": 403,
        "endChar": 42
      },
      "revId": "f2ce103c6cf154de6de6448a76dc3ba08a578add",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "08fca39b_e0c8a5f2",
        "filename": "core/java/android/net/DnsResolver.java",
        "patchSetId": 1
      },
      "lineNbr": 403,
      "author": {
        "id": 1337176
      },
      "writtenOn": "2019-04-10T07:51:01Z",
      "side": 1,
      "message": "If UI thread is pretty busy(system busy?), could the apps still gain enough resource to run DNS request without delay in its executor? \nIn the other words, could we really avoid this problem by doing all things in user\u0027s executor? Does this problem only happen at startup?\nNo idea of it...",
      "parentUuid": "bfb225cf_d007aad8",
      "range": {
        "startLine": 403,
        "startChar": 15,
        "endLine": 403,
        "endChar": 42
      },
      "revId": "f2ce103c6cf154de6de6448a76dc3ba08a578add",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3123e64f_caa0f602",
        "filename": "core/java/android/net/DnsResolver.java",
        "patchSetId": 1
      },
      "lineNbr": 403,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2019-04-10T16:57:10Z",
      "side": 1,
      "message": "This was a recommendation from adamp@ following guidance from API council:\n\nhttps://buganizer.corp.google.com/issues/124882626#comment5\n\nThe details are in the API council chat room somewhere, but the summary is: originally this API required that the user pass in a Handler, in order to ensure that there was some thread (more specifically, some MessageQueue) to which we could attach the onFileDescriptorEventListener. Guidance from API council was to take Executor instead of Handler, but in order to do that without forcing the creation of a thread (which is a waste of resources), the recommendation was to use the main thread.",
      "parentUuid": "08fca39b_e0c8a5f2",
      "range": {
        "startLine": 403,
        "startChar": 15,
        "endLine": 403,
        "endChar": 42
      },
      "revId": "f2ce103c6cf154de6de6448a76dc3ba08a578add",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bfafa20b_b535faf7",
        "filename": "core/java/android/net/DnsResolver.java",
        "patchSetId": 1
      },
      "lineNbr": 403,
      "author": {
        "id": 1337176
      },
      "writtenOn": "2019-04-11T03:57:46Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "3123e64f_caa0f602",
      "range": {
        "startLine": 403,
        "startChar": 15,
        "endLine": 403,
        "endChar": 42
      },
      "revId": "f2ce103c6cf154de6de6448a76dc3ba08a578add",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "626fde1a_fca72549",
        "filename": "core/java/android/net/DnsResolver.java",
        "patchSetId": 1
      },
      "lineNbr": 403,
      "author": {
        "id": 1059543
      },
      "writtenOn": "2019-04-11T04:07:48Z",
      "side": 1,
      "message": "Yes, the user-provided executor may be something that just runs tasks inline, or has its own dedicated thread pool. The problem is not just at startup.\n\nIt\u0027s true that using the main thread as a listener does solve the problem of requiring a handler, but it also introduces the problem of needless latency, and if someone is lazy and blocks the main thread on this callback arriving, it could cause deadlock.",
      "parentUuid": "08fca39b_e0c8a5f2",
      "range": {
        "startLine": 403,
        "startChar": 15,
        "endLine": 403,
        "endChar": 42
      },
      "revId": "f2ce103c6cf154de6de6448a76dc3ba08a578add",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0156bbcc_ec84f6e8",
        "filename": "core/java/android/net/DnsResolver.java",
        "patchSetId": 1
      },
      "lineNbr": 417,
      "author": {
        "id": 1059543
      },
      "writtenOn": "2019-04-09T15:46:34Z",
      "side": 1,
      "message": "We really should not call the user\u0027s callback while holding locks... if the callback blocks (which it\u0027s totally allowed to do, it\u0027s running on the app-provided executor) that will cause the cancellationsignal to block in its onCancel method.",
      "range": {
        "startLine": 417,
        "startChar": 47,
        "endLine": 417,
        "endChar": 54
      },
      "revId": "f2ce103c6cf154de6de6448a76dc3ba08a578add",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7370f763_1611f930",
        "filename": "core/java/android/net/DnsResolver.java",
        "patchSetId": 1
      },
      "lineNbr": 417,
      "author": {
        "id": 1337176
      },
      "writtenOn": "2019-04-10T07:51:01Z",
      "side": 1,
      "message": "We need to use the lock to restrict the order between cancel and resNetworkResult for avoiding race.\nAnd resNetworkResult will be ran in app-provided executor, so I guess it is no matter to call callback while holding locks.\nBut yeah, it really could block onCancel method of cancellationsignal. \nAny suggestion for it, or app should keep their executor clear...",
      "parentUuid": "0156bbcc_ec84f6e8",
      "range": {
        "startLine": 417,
        "startChar": 47,
        "endLine": 417,
        "endChar": 54
      },
      "revId": "f2ce103c6cf154de6de6448a76dc3ba08a578add",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6fedd730_7005e9ed",
        "filename": "core/java/android/net/DnsResolver.java",
        "patchSetId": 1
      },
      "lineNbr": 417,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2019-04-10T16:57:10Z",
      "side": 1,
      "message": "I think we discussed this in a previous CL. We wanted to ensure that if the user calls cancel() on the cancellation signal, and cancel returns, then the callback is not invoked. I\u0027m not sure if there is a way to do this without holding a lock while calling the user callback: if we don\u0027t hold the lock while calling the user callback, then there is a window in which the user can call cancel but still get the callback.",
      "parentUuid": "7370f763_1611f930",
      "range": {
        "startLine": 417,
        "startChar": 47,
        "endLine": 417,
        "endChar": 54
      },
      "revId": "f2ce103c6cf154de6de6448a76dc3ba08a578add",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6d7b71b8_3a45d60a",
        "filename": "core/java/android/net/DnsResolver.java",
        "patchSetId": 1
      },
      "lineNbr": 417,
      "author": {
        "id": 1337176
      },
      "writtenOn": "2019-04-11T03:57:46Z",
      "side": 1,
      "message": "Yeah, that\u0027s what I mean. We must ensure the ordering of these evets(fdEvnet, onCancel(), user callback()), otherwise it is possible that user can call onCancel() but still get the callback.",
      "parentUuid": "6fedd730_7005e9ed",
      "range": {
        "startLine": 417,
        "startChar": 47,
        "endLine": 417,
        "endChar": 54
      },
      "revId": "f2ce103c6cf154de6de6448a76dc3ba08a578add",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "271c9009_3125b1dc",
        "filename": "core/java/android/net/DnsResolver.java",
        "patchSetId": 1
      },
      "lineNbr": 417,
      "author": {
        "id": 1059543
      },
      "writtenOn": "2019-04-11T04:07:48Z",
      "side": 1,
      "message": "You do not need to hold the lock while calling the callback. You could do your cancellation checking, release the lock, then call the callback. It is pretty much never a good idea to call into app code while holding locks.\n\nCancel doesn\u0027t indicate whether it succeeded or failed - nothing else in android offers the guarantee you\u0027re offering. There\u0027s no benefit to providing an ordering between cancel and the callback, and the cost is deadlock.",
      "parentUuid": "7370f763_1611f930",
      "range": {
        "startLine": 417,
        "startChar": 47,
        "endLine": 417,
        "endChar": 54
      },
      "revId": "f2ce103c6cf154de6de6448a76dc3ba08a578add",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}