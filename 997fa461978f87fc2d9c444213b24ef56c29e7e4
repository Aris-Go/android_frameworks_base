{
  "comments": [
    {
      "key": {
        "uuid": "9a37750e_4243d954",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 11,
      "author": {
        "id": 1038039
      },
      "writtenOn": "2019-03-01T13:52:09Z",
      "side": 1,
      "message": "Suggestion: Is it about time we did something about this? i.e. the problem of not being able to use the annotation directly in source?\n\nIf we could actually annotate the real source that would be ideal. I think annotating using stubs is an ok fallback when there are other reasons not to annotate the code, e.g. when it would mean carrying patches over upstream. For at least some of the ones in this commit, those arguments do not apply so it\u0027s mostly because the annotation isn\u0027t in the compiler classpath, which we can do something about.\n\nWhile it\u0027s not something we want app developers to use it seems like something we could add there with appropriate documentation and it would save a fair amount of pain: the hidden API annotation stubs are ok, but I don\u0027t think they\u0027re an enormous saving over having entries in the .txt file. If it\u0027s a matter of expressibility being greater with annotations then a different .txt format would solve that without so much verbosity. \n\nAlternatively, perhaps \"current\" could include the annotation on top of the public SDK (a bit like lambda stubs is provided for compilation but not SDK).",
      "range": {
        "startLine": 11,
        "startChar": 27,
        "endLine": 11,
        "endChar": 37
      },
      "revId": "997fa461978f87fc2d9c444213b24ef56c29e7e4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0f91440c_cb354ef5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 11,
      "author": {
        "id": 1039338
      },
      "writtenOn": "2019-03-01T14:24:28Z",
      "side": 1,
      "message": "As this is the only code that needs the annotation but does not have access to the annotations (and we are not likely to have any more) then it seems like a bit of overkill to add specific support for it in the build to make current include the annotation on top of the public SDK.\n\nThe reason the annotation cannot be used in the source is because it builds the android.test.legacy library which is provided in the SDK and meant to be statically included in an APK and so builds against the current. I did get an agreement in principle from the androidx.test team to add an androidx.test.legacy library to their stuff which would be distributed through the Google Maven repository. Once we did that then we could potentially remove the android.test.legacy from the SDK and merge this code back into the original source.\n\nCurrently, the runtime hiddenapi checks are only performed on the bootclassloader, so classes in a shared library have no protection against being accessed by reflection. I raised http://b/126519737 to cover that mainly as a place for me to ensure that information about what API methods need to be checked is not lost. So, once we remove android.test.base from the bootclassloader then we could potentially just remove the whole test-base/hiddenapi/ directory.\n\nThe reason why I need to remove the entries from the file is because they prevent me removing android.test.base from the bootclasspath. Basically, the hiddenapi information for the android.test.base (of which the entries in config/hiddenapi-greylist.txt are part) must only be gathered when android.test.base is in the bootclassloader or either the build or tests will break. Without this change the entries in config/hiddenapi-greylist.txt would break the build when REMOVE_ATB_FROM_BCP\u003dtrue because it would detect that they are not in the bootclassloader. This change fixes that because the hiddenapi information is only gathered from android.test.base-hiddenapi (and android.test.base) when android.test.base in on the bootclasspath.",
      "parentUuid": "9a37750e_4243d954",
      "range": {
        "startLine": 11,
        "startChar": 27,
        "endLine": 11,
        "endChar": 37
      },
      "revId": "997fa461978f87fc2d9c444213b24ef56c29e7e4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cf73bb8b_8116fdf1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 11,
      "author": {
        "id": 1038039
      },
      "writtenOn": "2019-03-01T15:00:13Z",
      "side": 1,
      "message": "Ah, if this is the only time we\u0027ll need to do this in frameworks/base/ code then I\u0027m fine with it. I hadn\u0027t appreciated why this code was \"special\" over other code in frameworks/base/. Thanks for the info.",
      "parentUuid": "0f91440c_cb354ef5",
      "range": {
        "startLine": 11,
        "startChar": 27,
        "endLine": 11,
        "endChar": 37
      },
      "revId": "997fa461978f87fc2d9c444213b24ef56c29e7e4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0782dd33_b5d6ceb7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 11,
      "author": {
        "id": 1010681
      },
      "writtenOn": "2019-03-04T13:45:16Z",
      "side": 1,
      "message": "Thanks for the context. I think API enforcement for libraries is something we could look at in future. Not clear how high priority that would should be?",
      "parentUuid": "cf73bb8b_8116fdf1",
      "range": {
        "startLine": 11,
        "startChar": 27,
        "endLine": 11,
        "endChar": 37
      },
      "revId": "997fa461978f87fc2d9c444213b24ef56c29e7e4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}