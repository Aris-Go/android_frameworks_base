{
  "comments": [
    {
      "key": {
        "uuid": "b24839a5_21d287f7",
        "filename": "services/usb/java/com/android/server/usb/UsbDeviceManager.java",
        "patchSetId": 2
      },
      "lineNbr": 1921,
      "author": {
        "id": 1042384
      },
      "writtenOn": "2019-08-01T17:18:39Z",
      "side": 1,
      "message": "This is a asynchronous call. You have to wait for the callback to return (or timeout) before calling in 1935.\n\nThe functions are set to NONE at the hal implementation level before setting new one. (For reference, Return\u003cvoid\u003e UsbGadget::setCurrentUsbFunctions @ https://android.googlesource.com/device/google/wahoo/+/master/usb/UsbGadget.cpp)\n\nDo you have a similar HAL implementation ?",
      "range": {
        "startLine": 1921,
        "startChar": 33,
        "endLine": 1921,
        "endChar": 55
      },
      "revId": "a0f5c4c4f60b63a16febc22bb2b8fcade3a8645a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4b999f1f_5bdacd6b",
        "filename": "services/usb/java/com/android/server/usb/UsbDeviceManager.java",
        "patchSetId": 2
      },
      "lineNbr": 1921,
      "author": {
        "id": 1410110
      },
      "writtenOn": "2019-08-01T17:49:54Z",
      "side": 1,
      "message": "Yes. This HAL implementation was used as template.\nI saw patches for your HAL with sleeps about 5000-100000us,\nbut with my patch there is no need in sleeps at all.\n\nThe behavior was tested this way:\nvery fast switching between the data transfer modes and it works\nright as expected.\nIn case of sleeps and fast switching behavior is unexpected when\nthe time between switching is less then sleep time.",
      "parentUuid": "b24839a5_21d287f7",
      "range": {
        "startLine": 1921,
        "startChar": 33,
        "endLine": 1921,
        "endChar": 55
      },
      "revId": "a0f5c4c4f60b63a16febc22bb2b8fcade3a8645a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e4c6ebda_c620527b",
        "filename": "services/usb/java/com/android/server/usb/UsbDeviceManager.java",
        "patchSetId": 2
      },
      "lineNbr": 1921,
      "author": {
        "id": 1042384
      },
      "writtenOn": "2019-08-01T18:22:21Z",
      "side": 1,
      "message": "\u003e\u003e I saw patches for your HAL with sleeps about 5000-100000us,\n\u003e\u003e but with my patch there is no need in sleeps at all.\nThe delay is for port partner\u0027s dwc controller to recognize that pull up was removed.\nsetCurrentUsbFunctions goes through HIDL binder IPC and this would probably introduce a delay and maybe that\u0027s why you no-longer see the issue.\n\nGiven that setCurrentUsbFunctions is asynchronous, adbd might still be started or stopped before the gadget is teared down.\n\nadbd writes into the functionfs ep0 and hal monitors for the ep1/ep2 to show up before pulling up the gadget by writing into the UDC configfs node. Given this, what exact race do you see at the hal implementation level ?",
      "parentUuid": "4b999f1f_5bdacd6b",
      "range": {
        "startLine": 1921,
        "startChar": 33,
        "endLine": 1921,
        "endChar": 55
      },
      "revId": "a0f5c4c4f60b63a16febc22bb2b8fcade3a8645a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b1f81460_a2ddcc3d",
        "filename": "services/usb/java/com/android/server/usb/UsbDeviceManager.java",
        "patchSetId": 2
      },
      "lineNbr": 1921,
      "author": {
        "id": 1410110
      },
      "writtenOn": "2019-08-06T09:53:55Z",
      "side": 1,
      "message": "Thank you for attention to asynchronous function setCurrentUsbFunctions, I resolved this\nby new patch set.\n\nAbout adbd problem: as I mentioned before, when the switching between data transfer modes is\nhappening, ep1 and ep2 are removed from /dev/ffs*/adb/ for a little time interval. But these endpoints are in the EndpointList variable in Usb Gadget HAL. So for orderly work we need to\nmake variables \"fresh\" like in the case of property:sys.usb.configfs\u003d1.\nFor example, in UsbDeviceManager when property:sys.usb.configfs\u003d1 there is firstly setting all\nto \"none\" and then applying new configuration.",
      "parentUuid": "e4c6ebda_c620527b",
      "range": {
        "startLine": 1921,
        "startChar": 33,
        "endLine": 1921,
        "endChar": 55
      },
      "revId": "a0f5c4c4f60b63a16febc22bb2b8fcade3a8645a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7dfa3079_ebd465ba",
        "filename": "services/usb/java/com/android/server/usb/UsbDeviceManager.java",
        "patchSetId": 2
      },
      "lineNbr": 1921,
      "author": {
        "id": 1042384
      },
      "writtenOn": "2019-08-07T21:45:25Z",
      "side": 1,
      "message": "mEndpointList is static list that maintains the list of endpoints for a specific ffs function. In this instance adb. usb hal uses this list to see if the userspace gadget functions(or ffs functions) have written their descriptors before pulling up the gadget. So the endpoints are never meant to be removed from the list.\n\n  bool descriptorWritten \u003d true;\n  for (int i \u003d 0; i \u003c static_cast\u003cint\u003e(usbGadget-\u003emEndpointList.size()); i++) {\n    if (access(usbGadget-\u003emEndpointList.at(i).c_str(), R_OK)) {\n      descriptorWritten \u003d false;\n      break;\n    }\n  }\n\nnot sure how much of your implementation is same as https://android.googlesource.com/device/google/wahoo/+/master/usb/UsbGadget.cpp. If its the same, Can you share the logs and the code file ?",
      "parentUuid": "b1f81460_a2ddcc3d",
      "range": {
        "startLine": 1921,
        "startChar": 33,
        "endLine": 1921,
        "endChar": 55
      },
      "revId": "a0f5c4c4f60b63a16febc22bb2b8fcade3a8645a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "732c6e4d_404cf8dc",
        "filename": "services/usb/java/com/android/server/usb/UsbDeviceManager.java",
        "patchSetId": 2
      },
      "lineNbr": 1921,
      "author": {
        "id": 1410110
      },
      "writtenOn": "2019-08-08T16:39:58Z",
      "side": 1,
      "message": "1) I mean that ep1 and ep2 are removed not from mEndpointList but files removed from directory /dev/usb-ffs/adb/. You can check it with \"while true; do ls; done\" and switching data transfer modes very fast. You\u0027ll see that ep1 and ep2 are not present in directory when switching is happen.\n\n2) The TRUE way to fix the order is to add tearDownGadget function into the Usb Gadget intergace (it\u0027ll be more logical because now setCurrentUsbFunctions does two logical works - tearing down and setting).\nIn this case it\u0027ll be possible to kick all existing connections by calling tearDownGadget, then start/stop adb and then setting the current function in Usb Gadget HAL as it works now without Gadget HAl.\n\nBut for now my patch can fix this problem of order. I saw in UsbDeviceManager implementation without HAL there was a try to remove setting configfs to NONE everytime switching is happen, but then that commit was revert, so I can make a conclusion this order must be observed.\n\n3) Our implementation is the same as yours, even logs. Please find our log attached below when my patch is merged. Writing to UDC variable killed adbd, you can check it by passing \"none\" to UDC variable in shell.\n\n07-31 15:36:28.322  2812  2831 D UsbDeviceManager: setUsbConfig(5) request:57\n07-31 15:36:28.322  2416  2416 I android.hardware.usb.gadget@1.0-service.renesas: Tearing down Gadget\n07-31 15:36:28.323  7754 23849 I adbd    : UsbFfs: connection terminated: read 1272 failed with error Cannot send after transport endpoint shutdown\n07-31 15:36:28.323  7754  7754 I adbd    : UsbFfs: offline\n07-31 15:36:28.330  7754 23827 E adbd    : failed to send interruption signal to worker: No such process\n07-31 15:36:28.335  2416  2416 I android.hardware.usb.gadget@1.0-service.renesas: mMonitor destroyed\n07-31 15:36:28.348  2416  2416 I android.hardware.usb.gadget@1.0-service.renesas: Tearing down Gadget\n07-31 15:36:28.348  2416  2416 I android.hardware.usb.gadget@1.0-service.renesas: Gadget cannot be pulled down: /config/usb_gadget/g1/UDC\n07-31 15:36:28.348  2416  2416 I android.hardware.usb.gadget@1.0-service.renesas: mMonitor not running\n07-31 15:36:28.348  2416  2416 I android.hardware.usb.gadget@1.0-service.renesas: setCurrentUsbFunctions mtp\n07-31 15:36:28.349  2416  2416 I android.hardware.usb.gadget@1.0-service.renesas: setCurrentUsbFunctions Adb\n07-31 15:36:28.349  2416  2416 I android.hardware.usb.gadget@1.0-service.renesas: Service started\n07-31 15:36:28.352  2416  2416 I android.hardware.usb.gadget@1.0-service.renesas: monitorFfs signalled true\n07-31 15:36:28.352  2416  2416 I android.hardware.usb.gadget@1.0-service.renesas: Usb Gadget setcurrent functions called successfully\n07-31 15:36:28.788  7754  7754 I adbd    : destroying transport UsbFfs\n07-31 15:36:28.789  7754  7754 I adbd    : UsbFfsConnection being destroyed\n07-31 15:36:28.861  7754  7755 I adbd    : opening control endpoint /dev/usb-ffs/adb/ep0\n07-31 15:36:28.877  2416 26588 I android.hardware.usb.gadget@1.0-service.renesas: GADGET pulled up\n07-31 15:36:28.887  7754  7755 I adbd    : UsbFfsConnection constructed\n07-31 15:36:28.887  7754 26615 I adbd    : USB event: FUNCTIONFS_BIND\n07-31 15:36:29.328  7754 26615 I adbd    : USB event: FUNCTIONFS_ENABLE\n07-31 15:36:29.944  7754  7754 I adbd    : UsbFfs: already offline",
      "parentUuid": "7dfa3079_ebd465ba",
      "range": {
        "startLine": 1921,
        "startChar": 33,
        "endLine": 1921,
        "endChar": 55
      },
      "revId": "a0f5c4c4f60b63a16febc22bb2b8fcade3a8645a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "97ffc0f9_b3c3afc9",
        "filename": "services/usb/java/com/android/server/usb/UsbDeviceManager.java",
        "patchSetId": 2
      },
      "lineNbr": 1921,
      "author": {
        "id": 1410110
      },
      "writtenOn": "2019-08-14T10:24:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "732c6e4d_404cf8dc",
      "range": {
        "startLine": 1921,
        "startChar": 33,
        "endLine": 1921,
        "endChar": 55
      },
      "revId": "a0f5c4c4f60b63a16febc22bb2b8fcade3a8645a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cd7d9746_efbe6412",
        "filename": "services/usb/java/com/android/server/usb/UsbDeviceManager.java",
        "patchSetId": 2
      },
      "lineNbr": 1921,
      "author": {
        "id": 1042384
      },
      "writtenOn": "2019-08-16T02:11:40Z",
      "side": 1,
      "message": "Apologies for the delay.\n\n\u003e\u003e You\u0027ll see that ep1 and ep2 are not present in directory when switching is happen.\nYes this I would expect as well. The monitor logic in the hal implementation was written around this.\n\n\u003e\u003eBut for now my patch can fix this problem of order.\nThis is fine as well. Setting function to none was anyways meant to do that\n\nThe problem here is that using a CV to block would block the message handler queue as well. Ideally you should be posting messages without blocking the message handler queue as setUsbConfig can be called through the message handler queue.\n\nAlso, can you post the logs without your patch when you hit the race and gadget stack does not get configured ?",
      "parentUuid": "97ffc0f9_b3c3afc9",
      "range": {
        "startLine": 1921,
        "startChar": 33,
        "endLine": 1921,
        "endChar": 55
      },
      "revId": "a0f5c4c4f60b63a16febc22bb2b8fcade3a8645a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ec99fa15_b337069e",
        "filename": "services/usb/java/com/android/server/usb/UsbDeviceManager.java",
        "patchSetId": 2
      },
      "lineNbr": 1921,
      "author": {
        "id": 1410110
      },
      "writtenOn": "2019-08-21T10:32:46Z",
      "side": 1,
      "message": "Apologies for the delay.\n\nI attached logs below where switching data transfer mode caused undefined behavior.\n\n08-20 11:01:27.396  2823  2842 I UsbDeviceManager: Setting USB config to \n08-20 11:01:27[  505.365312] android_work: sent uevent USB_STATE\u003dDISCONNECTED\n.396  2823  2842 D UsbDeviceManager: setUsbConfig(1) request:3\n08-20 11:01:27.409  2434  2434 I android.hardware.usb.gadget@1.0-service: setCurrentUsbFunctions None\n08-20 11:01:27.413  2434  4955 I android.hardware.usb.gadget@1.0-service: event\u003d1 on fd\u003d7\n08-20 11:01:27.413  4626  4954 E d.process.medi: read ERROR: fd \u003d 40, n \u003d -1: Cannot send after transport endpoint shutdown\n08-20 11:01:27.413  4626  4954 E MtpServer: request read returned -1, errno: 108\n08-20 11:01:27.413  2434  2434 I android.hardware.usb.gadget@1.0-service: mMonitor destroyed\n08-20 11:01:27.413  3910  4959 I adbd    : USB event: FUNCTIONFS_UNBIND\n08-20 11:01:27.413  3910  4959 W adbd    : received FUNCTIONFS_UNBIND while still enabled?\n08-20 11:01:27.416  3910  4962 I adbd    : UsbFfs: connection terminated: read 2 failed with error Cannot send after transport endpoint shutdown\n08-20 11:01:27.416  3910  3910 I adbd    : UsbFfs: offline\n08-20 11:01:27.416  3910  3910 I adbd    : destroying transport UsbFfs\n08-20 11:01:27.417  3910  3910 I adbd    : UsbFfsConnection being destroyed\n08-20 11:01:27.446  2434  2434 I android.hardware.usb.gadget@1.0-service: setCurrentUsbFunctions Adb\n08-20 11:01:27.446  2434  2434 I android.hardware.usb.gadget@1.0-service: Service started\n08-20 11:01:27.446  2434  2434 I android.hardware.usb.gadget@1.0-service: Mainthread in Cv\n08-20 11:01:27.449  2434  2434 I android.hardware.usb.gadget@1.0-servic[  505.502191] configfs-gadget e6590000.usb: failed to start g1: -19\ne: monit[  505.502379] android_work: did not send uevent (0 0           (null))\norFfs signalled [  505.502546] read descriptors\ntrue\n08-20 11:0[  505.502553] read strings\n1:27.449  2434  2434 I android.hardware.usb.gadget@1.0-service: Usb Gadget setcurrent functions called successfully\n08-20 11:01:27.449  2823  3228 E UsbDeviceManager: notifyCurrentFunction request:3 status:0\n08-20 11:01:27.551  2434  4974 I android.hardware.usb.gadget@1.0-service: event\u003d1 on fd\u003d6\n08-20 11:01:27.551  2434  4974 E android.hardware.usb.gadget@1.0-service:     wd \u003d 1; \n08-20 11:01:27.551  2434  4974 E android.hardware.usb.gadget@1.0-service: mask \u003d \n08-20 11:01:27.551  2434  4974 E android.hardware.usb.gadget@1.0-service: IN_CLOSE_WRITE \n08-20 11:01:27.551  2434  4974 E android.hardware.usb.gadget@1.0-service: \n08-20 11:01:27.551  2434  4974 E android.hardware.usb.gadget@1.0-service:         name \u003d ep0\n08-20 11:01:27.553  3910  3950 I adbd    : opening control endpoint /dev/usb-ffs/adb/ep0\n08-20 11:01:27.555  3910  3950 I adbd    : UsbFfsConnection constructed\n08-20 11:01:27.560  2434  4974 E android.hardware.usb.gadget@1.0-service:     wd \u003d 1; \n08-20 11:01:27.560  2434  4974 E android.hardware.usb.gadget@1.0-service: mask \u003d \n08-20 11:01:27.560  2434  4974 E android.hardware.usb.gadget@1.0-service: IN_CLOSE_NOWRITE \n08-20 11:01:27.560  2434  4974 E android.hardware.usb.gadget@1.0-service: \n08-20 11:01:27.560  2434  4974 E android.hardware.usb.gadget@1.0-service:         name \u003d ep1\n08-20 11:01:27.560  3910  4977 I adbd    : USB event: FUNCTIONFS_BIND\n08-20 11:01:27.561  2434  4974 I android.hardware.usb.gadget@1.0-service: GADGET pulled up\n08-20 11:01:27.561  2434  4974 E android.hardware.usb.gadget@1.0-service:     wd \u003d 1; \n08-20 11:01:27.561  2434  4974 E android.hardware.usb.gadget@1.0-service: mask \u003d \n08-20 11:01:27.561  2434  4974 E android.hardware.usb.gadget@1.0-service: IN_CLOSE_WRITE \n08-20 11:01:27.561  2434  4974 E android.hardware.usb.gadget@1.0-service: \n08-20 11:01:27.561  2434  4974 E android.hardware.usb.gadget@1.0-service:         name \u003d ep2\n08-20 11:01:27.561  2434  4974 I android.hardware.usb.gadget@1.0-service: event\u003d1 on fd\u003d6\n08-20 11:01:27.561  2434  4974 E android.hardware.usb.gadget@1.0-service:     wd \u003d 1; \n08-20 11:01:27.561  2434  4974 E android.hardware.usb.gadget@1.0-service: mask \u003d \n08-20 11:01:27.561  2434  4974 E android.hardware.usb.gadget@1.0-service: IN_DELETE \n08-20 11:01:27.561  2434  4974 E android.hardware.usb.gadget@1.0-service: \n08-20 11:01:27.561  2434  4974 E android.hardware.usb.gadget@1.0-service:         name \u003d ep1\n08-20 11:01:27.561  2434  4974 E android.hardware.usb.gadget@1.0-service:     wd \u003d 1; \n08-20 11:01:27.561  2434  4974 E android.hardware.usb.gadget@1.0-service: mask \u003d \n08-20 11:01:27.561  2434  4974 E android.hardware.[  505.773259] Internal error: Attempting to execute userspace memory: 86000004 [#1] PREEMPT SMP",
      "parentUuid": "cd7d9746_efbe6412",
      "range": {
        "startLine": 1921,
        "startChar": 33,
        "endLine": 1921,
        "endChar": 55
      },
      "revId": "a0f5c4c4f60b63a16febc22bb2b8fcade3a8645a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9679416b_dec61ec5",
        "filename": "services/usb/java/com/android/server/usb/UsbDeviceManager.java",
        "patchSetId": 2
      },
      "lineNbr": 1921,
      "author": {
        "id": 1410110
      },
      "writtenOn": "2019-08-21T14:57:56Z",
      "side": 1,
      "message": "Also I want to propose to set ctl.stop property to \"adbd\" value before tearing down gadget and then do ctl.start after setting functions to none. So the order will be the following:\n1. stop adbd\n2. set functions to none (tearDownGadget)\n3. start adbd if required\n4. set required functions without tearDownGadget\n\nThis order requires changes in HAL implementation - tearDown will be only in case of setting functions to None. So we turn off all processes and then configure it as in case of HAL absence.",
      "parentUuid": "ec99fa15_b337069e",
      "range": {
        "startLine": 1921,
        "startChar": 33,
        "endLine": 1921,
        "endChar": 55
      },
      "revId": "a0f5c4c4f60b63a16febc22bb2b8fcade3a8645a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "76ad4c23_e3081aac",
        "filename": "services/usb/java/com/android/server/usb/UsbDeviceManager.java",
        "patchSetId": 2
      },
      "lineNbr": 1921,
      "author": {
        "id": 1410110
      },
      "writtenOn": "2019-09-11T10:41:54Z",
      "side": 1,
      "message": "I saw your patch https://android.googlesource.com/device/google/crosshatch/+/c537c9e5b7f99603bb24b67b0fee5c5b1d7c79af for crosshatch. Why did you apply it only for crosshatch, not for wahoo?",
      "parentUuid": "9679416b_dec61ec5",
      "range": {
        "startLine": 1921,
        "startChar": 33,
        "endLine": 1921,
        "endChar": 55
      },
      "revId": "a0f5c4c4f60b63a16febc22bb2b8fcade3a8645a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}