{
  "comments": [
    {
      "key": {
        "uuid": "61113e22_895397bb",
        "filename": "core/jni/com_android_internal_os_Zygote.cpp",
        "patchSetId": 2
      },
      "lineNbr": 556,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2018-03-13T11:09:32Z",
      "side": 1,
      "message": "Can we make this a static helper instead? (I assume you\u0027ll always get it in the stack trace?)\n\nOr can we not have it in the stack trace by making this a macro?",
      "range": {
        "startLine": 553,
        "startChar": 0,
        "endLine": 556,
        "endChar": 4
      },
      "revId": "3d9768aae38e4825040ad14d8c0693c704144547",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4dcd736f_0e4abedc",
        "filename": "core/jni/com_android_internal_os_Zygote.cpp",
        "patchSetId": 2
      },
      "lineNbr": 556,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2018-03-13T15:12:39Z",
      "side": 1,
      "message": "See the follow-up, that needs more captured variables. A lambda seemed nicer to capture a changing environment while keeping the signature correct. So not a static function, but rather a struct, would be the replacement.\n\nNote that \"RuntimeAbort\" is in old abort stacks. I assume a strategic ALWAYS_INLINE on either would remove that. Considering that this is exceptional, I do not see a strong reason, though.",
      "parentUuid": "61113e22_895397bb",
      "range": {
        "startLine": 553,
        "startChar": 0,
        "endLine": 556,
        "endChar": 4
      },
      "revId": "3d9768aae38e4825040ad14d8c0693c704144547",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c622d11e_d3eada62",
        "filename": "core/jni/com_android_internal_os_Zygote.cpp",
        "patchSetId": 2
      },
      "lineNbr": 556,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2018-03-13T16:04:47Z",
      "side": 1,
      "message": "How about a macro? (and what\u0027s \"the follow-up\"?)",
      "parentUuid": "4dcd736f_0e4abedc",
      "range": {
        "startLine": 553,
        "startChar": 0,
        "endLine": 556,
        "endChar": 4
      },
      "revId": "3d9768aae38e4825040ad14d8c0693c704144547",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "68e41bd6_552a9beb",
        "filename": "core/jni/com_android_internal_os_Zygote.cpp",
        "patchSetId": 2
      },
      "lineNbr": 556,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2018-03-13T17:42:05Z",
      "side": 1,
      "message": "The \"follow-up\" is the next CL in the stack, in which fail_fn will add the target process name to the abort message.\n\nI\u0027d rather avoid macros, if possible, and use strongly-typed alternatives. Is avoidance of the single added stack frame worth it?",
      "parentUuid": "c622d11e_d3eada62",
      "range": {
        "startLine": 553,
        "startChar": 0,
        "endLine": 556,
        "endChar": 4
      },
      "revId": "3d9768aae38e4825040ad14d8c0693c704144547",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c1c2f36e_5aa9feb0",
        "filename": "core/jni/com_android_internal_os_Zygote.cpp",
        "patchSetId": 2
      },
      "lineNbr": 556,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2018-03-13T17:46:16Z",
      "side": 1,
      "message": "No, just suggestions of alternatives :)",
      "parentUuid": "68e41bd6_552a9beb",
      "range": {
        "startLine": 553,
        "startChar": 0,
        "endLine": 556,
        "endChar": 4
      },
      "revId": "3d9768aae38e4825040ad14d8c0693c704144547",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e63aeaf4_0d2a64cc",
        "filename": "core/jni/com_android_internal_os_Zygote.cpp",
        "patchSetId": 2
      },
      "lineNbr": 556,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2018-03-13T17:50:54Z",
      "side": 1,
      "message": "Side note: I tested always_inline, and it works, in that a tombstone stacktrace does not directly show the frame. But a symbolized stacktrace will of course show it again as inlined code.",
      "parentUuid": "c1c2f36e_5aa9feb0",
      "range": {
        "startLine": 553,
        "startChar": 0,
        "endLine": 556,
        "endChar": 4
      },
      "revId": "3d9768aae38e4825040ad14d8c0693c704144547",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}