{
  "comments": [
    {
      "key": {
        "uuid": "f0e16e8e_17a413fd",
        "filename": "Android.bp",
        "patchSetId": 23
      },
      "lineNbr": 615,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2019-12-16T15:52:03Z",
      "side": 1,
      "message": "If these are used outside the framework they need to be jarjar\u0027d. Is there a rules file that contains them?",
      "range": {
        "startLine": 609,
        "startChar": 0,
        "endLine": 615,
        "endChar": 64
      },
      "revId": "111d5ab184cb105928fcdc20e13c23e092ce04c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c19185f0_915d331f",
        "filename": "api/system-current.txt",
        "patchSetId": 23
      },
      "lineNbr": 4198,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2019-12-16T15:52:03Z",
      "side": 1,
      "message": "Can you move these changes to a separate CL? They seem unrelated to this CL. Also, this CL is already very large and this file often has merge conflicts.",
      "range": {
        "startLine": 4196,
        "startChar": 0,
        "endLine": 4198,
        "endChar": 298
      },
      "revId": "111d5ab184cb105928fcdc20e13c23e092ce04c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f78f49d3_aec8f4d9",
        "filename": "api/system-current.txt",
        "patchSetId": 23
      },
      "lineNbr": 4440,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2019-12-16T15:52:03Z",
      "side": 1,
      "message": "Ditto. Do these API changes need to be in this CL? Otherwise, consider doing them in a follow-up change that only unhides the API.",
      "range": {
        "startLine": 4440,
        "startChar": 0,
        "endLine": 4440,
        "endChar": 33
      },
      "revId": "111d5ab184cb105928fcdc20e13c23e092ce04c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2d72d64d_b20f9299",
        "filename": "core/java/android/app/SystemServiceRegistry.java",
        "patchSetId": 23
      },
      "lineNbr": 348,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2019-12-16T15:52:03Z",
      "side": 1,
      "message": "This getService call will fail null soon after boot, while the service is being initialized, right? What happens when it does? Will the system crash? Will an app calling getSystemService(TETHERING_SERVICE) safely get null, and then safely get a non-null pointer if it tries again some time later? I wasn\u0027t able to grasp this quickly by looking at CachedServiceFetcher.",
      "range": {
        "startLine": 348,
        "startChar": 28,
        "endLine": 348,
        "endChar": 80
      },
      "revId": "111d5ab184cb105928fcdc20e13c23e092ce04c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "df88d319_164c093c",
        "filename": "packages/Tethering/common/TetheringLib/Android.bp",
        "patchSetId": 23
      },
      "lineNbr": 61,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2019-12-16T15:52:03Z",
      "side": 1,
      "message": "If this is what we want to do, then can we just do something like:\n\n    args: metalava_framework_docs_args + \"--foo --bar\"\n\nin the droidstubs build rule below? That\u0027s what other similar targets seem to do.",
      "range": {
        "startLine": 61,
        "startChar": 3,
        "endLine": 61,
        "endChar": 71
      },
      "revId": "111d5ab184cb105928fcdc20e13c23e092ce04c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "849f56fc_8ded573e",
        "filename": "packages/Tethering/common/TetheringLib/src/android/net/TetheringManager.java",
        "patchSetId": 23
      },
      "lineNbr": 73,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2019-12-16T15:52:03Z",
      "side": 1,
      "message": "Will apps ever see these? Or will they only ever see the exceptions thrown by throwIfPermissionFailure? If apps won\u0027t ever see these, then they can probably be @hide instead of @SystemApi.",
      "range": {
        "startLine": 71,
        "startChar": 0,
        "endLine": 73,
        "endChar": 0
      },
      "revId": "111d5ab184cb105928fcdc20e13c23e092ce04c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a15d2d5a_df8bb987",
        "filename": "packages/Tethering/common/TetheringLib/src/android/net/TetheringManager.java",
        "patchSetId": 23
      },
      "lineNbr": 96,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2019-12-16T15:52:03Z",
      "side": 1,
      "message": "This class doesn\u0027t seem very useful. Why not just declare it inline below? I think you can just do:\n\n    private final IntResultListener mListener \u003d new IntResultListener.Stub() {\n        ...\n\nAlso, public non-final members should be avoided if possible. (Might be OK here since this class is so simple.)",
      "range": {
        "startLine": 91,
        "startChar": 0,
        "endLine": 96,
        "endChar": 5
      },
      "revId": "111d5ab184cb105928fcdc20e13c23e092ce04c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0e89c235_3642c733",
        "filename": "packages/Tethering/common/TetheringLib/src/android/net/TetheringManager.java",
        "patchSetId": 23
      },
      "lineNbr": 102,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2019-12-16T15:52:03Z",
      "side": 1,
      "message": "I\u0027m not a fan of this name, because this class doesn\u0027t just wait - it also runs requests. RequestDispatcher?",
      "range": {
        "startLine": 102,
        "startChar": 18,
        "endLine": 102,
        "endChar": 29
      },
      "revId": "111d5ab184cb105928fcdc20e13c23e092ce04c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0eb5bbef_4d223df0",
        "filename": "packages/Tethering/common/TetheringLib/src/android/net/TetheringManager.java",
        "patchSetId": 23
      },
      "lineNbr": 147,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2019-12-16T15:52:03Z",
      "side": 1,
      "message": "This seems worse than it was before (in patchset 20) because it doesn\u0027t contain the original permission name any more.",
      "range": {
        "startLine": 144,
        "startChar": 0,
        "endLine": 147,
        "endChar": 78
      },
      "revId": "111d5ab184cb105928fcdc20e13c23e092ce04c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1f896c2e_2afb90bd",
        "filename": "packages/Tethering/common/TetheringLib/src/android/net/TetheringManager.java",
        "patchSetId": 23
      },
      "lineNbr": 152,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2019-12-16T15:52:03Z",
      "side": 1,
      "message": "Why is this called mPermissionFailure? Won\u0027t onCallbackStopped ever be called with any other errorCode that\u0027s not a permission failure? Should this be called something more generic like mError or mLastError?",
      "range": {
        "startLine": 152,
        "startChar": 20,
        "endLine": 152,
        "endChar": 38
      },
      "revId": "111d5ab184cb105928fcdc20e13c23e092ce04c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c13c2ae1_79481e30",
        "filename": "packages/Tethering/common/TetheringLib/src/android/net/TetheringManager.java",
        "patchSetId": 23
      },
      "lineNbr": 321,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2019-12-16T15:52:03Z",
      "side": 1,
      "message": "IllegalStateException?",
      "range": {
        "startLine": 321,
        "startChar": 22,
        "endLine": 321,
        "endChar": 38
      },
      "revId": "111d5ab184cb105928fcdc20e13c23e092ce04c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "58901df2_272342db",
        "filename": "packages/Tethering/common/TetheringLib/src/android/net/TetheringManager.java",
        "patchSetId": 23
      },
      "lineNbr": 329,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2019-12-16T15:52:03Z",
      "side": 1,
      "message": "How about if it is registered when tethering does have an upstream? Will onUpstreamChanged be called immediately? Please document.",
      "range": {
        "startLine": 329,
        "startChar": 27,
        "endLine": 329,
        "endChar": 28
      },
      "revId": "111d5ab184cb105928fcdc20e13c23e092ce04c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "69827d6f_63860bae",
        "filename": "packages/Tethering/common/TetheringLib/src/android/net/TetheringManager.java",
        "patchSetId": 23
      },
      "lineNbr": 375,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2019-12-16T15:52:03Z",
      "side": 1,
      "message": "IllegalStateException?",
      "range": {
        "startLine": 375,
        "startChar": 26,
        "endLine": 375,
        "endChar": 42
      },
      "revId": "111d5ab184cb105928fcdc20e13c23e092ce04c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "972827ec_4d85e0fd",
        "filename": "packages/Tethering/src/com/android/server/connectivity/tethering/TetheringService.java",
        "patchSetId": 23
      },
      "lineNbr": 285,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2019-12-16T15:52:03Z",
      "side": 1,
      "message": "Suggest unindenting.\n\n    if (mTethering.isTetherProvisioningRequired()) {\n        return false;\n    }\n\n    int uid \u003d ...;\n    ...",
      "range": {
        "startLine": 285,
        "startChar": 0,
        "endLine": 285,
        "endChar": 57
      },
      "revId": "111d5ab184cb105928fcdc20e13c23e092ce04c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cc1fddfc_482e8848",
        "filename": "packages/Tethering/src/com/android/server/connectivity/tethering/TetheringService.java",
        "patchSetId": 23
      },
      "lineNbr": 289,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2019-12-16T15:52:03Z",
      "side": 1,
      "message": "Does the networkstack process need any special permissions to call this method?",
      "range": {
        "startLine": 289,
        "startChar": 25,
        "endLine": 289,
        "endChar": 59
      },
      "revId": "111d5ab184cb105928fcdc20e13c23e092ce04c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}