{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "4526e116_a3ecfbb3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1729155
      },
      "writtenOn": "2020-11-24T17:40:22Z",
      "side": 1,
      "message": "LGTM from Bluetooth perspective that we need such API to allow non BatteryStats Service log the detailed wakeup reason. ",
      "revId": "d66d04f86676295511b3e1d4558419a37b8476f1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "71d8c353_62c82a03",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1241955
      },
      "writtenOn": "2020-11-25T06:28:11Z",
      "side": 1,
      "message": "Would it be possible to get more information about exactly how this will be used and what the purpose is?\n\nWithout knowing that, it seems like this will corrupt the collection of wakeup data.  BSS already collects data from the kernel for each kernel resume, so if some other entity (e.g. BT) decides to log additional wakeup reasons for those same wakeups, suddenly we\u0027re going to have more wakeup reasons than wakeups, and that\u0027s likely to cause problems with troubleshooting battery issues.\n\n(I presume this is part of BTAA, and I\u0027m excited to see the improvements from that... I\u0027m just curious about all of the follow-on ramifications of this specific change.)",
      "revId": "d66d04f86676295511b3e1d4558419a37b8476f1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a2425b36_cee7957e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1003801
      },
      "writtenOn": "2020-11-30T22:42:44Z",
      "side": 1,
      "message": "@dmitri, ptal?",
      "revId": "d66d04f86676295511b3e1d4558419a37b8476f1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c227f16f_36e2716a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1546552
      },
      "writtenOn": "2020-12-08T00:20:49Z",
      "side": 1,
      "message": "\u003e Would it be possible to get more information about exactly how this will be used and what the purpose is?\n\u003e \n\u003e Without knowing that, it seems like this will corrupt the collection of wakeup data.  BSS already collects data from the kernel for each kernel resume, so if some other entity (e.g. BT) decides to log additional wakeup reasons for those same wakeups, suddenly we\u0027re going to have more wakeup reasons than wakeups, and that\u0027s likely to cause problems with troubleshooting battery issues.\n\u003e \n\u003e (I presume this is part of BTAA, and I\u0027m excited to see the improvements from that... I\u0027m just curious about all of the follow-on ramifications of this specific change.)\n\nYeah absolutely! Our goal is to use this to understand the wakeup reasons a bit better. As part of the power attribution project, we want to be able to note what bluetooth-related reason caused the wakeup and what bluetooth device it corresponded to. Currently, wakeup reasons for bluetooth tend to just be a generic message (e.g. for the qualcomm bluetooth kernel, the wakeup reason is hs_uart_wakeup). We have absolutely no problem with keeping that in place and appending our string of bluetooth activity + device address to the kernel provided wakeup reason. The primary use case will be to analyze bug reports for power-related issues and identify which device is causing higher than normal battery drain.\n\nWe\u0027re not trying to break the 1:1 relationship between a wakeup and the reason, so if you have any guidance on how we could best achieve this, that would be great!",
      "parentUuid": "71d8c353_62c82a03",
      "revId": "d66d04f86676295511b3e1d4558419a37b8476f1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4886ad1a_ba5d7ee8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1241955
      },
      "writtenOn": "2020-12-08T01:11:59Z",
      "side": 1,
      "message": "Off the cuff, an API like appendWakeupDetails() rather than kind of overloading notifyWakeupReason() seems preferable.  But based on the exchange w/ Dmitri, I\u0027m wondering if I misunderstood how this patchset will affect the data.\n\nWould it be possible to get a bugreport where this change and corresponding BT changes are both running and the BatteryStats data shows what the consequences of this CL will actually look like?",
      "parentUuid": "c227f16f_36e2716a",
      "revId": "d66d04f86676295511b3e1d4558419a37b8476f1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "45365591_192ec7eb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1546552
      },
      "writtenOn": "2020-12-08T20:07:49Z",
      "side": 1,
      "message": "Ah so for context on that, I cherry-picked this CL to internal master and got feedback that noteWakeupReasonLocked would override the kernel-provided wakeup reason (please correct me if that\u0027s incorrect). I didn\u0027t know this myself (I originally thought it would create an additional wakeup entry) and that\u0027s why I was hoping to get some guidance on how to proceed as i\u0027m not too familiar with BatteryStats. I\u0027m open to making any changes necessary to make sure we avoid race conditions and avoid possibly overwriting anything we may want to keep.",
      "parentUuid": "4886ad1a_ba5d7ee8",
      "revId": "d66d04f86676295511b3e1d4558419a37b8476f1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fec21844_70be45b7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1241955
      },
      "writtenOn": "2020-12-08T20:26:09Z",
      "side": 1,
      "message": "(Sorry, I wrote this up yesterday and apparently didn\u0027t post it.  Reply to your latest comment is after the horizontal line)\n\nAt the very least, it does look like both reasons will get logged separately to statsd no matter what happens in the BatteryStats history timeline.  What happens internal to BatteryStats and whether the second reason overwrites the first or is registered as another reason after the first is a bit Byzantine, but it _looks_ like it may actually depend partially on how much time elapses between the kernel reason being logged and the augmented BT reason coming in, and since that timing can\u0027t be guaranteed, I think the outcome might be non-deterministic?\n\nAlso, has PWG reviewed this proposal?  I\u0027m wondering because any caller of this new API can essentially send any arbitrary string to Westworld for uploading as a wake reason, and while they may be okay with that thanks to the PII removal mechanisms in place for Westworld, they might at least be interested in hearing about it.\n\n----\n\nI can\u0027t claim to be certain what the code will do; it\u0027s pretty rough to follow without investing a large chunk of time.  But it at least looks to me like the behavior will depend on how much time elapses between the kernel wakeup reason being captured and the BT reason coming in, which - since you can\u0027t do anything to guarantee that timing - seems to suggest non-deterministic behavior?  Again, I\u0027m not certain.\n\nThe race condition is tricky.  Without grabbing a wakelock to prevent it from occurring (which would be a bad idea), I don\u0027t know that you can even guarantee that there isn\u0027t a second suspend/resume cycle before your process registers the additional wakeup information for the first one, meaning you could end up overwriting or augmenting (whichever it is that actually happens) a non-BT wakeup with your additional info.\n\nMaybe I\u0027m overthinking it; that does happen sometimes.  But the more we talk about it, the more difficult it seems like it would be for this approach to work seamlessly.  Maybe somebody who understands BatteryStats better than me can chime in and offer some assurance that the issues I\u0027m concerned about aren\u0027t real.\n\nIf not, there might be a different (much more involved, but perhaps more effective and less disruptive) way to tackle this:\n* Change the wakeup callback from SuspendControlService (again) to add the _time_ of the wakeup (in elapsed realtime) in addition to the reason strings from the kernel and the success/failure of the suspend\n* Add support in BatteryStats for a new kind of \"wake detail\" data instead of trying to overload the existing wake reasons\n* When a process calls in to provide a \"wake detail\", it also provides the timestamp (from the SCS callback) of the wakeup that the detail applies to, so BatteryStats can place it in the right part of its history\n* Update tooling to use the new history entry type",
      "parentUuid": "4886ad1a_ba5d7ee8",
      "revId": "d66d04f86676295511b3e1d4558419a37b8476f1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "da8220b7_2f980d72",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1546552
      },
      "writtenOn": "2020-12-08T23:35:13Z",
      "side": 1,
      "message": "I don\u0027t believe we\u0027ve had this reviewed by PWG, but michaelfsun@ please correct that if you\u0027ve touched base with them. I completely understand the potential ramifications of this API.\n\nI agree that the race condition is a tricky (and potentially unsolvable) situation. This mechanism only works if another wakeup does not occur before we are able to propagate our more detailed wakeup reason. To my understanding, logging to BatteryStats would be the only way to get the timeline visualization offered by existing frontend tools such as volta and transponder. Otherwise, we would consider other logging mechanisms.\n\nI do think the approach you provided would work pretty well, but I am not sure if tooling is going to be updated in the short term to support any new functionality (based on my conversation with the transponder team). That\u0027s why I\u0027ve been hesitant to make any changes that would require the frontend tools to be updated.",
      "parentUuid": "fec21844_70be45b7",
      "revId": "d66d04f86676295511b3e1d4558419a37b8476f1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ee00f74d_56b396e4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1241955
      },
      "writtenOn": "2020-12-09T00:05:19Z",
      "side": 1,
      "message": "Yeah, that\u0027s a fair point about the tooling.  But Thierry (my L1-and-sometimes-L2 manager) has been working to try to get all of the visualization support brought up in web-abt as the official home, since _both_ Historian and Transponder Front End are left without support roadmaps at this point.  So hopefully there will be an actual, supported path forward, even if it isn\u0027t either of the two tools primarily used today.",
      "parentUuid": "da8220b7_2f980d72",
      "revId": "d66d04f86676295511b3e1d4558419a37b8476f1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c575ae91_87b25a57",
        "filename": "core/java/com/android/internal/app/IBatteryStats.aidl",
        "patchSetId": 2
      },
      "lineNbr": 165,
      "author": {
        "id": 1003473
      },
      "writtenOn": "2020-12-01T00:18:37Z",
      "side": 1,
      "message": "What is the difference between this new method and noteWakeUp(reason)?",
      "range": {
        "startLine": 165,
        "startChar": 9,
        "endLine": 165,
        "endChar": 25
      },
      "revId": "d66d04f86676295511b3e1d4558419a37b8476f1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0745fa42_19e19c00",
        "filename": "core/java/com/android/internal/app/IBatteryStats.aidl",
        "patchSetId": 2
      },
      "lineNbr": 165,
      "author": {
        "id": 1546552
      },
      "writtenOn": "2020-12-03T18:51:15Z",
      "side": 1,
      "message": "My understanding was that noteWakeUp creates a new wakeup entry while noteWakeupReason just overwrites the wakeup reason in an existing entry.",
      "parentUuid": "c575ae91_87b25a57",
      "range": {
        "startLine": 165,
        "startChar": 9,
        "endLine": 165,
        "endChar": 25
      },
      "revId": "d66d04f86676295511b3e1d4558419a37b8476f1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dc1d7497_8d3b4f76",
        "filename": "core/java/com/android/internal/app/IBatteryStats.aidl",
        "patchSetId": 2
      },
      "lineNbr": 165,
      "author": {
        "id": 1003473
      },
      "writtenOn": "2020-12-03T19:57:14Z",
      "side": 1,
      "message": "Do you mean that it overwrites the wakeup reason for the most recent wakeup?  Is there a possibility of a race?",
      "parentUuid": "0745fa42_19e19c00",
      "range": {
        "startLine": 165,
        "startChar": 9,
        "endLine": 165,
        "endChar": 25
      },
      "revId": "d66d04f86676295511b3e1d4558419a37b8476f1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}