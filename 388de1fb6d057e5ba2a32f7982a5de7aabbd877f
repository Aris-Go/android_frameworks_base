{
  "comments": [
    {
      "key": {
        "uuid": "c68498f8_452b5593",
        "filename": "core/java/android/net/ConnectivityDiagnosticsManager.java",
        "patchSetId": 23
      },
      "lineNbr": 507,
      "author": {
        "id": 1015428
      },
      "writtenOn": "2020-01-18T07:54:55Z",
      "side": 1,
      "message": "I think you should dispense with the synchronized block in the following manner :\n\n  binder \u003d new CDB()\n  if (null !\u003d sCallbacks.putIfAbsent(callback, binder)) throw();\n  try {\n    register\n  }\n\nThat does mean in the rare case apps try to register the same callback a second time, the code will create a Binder object and throw it away to be garbage collected. I don\u0027t think it matters, but you can only call putIfAbsent after testing if the object is not already there or just using computeIfAbsent :\n\n  if (null !\u003d sCallbacks.computeIfAbsent(callback, (k) -\u003e new Binder(callback, k))) throw();\n  try { register }\n\n...in which case the Binder object only gets thrown away in the losing thread of a race condition where 2 threads try to do this at the same time. This is not very costly and it\u0027s a very rare event, so it\u0027s likely it\u0027s a lot cheaper than to lock always.",
      "range": {
        "startLine": 507,
        "startChar": 8,
        "endLine": 507,
        "endChar": 20
      },
      "revId": "388de1fb6d057e5ba2a32f7982a5de7aabbd877f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "76e75242_d72f3b37",
        "filename": "core/java/android/net/ConnectivityDiagnosticsManager.java",
        "patchSetId": 23
      },
      "lineNbr": 507,
      "author": {
        "id": 1463964
      },
      "writtenOn": "2020-01-21T01:06:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c68498f8_452b5593",
      "range": {
        "startLine": 507,
        "startChar": 8,
        "endLine": 507,
        "endChar": 20
      },
      "revId": "388de1fb6d057e5ba2a32f7982a5de7aabbd877f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ae8a8f26_daa44c78",
        "filename": "services/core/java/com/android/server/ConnectivityService.java",
        "patchSetId": 23
      },
      "lineNbr": 640,
      "author": {
        "id": 1015428
      },
      "writtenOn": "2020-01-18T07:54:55Z",
      "side": 1,
      "message": "① Have you considered using android.os.RemoteCallbackList ? (not sure it\u0027s best as I don\u0027t know this class very well, but it looks like a good fit and might (maybe) let you completely remove ConnectivityDiagnosticsCallbackInfo)\n② Can this live inside in one of the ConnectivityDiagnostics classes ? If that\u0027s reasonable it should provide better encapsulation.",
      "range": {
        "startLine": 640,
        "startChar": 12,
        "endLine": 640,
        "endChar": 45
      },
      "revId": "388de1fb6d057e5ba2a32f7982a5de7aabbd877f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3451eb8d_df981b1a",
        "filename": "services/core/java/com/android/server/ConnectivityService.java",
        "patchSetId": 23
      },
      "lineNbr": 640,
      "author": {
        "id": 1463964
      },
      "writtenOn": "2020-01-21T01:06:49Z",
      "side": 1,
      "message": "① I wasn\u0027t aware of this, but on an initial glance I\u0027m not sure this is what we want. It would take care of unregistering the Callback on Binder death, but would not free up its allocated resources (the NetworkRequestInfo created for it).\n\n② This can be moved inside the ConnectivityDiagnosticsHandler. However, my understanding of the general abstraction here is that Handlers are supposed to handle/process events that occur, and the Service is supposed to manage the overall state of the service. If this is accurate, moving this Map to the Handler breaks that abstraction, right?",
      "parentUuid": "ae8a8f26_daa44c78",
      "range": {
        "startLine": 640,
        "startChar": 12,
        "endLine": 640,
        "endChar": 45
      },
      "revId": "388de1fb6d057e5ba2a32f7982a5de7aabbd877f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "09e0c706_c76f67d4",
        "filename": "services/core/java/com/android/server/ConnectivityService.java",
        "patchSetId": 23
      },
      "lineNbr": 640,
      "author": {
        "id": 1015428
      },
      "writtenOn": "2020-01-21T17:12:12Z",
      "side": 1,
      "message": "Yes ; I think the better state of affairs in the end is to have a ConnectivityDiagnosticsTracker class or similarly named, and that class would embark this member as well as the handler and all the logic that goes with diagnostics.\n\nThe fact that it\u0027s all in CS.java is hurting more and more \u003e_\u003c",
      "parentUuid": "3451eb8d_df981b1a",
      "range": {
        "startLine": 640,
        "startChar": 12,
        "endLine": 640,
        "endChar": 45
      },
      "revId": "388de1fb6d057e5ba2a32f7982a5de7aabbd877f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e44049a1_e54734c7",
        "filename": "services/core/java/com/android/server/ConnectivityService.java",
        "patchSetId": 23
      },
      "lineNbr": 640,
      "author": {
        "id": 1463964
      },
      "writtenOn": "2020-01-22T22:44:31Z",
      "side": 1,
      "message": "b/147816404 has been filed to track moving this out of ConnectivityService",
      "parentUuid": "09e0c706_c76f67d4",
      "range": {
        "startLine": 640,
        "startChar": 12,
        "endLine": 640,
        "endChar": 45
      },
      "revId": "388de1fb6d057e5ba2a32f7982a5de7aabbd877f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6d029289_5960fc7d",
        "filename": "services/core/java/com/android/server/ConnectivityService.java",
        "patchSetId": 23
      },
      "lineNbr": 5061,
      "author": {
        "id": 1015428
      },
      "writtenOn": "2020-01-18T07:54:55Z",
      "side": 1,
      "message": "What are the semantics of this with respect to the uid field in the NetworkCapabilities stored in the NetworkRequest ? See restrictRequestUidsForCaller.",
      "range": {
        "startLine": 5061,
        "startChar": 49,
        "endLine": 5061,
        "endChar": 52
      },
      "revId": "388de1fb6d057e5ba2a32f7982a5de7aabbd877f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "12b4c0c2_ad4b1a4c",
        "filename": "services/core/java/com/android/server/ConnectivityService.java",
        "patchSetId": 23
      },
      "lineNbr": 5061,
      "author": {
        "id": 1463964
      },
      "writtenOn": "2020-01-21T01:06:49Z",
      "side": 1,
      "message": "Could you please elaborate on this comment?\n\nRemoved this parameter to only take NetworkRequest, since we don\u0027t test for mismatched UIDs now.",
      "parentUuid": "6d029289_5960fc7d",
      "range": {
        "startLine": 5061,
        "startChar": 49,
        "endLine": 5061,
        "endChar": 52
      },
      "revId": "388de1fb6d057e5ba2a32f7982a5de7aabbd877f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "34444337_c25fb5c9",
        "filename": "services/core/java/com/android/server/ConnectivityService.java",
        "patchSetId": 23
      },
      "lineNbr": 5061,
      "author": {
        "id": 1015428
      },
      "writtenOn": "2020-01-21T17:12:12Z",
      "side": 1,
      "message": "NetworkRequests already embark a UID in the form of the mUids field in NetworkCapabilities. They actually match on this (see NetworkCapabilities#satisfiedByUids). This lets the code tell in particular whether a VPN should be matched to a request.\nIn this context I was wondering whether we need this UID and when it will be different.",
      "parentUuid": "12b4c0c2_ad4b1a4c",
      "range": {
        "startLine": 5061,
        "startChar": 49,
        "endLine": 5061,
        "endChar": 52
      },
      "revId": "388de1fb6d057e5ba2a32f7982a5de7aabbd877f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b5cae9fc_3471b6f9",
        "filename": "services/core/java/com/android/server/ConnectivityService.java",
        "patchSetId": 23
      },
      "lineNbr": 5061,
      "author": {
        "id": 1463964
      },
      "writtenOn": "2020-01-22T00:45:17Z",
      "side": 1,
      "message": "Added a call to restrictRequestUidsForCaller() in the register() method.",
      "parentUuid": "34444337_c25fb5c9",
      "range": {
        "startLine": 5061,
        "startChar": 49,
        "endLine": 5061,
        "endChar": 52
      },
      "revId": "388de1fb6d057e5ba2a32f7982a5de7aabbd877f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0e6ab5e5_ae68de2a",
        "filename": "services/core/java/com/android/server/ConnectivityService.java",
        "patchSetId": 23
      },
      "lineNbr": 7256,
      "author": {
        "id": 1015428
      },
      "writtenOn": "2020-01-18T07:54:55Z",
      "side": 1,
      "message": "Can you add a TODO to move this to a different (set of) file(s) ?",
      "range": {
        "startLine": 7256,
        "startChar": 10,
        "endLine": 7256,
        "endChar": 40
      },
      "revId": "388de1fb6d057e5ba2a32f7982a5de7aabbd877f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5f39c52b_c2b32ffd",
        "filename": "services/core/java/com/android/server/ConnectivityService.java",
        "patchSetId": 23
      },
      "lineNbr": 7256,
      "author": {
        "id": 1463964
      },
      "writtenOn": "2020-01-21T01:06:49Z",
      "side": 1,
      "message": "Added a TODO.\n\nGiven that we use non-static methods to utilize pre-existing ConnectivityService functionality (the Type.LISTEN behavior discussed for handleRegisterNetworkRequest), I\u0027m not sure how feasible this is.",
      "parentUuid": "0e6ab5e5_ae68de2a",
      "range": {
        "startLine": 7256,
        "startChar": 10,
        "endLine": 7256,
        "endChar": 40
      },
      "revId": "388de1fb6d057e5ba2a32f7982a5de7aabbd877f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6bc03d02_d0fbc52e",
        "filename": "services/core/java/com/android/server/ConnectivityService.java",
        "patchSetId": 23
      },
      "lineNbr": 7256,
      "author": {
        "id": 1015428
      },
      "writtenOn": "2020-01-21T17:12:12Z",
      "side": 1,
      "message": "No I think we have to. This is going to be a large pain to maintain if it\u0027s interspersed in CS like that and I don\u0027t want to impose that to my team.\n\nI\u0027m not saying CS can have no support at all beyond the members and occasional forwarding function. But we should have much better separation in this. You can look at the patch stacks for ProxyTracker or PermissionMonitor to see how we disentangled some of this to move most of the logic to different classes. Doing this will force us to have a much cleaner surface between CS and the diagnostics code, which will also vastly help with maintenability ; in fact, the more I read this code the less I am sympathetic to the idea of checking it in before doing this work.",
      "parentUuid": "5f39c52b_c2b32ffd",
      "range": {
        "startLine": 7256,
        "startChar": 10,
        "endLine": 7256,
        "endChar": 40
      },
      "revId": "388de1fb6d057e5ba2a32f7982a5de7aabbd877f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f0234015_0acc4154",
        "filename": "services/core/java/com/android/server/ConnectivityService.java",
        "patchSetId": 23
      },
      "lineNbr": 7256,
      "author": {
        "id": 1060151
      },
      "writtenOn": "2020-01-21T18:48:37Z",
      "side": 1,
      "message": "I don\u0027t think it\u0027s fair to ask for a complete refactor of the CLs at this point, which would surely mean that this code doesn\u0027t land in R. I\u0027m open to doing something like this post-IC provided:\n\n1) we can all sit down and soberly discuss whether it\u0027s the right thing to do, rather than as an inline comment deep in a patch stack.\n2) we can figure out why this is only apparent post-design-review and very late in the code review process.\n\nSuch inefficiencies are just not something in any of our interest (including the interest of our code reviewers), so we really need to avoid them at all costs.",
      "parentUuid": "6bc03d02_d0fbc52e",
      "range": {
        "startLine": 7256,
        "startChar": 10,
        "endLine": 7256,
        "endChar": 40
      },
      "revId": "388de1fb6d057e5ba2a32f7982a5de7aabbd877f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08e13d25_87336ca3",
        "filename": "services/core/java/com/android/server/ConnectivityService.java",
        "patchSetId": 23
      },
      "lineNbr": 7256,
      "author": {
        "id": 1015428
      },
      "writtenOn": "2020-01-22T11:54:14Z",
      "side": 1,
      "message": "I was saying this in the context of this being a TODO, in response to Cody\u0027s assertion that it might not be feasible. I think it needs to happen eventually, and sooner rather than later, but I didn\u0027t mean before API complete.\n\nTo your point 2), it did come up in design review and I have the comment link to prove it : https://docs.google.com/document/d/1pBpFsnCw51lebMnvFnN45AOpv5ccVZJCk9RBYXp3DSo/edit?disco\u003dAAAAD-eM-7o : I *did* ask for that upfront on Nov.27 anticipating this issue. That doesn\u0027t change the feasibility of it at this point in time, but I like to set the record straight :)",
      "parentUuid": "f0234015_0acc4154",
      "range": {
        "startLine": 7256,
        "startChar": 10,
        "endLine": 7256,
        "endChar": 40
      },
      "revId": "388de1fb6d057e5ba2a32f7982a5de7aabbd877f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b618f661_dc71b8eb",
        "filename": "services/core/java/com/android/server/ConnectivityService.java",
        "patchSetId": 23
      },
      "lineNbr": 7328,
      "author": {
        "id": 1015428
      },
      "writtenOn": "2020-01-18T07:54:55Z",
      "side": 1,
      "message": "This has never been done with this nri right ? IIUC, the NRI has been created once, stashed in the CallbackInfo, and sent here for registration, so I don\u0027t think we need to remove it ?",
      "range": {
        "startLine": 7328,
        "startChar": 12,
        "endLine": 7328,
        "endChar": 38
      },
      "revId": "388de1fb6d057e5ba2a32f7982a5de7aabbd877f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "990fcda7_c276a9c1",
        "filename": "services/core/java/com/android/server/ConnectivityService.java",
        "patchSetId": 23
      },
      "lineNbr": 7328,
      "author": {
        "id": 1463964
      },
      "writtenOn": "2020-01-21T01:06:49Z",
      "side": 1,
      "message": "Correct. However, we do need to cleanup the NetworkRequestInfo made in registerConnectivityDiagnosticsCallback(). Creating the NetworkRequestInfo leads to the uid-NetworkRequestCount increasing, so we need to free those resources if we won\u0027t be persisting the nri.\n\nRefactored the logic used to decrement the count from registerConnectivityDiagnosticsCallback to \u0027decrementNetworkRequestPerUidCount\u0027.",
      "parentUuid": "b618f661_dc71b8eb",
      "range": {
        "startLine": 7328,
        "startChar": 12,
        "endLine": 7328,
        "endChar": 38
      },
      "revId": "388de1fb6d057e5ba2a32f7982a5de7aabbd877f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2a99a9dd_1c51ddc0",
        "filename": "tests/net/java/com/android/server/ConnectivityServiceTest.java",
        "patchSetId": 23
      },
      "lineNbr": 322,
      "author": {
        "id": 1015428
      },
      "writtenOn": "2020-01-18T07:54:55Z",
      "side": 1,
      "message": "It doesn\u0027t matter for this change but I think future tests will actually need to create their own callbacks so that they can check more things and multiple callbacks concurrently. Creating a callback in a test is also fairly easy. You may find that writing something like TestNetworkCallback for this too is advantageous.\n\nBut at this point it doesn\u0027t matter yet.",
      "range": {
        "startLine": 322,
        "startChar": 0,
        "endLine": 322,
        "endChar": 76
      },
      "revId": "388de1fb6d057e5ba2a32f7982a5de7aabbd877f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "62ce1b67_31b9cf08",
        "filename": "tests/net/java/com/android/server/ConnectivityServiceTest.java",
        "patchSetId": 23
      },
      "lineNbr": 322,
      "author": {
        "id": 1463964
      },
      "writtenOn": "2020-01-21T01:06:49Z",
      "side": 1,
      "message": "Agreed. TestNetworkCallback may make sense in the future, but for now this should suffice.",
      "parentUuid": "2a99a9dd_1c51ddc0",
      "range": {
        "startLine": 322,
        "startChar": 0,
        "endLine": 322,
        "endChar": 76
      },
      "revId": "388de1fb6d057e5ba2a32f7982a5de7aabbd877f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cff7ea1e_9a557ea5",
        "filename": "tests/net/java/com/android/server/ConnectivityServiceTest.java",
        "patchSetId": 23
      },
      "lineNbr": 6332,
      "author": {
        "id": 1015428
      },
      "writtenOn": "2020-01-18T07:54:55Z",
      "side": 1,
      "message": "I still strongly dislike how deep inside the internal implementation details of ConnectivityService this reaches. The more I think about it and the less I think this test provides net positive value ; it really tests that when an internal object is created in a very particular manner another internal object is affected in a specific way, and none of that is observable from outside. I have trouble thinking of real issues it may actually detect, but no trouble thinking of legitimate, no-visible-effects refactorings that will require this test to be updated, increasing maintenance cost.\n\nI appreciate the concern about making sure one app can\u0027t unregister a callback from another app (how they\u0027d have obtained that binder token in the first place is a good question), but if you really want to test that, I think you should do this by testing the edges of ConnectivityService, no the edges of some of its implementation detail classes.",
      "range": {
        "startLine": 6332,
        "startChar": 14,
        "endLine": 6332,
        "endChar": 32
      },
      "revId": "388de1fb6d057e5ba2a32f7982a5de7aabbd877f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "98692636_0f1b0fd5",
        "filename": "tests/net/java/com/android/server/ConnectivityServiceTest.java",
        "patchSetId": 23
      },
      "lineNbr": 6332,
      "author": {
        "id": 1463964
      },
      "writtenOn": "2020-01-21T01:06:49Z",
      "side": 1,
      "message": "Removed test.",
      "parentUuid": "cff7ea1e_9a557ea5",
      "range": {
        "startLine": 6332,
        "startChar": 14,
        "endLine": 6332,
        "endChar": 32
      },
      "revId": "388de1fb6d057e5ba2a32f7982a5de7aabbd877f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}