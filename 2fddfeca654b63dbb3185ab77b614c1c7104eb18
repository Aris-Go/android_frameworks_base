{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c4913359_01befc8e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1308504
      },
      "writtenOn": "2020-10-28T09:14:40Z",
      "side": 1,
      "message": "LGTM except for the question about make java_defaults available for apex.",
      "revId": "2fddfeca654b63dbb3185ab77b614c1c7104eb18",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cc2b10c2_f13c17f0",
        "filename": "packages/Connectivity/Android.bp",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 1308504
      },
      "writtenOn": "2020-10-28T09:40:45Z",
      "side": 1,
      "message": "It is fine for now(on-going development), but this may have problem when building libservice-connectivity against NDK. The reason you don\u0027t statically build this is too many dependency library you also need to built it ?",
      "range": {
        "startLine": 30,
        "startChar": 8,
        "endLine": 33,
        "endChar": 22
      },
      "revId": "2fddfeca654b63dbb3185ab77b614c1c7104eb18",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d7ac80c8_bf035762",
        "filename": "packages/Connectivity/Android.bp",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 1288034
      },
      "writtenOn": "2020-10-29T07:21:47Z",
      "side": 1,
      "message": "liblog, libnativehelper are part of the NDK I think ? So that would be fine; for libnetutils, I added a comment: either move ifc_[add/del]_address to some static lib, or make all of libnetutils build against the NDK and link statically.\nI didn\u0027t fix that last part now because that would make the change even bigger.\nAdded more details in the comment.",
      "parentUuid": "cc2b10c2_f13c17f0",
      "range": {
        "startLine": 30,
        "startChar": 8,
        "endLine": 33,
        "endChar": 22
      },
      "revId": "2fddfeca654b63dbb3185ab77b614c1c7104eb18",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2e51f331_2270aa27",
        "filename": "packages/Tethering/Android.bp",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 1308504
      },
      "writtenOn": "2020-10-28T09:14:40Z",
      "side": 1,
      "message": "Why apex need to use java_defaults ? Apex just be a container that we always just include apk, jar, lib, or etc files in apex. So this default build rule don\u0027t need to available for apex, right ?",
      "range": {
        "startLine": 45,
        "startChar": 4,
        "endLine": 45,
        "endChar": 77
      },
      "revId": "2fddfeca654b63dbb3185ab77b614c1c7104eb18",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "656b7151_acb8251c",
        "filename": "packages/Tethering/Android.bp",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 1288034
      },
      "writtenOn": "2020-10-29T07:21:47Z",
      "side": 1,
      "message": "This is set here so it applies to TetheringApiCurrentLib; it seems that this defaults rule is only used by TetheringApiCurrentLib.\nMoved the apex_available to TetheringApiCurrentLib itself: this makes it slightly easier to find the clause when looking for dependencieso of the apex, if another library is added that uses the same defaults, it may want to use a different apex_available .",
      "parentUuid": "2e51f331_2270aa27",
      "range": {
        "startLine": 45,
        "startChar": 4,
        "endLine": 45,
        "endChar": 77
      },
      "revId": "2fddfeca654b63dbb3185ab77b614c1c7104eb18",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "458b3a5e_bb023c50",
        "filename": "packages/Tethering/Android.bp",
        "patchSetId": 1
      },
      "lineNbr": 112,
      "author": {
        "id": 1308504
      },
      "writtenOn": "2020-10-28T09:14:40Z",
      "side": 1,
      "message": "same question as above.",
      "range": {
        "startLine": 112,
        "startChar": 4,
        "endLine": 112,
        "endChar": 77
      },
      "revId": "2fddfeca654b63dbb3185ab77b614c1c7104eb18",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "28827fdb_b67ce6b5",
        "filename": "packages/Tethering/Android.bp",
        "patchSetId": 1
      },
      "lineNbr": 112,
      "author": {
        "id": 1288034
      },
      "writtenOn": "2020-10-29T07:21:47Z",
      "side": 1,
      "message": "This applies the rule to both Tethering and InProcessTethering; but looks like I added it to Tethering already, and InProcessTethering doesn\u0027t need the .next apex, so removing this one.",
      "parentUuid": "458b3a5e_bb023c50",
      "range": {
        "startLine": 112,
        "startChar": 4,
        "endLine": 112,
        "endChar": 77
      },
      "revId": "2fddfeca654b63dbb3185ab77b614c1c7104eb18",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}