{
  "comments": [
    {
      "key": {
        "uuid": "8434fa08_a97d4404",
        "filename": "core/java/android/net/ConnectivityDiagnosticsManager.java",
        "patchSetId": 19
      },
      "lineNbr": 544,
      "author": {
        "id": 1015428
      },
      "writtenOn": "2020-01-16T17:24:55Z",
      "side": 1,
      "message": "Yes but a list of binders in the instance of the manager is a much more natural way to achieve this I think, and it also gives you the uniqueness and can be lock-free.\n(CopyOnWriteArrayList comes to mind for its thread-safe properties, although ConcurrentHashMap is fine too).",
      "range": {
        "startLine": 543,
        "startChar": 61,
        "endLine": 544,
        "endChar": 78
      },
      "revId": "2bfdaa100443b03cd86a910e7a08658f8e350ae2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f0d8ce88_f1871f31",
        "filename": "services/core/java/com/android/server/ConnectivityService.java",
        "patchSetId": 19
      },
      "lineNbr": 546,
      "author": {
        "id": 1015428
      },
      "writtenOn": "2020-01-16T17:24:55Z",
      "side": 1,
      "message": "Then enforce that statically by making them private in ConnectivityDiagnosticsHandler. As you have your own handler the int codes don\u0027t have to share the same space as long as you always send the message with a target handler (which is normally always the case).",
      "range": {
        "startLine": 546,
        "startChar": 6,
        "endLine": 546,
        "endChar": 74
      },
      "revId": "2bfdaa100443b03cd86a910e7a08658f8e350ae2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "faad6d36_e8684978",
        "filename": "services/core/java/com/android/server/ConnectivityService.java",
        "patchSetId": 19
      },
      "lineNbr": 5067,
      "author": {
        "id": 1015428
      },
      "writtenOn": "2020-01-16T17:24:55Z",
      "side": 1,
      "message": "What type are these going to be ? Currently there are four valid types : LISTEN, TRACK_DEFAULT, REQUEST and BACKGROUND_REQUEST, and I don\u0027t think any of them is appropriate here.",
      "range": {
        "startLine": 5067,
        "startChar": 12,
        "endLine": 5067,
        "endChar": 39
      },
      "revId": "2bfdaa100443b03cd86a910e7a08658f8e350ae2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "32996902_8b64184f",
        "filename": "services/core/java/com/android/server/ConnectivityService.java",
        "patchSetId": 19
      },
      "lineNbr": 5073,
      "author": {
        "id": 1015428
      },
      "writtenOn": "2020-01-16T17:24:55Z",
      "side": 1,
      "message": "This doesn\u0027t make sense for your new requests because you\u0027re not adding them to mUidToNetworkRequestCount. Of course I\u0027m writing the comment on this new code but what you\u0027re really using is not this, it\u0027s the others constructors for NRI. Other indicators that this is not what you need is the fact that mPendingIntent, mPendingIntentSent and importantly mSatisfier make no sense at all for your use case.\n\nI think this needs some more thought. Either NRI is not what you need, or it needs to be refactored to also fit your use case well. Maybe you should have a different abstraction that\u0027s completely local to the connectivity diagnostics part of the code. (I\u0027m not opposed to you reusing this, but then it should be made to fit your use case well).",
      "range": {
        "startLine": 5073,
        "startChar": 12,
        "endLine": 5073,
        "endChar": 36
      },
      "revId": "2bfdaa100443b03cd86a910e7a08658f8e350ae2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d57140b5_4eaaf885",
        "filename": "services/core/java/com/android/server/ConnectivityService.java",
        "patchSetId": 19
      },
      "lineNbr": 5074,
      "author": {
        "id": 1015428
      },
      "writtenOn": "2020-01-16T17:24:55Z",
      "side": 1,
      "message": "This is only for tests right ? Test-only code in the production code is something we should try to avoid as much as possible, and when we can\u0027t it should be marked very clearly with comments. In this case I think you should remove this and rearchitecture the tests â€“ see comments on ConnectivityServiceTests for hints on how to do this.",
      "range": {
        "startLine": 5065,
        "startChar": 8,
        "endLine": 5074,
        "endChar": 9
      },
      "revId": "2bfdaa100443b03cd86a910e7a08658f8e350ae2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "39b6824a_c7daaf69",
        "filename": "services/core/java/com/android/server/ConnectivityService.java",
        "patchSetId": 19
      },
      "lineNbr": 7260,
      "author": {
        "id": 1015428
      },
      "writtenOn": "2020-01-16T17:24:55Z",
      "side": 1,
      "message": "Handler classes must be static for fear of leaks\nhttps://www.androiddesignpatterns.com/2013/01/inner-class-handler-memory-leak.html\n\nThe linter should have told you that I expect ?\n\n(generally speaking it\u0027s pretty rare that an inner class should not be static ; thankfully it\u0027s the default in Kotlin where you need a modifier to make it inner)",
      "range": {
        "startLine": 7260,
        "startChar": 4,
        "endLine": 7260,
        "endChar": 9
      },
      "revId": "2bfdaa100443b03cd86a910e7a08658f8e350ae2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "23c1a70e_4053d044",
        "filename": "services/core/java/com/android/server/ConnectivityService.java",
        "patchSetId": 19
      },
      "lineNbr": 7260,
      "author": {
        "id": 1015428
      },
      "writtenOn": "2020-01-16T17:24:55Z",
      "side": 1,
      "message": "Consider exporting this (and the handle* functions and all your logic really) to a separate file/files. We don\u0027t have anything that\u0027s very similar to what you\u0027re trying to do here mostly because those classes have been exported later, but you can take a look at ProxyTracker or MultipathPolicyTracker or PermissionMonitor for some of those satellite classes. Luckily what you\u0027re trying to do here is a lot less intricated with CS and you should be able to have a very well separated implementation, with minimal forwarding methods in CS and all the logic tidily arranged in your file.\n\n(it doesn\u0027t have to be in this patch, you can make followups that will move stuff later)",
      "range": {
        "startLine": 7260,
        "startChar": 10,
        "endLine": 7260,
        "endChar": 40
      },
      "revId": "2bfdaa100443b03cd86a910e7a08658f8e350ae2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "01ba87de_30e7cc19",
        "filename": "services/core/java/com/android/server/ConnectivityService.java",
        "patchSetId": 19
      },
      "lineNbr": 7269,
      "author": {
        "id": 1015428
      },
      "writtenOn": "2020-01-16T17:24:55Z",
      "side": 1,
      "message": "What you wrote is fine but you can afford to just inline this",
      "range": {
        "startLine": 7269,
        "startChar": 62,
        "endLine": 7269,
        "endChar": 68
      },
      "revId": "2bfdaa100443b03cd86a910e7a08658f8e350ae2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8d2fac6c_5032b04e",
        "filename": "services/core/java/com/android/server/ConnectivityService.java",
        "patchSetId": 19
      },
      "lineNbr": 7322,
      "author": {
        "id": 1015428
      },
      "writtenOn": "2020-01-16T17:24:55Z",
      "side": 1,
      "message": "When a request is registered like this the system will send messages to its Messenger (it won\u0027t try to bring up the network because you\u0027ve made it Type.LISTEN in l.7360) and I predict you\u0027ll crash the system server with NPE in l.6190 whenever a network satisfies one of these requests and the system tries to send messages to the messenger you didn\u0027t initialize.\n\nI expect you tried to build an app that files requests to try your API ; do you have the source to that somewhere ?",
      "range": {
        "startLine": 7322,
        "startChar": 8,
        "endLine": 7322,
        "endChar": 36
      },
      "revId": "2bfdaa100443b03cd86a910e7a08658f8e350ae2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b6f0d930_a782ee4c",
        "filename": "services/core/java/com/android/server/ConnectivityService.java",
        "patchSetId": 19
      },
      "lineNbr": 7358,
      "author": {
        "id": 1015428
      },
      "writtenOn": "2020-01-16T17:24:55Z",
      "side": 1,
      "message": "As this is a completely new API, can we refuse completely using legacy types ? You can just throw in the face of the app from here if the type is not TYPE_NONE, with an appropriate error message saying \"ConnectivityManager.TYPE_* are deprecated and not supported in connectivity diagnostics. Please use NetworkCapabilities instead.\" or some better wording.",
      "range": {
        "startLine": 7358,
        "startChar": 0,
        "endLine": 7358,
        "endChar": 43
      },
      "revId": "2bfdaa100443b03cd86a910e7a08658f8e350ae2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1504f661_ff5af32f",
        "filename": "services/core/java/com/android/server/ConnectivityService.java",
        "patchSetId": 19
      },
      "lineNbr": 7364,
      "author": {
        "id": 1015428
      },
      "writtenOn": "2020-01-16T17:24:55Z",
      "side": 1,
      "message": "So here I\u0027m going to call to go/avoidwe because I think it\u0027s ambiguous",
      "range": {
        "startLine": 7364,
        "startChar": 66,
        "endLine": 7364,
        "endChar": 68
      },
      "revId": "2bfdaa100443b03cd86a910e7a08658f8e350ae2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3c96a464_2858a075",
        "filename": "tests/net/java/android/net/ConnectivityDiagnosticsManagerTest.java",
        "patchSetId": 19
      },
      "lineNbr": 293,
      "author": {
        "id": 1015428
      },
      "writtenOn": "2020-01-16T17:24:55Z",
      "side": 1,
      "message": "Even if we adopted your mutable executor-based style, this is testing a very internal implementation detail and certainly not observable behavior. Of course in unit tests it\u0027s always a tradeoff, but here you\u0027re testing something extremely internal and you have to make the member @VisibleForTesting for that.\n\nPersonally I think just removing this is okay and the following line is enough to appropriately test this at this stage of the implementation.",
      "range": {
        "startLine": 293,
        "startChar": 25,
        "endLine": 293,
        "endChar": 34
      },
      "revId": "2bfdaa100443b03cd86a910e7a08658f8e350ae2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "31ea5994_82d4a143",
        "filename": "tests/net/java/com/android/server/ConnectivityServiceTest.java",
        "patchSetId": 19
      },
      "lineNbr": 6263,
      "author": {
        "id": 1015428
      },
      "writtenOn": "2020-01-16T17:24:55Z",
      "side": 1,
      "message": "This is not very close to a real scenario. Take a look at how other tests in this file proceed with callbacks : it\u0027s more realistic and simpler, it needs less access to the internals of ConnectivityService, and it doesn\u0027t require any test-only code in the production codebase.\n\n(the drawback is how much instrumentation we had to build, but that instrumentation mostly is already there for you now ; also take a look at how the TestCallback class works and its parent classes, there is pretty great tooling there that you can reuse to test your callbacks going forward)",
      "range": {
        "startLine": 6263,
        "startChar": 17,
        "endLine": 6263,
        "endChar": 56
      },
      "revId": "2bfdaa100443b03cd86a910e7a08658f8e350ae2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}