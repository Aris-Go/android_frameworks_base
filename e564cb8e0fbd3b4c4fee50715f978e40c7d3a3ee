{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "538058ad_37a2021b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1010103
      },
      "writtenOn": "2023-10-19T14:57:49Z",
      "side": 1,
      "message": "Is the desire to increase or decrease the size and can you elaborate a bit on why? These type of tuning knobs didn\u0027t age well previously so I\u0027m not super excited about adding some back (lots of people just blindly copy/pasted values from previous generations, not updating for newer screen resolutions, etc...)",
      "revId": "e564cb8e0fbd3b4c4fee50715f978e40c7d3a3ee",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b18f45d6_5329e014",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 2005646
      },
      "writtenOn": "2023-10-19T23:40:09Z",
      "side": 1,
      "message": "At Meta we used this patch to _decrease_ the cache size, in order to reduce the memory footprint of some internal Android apps running on VR headsets. These apps get composited onto _small_, low-density virtual displays, and the underlying `Surface` then gets rendered in VR as a 2D panel.\n\nIIRC `mMaxGpuFontAtlasBytes` determines the size of each atlas texture allocated by `GlDrawOpAtlas` in Skia (`fGlyphCacheTextureMaximumBytes`), and this value is set by hwui based on the resolution of the built-in display (which is way bigger than the virtual displays we\u0027re using). In practice I believe we ended up with a 2048x2048 A8 atlas texture for text, and a 2048x1024 RGBA texture for emojis -- both larger than necessary, so reducing `mMaxGpuFontAtlasBytes` allowed us to shave a few megabytes off the graphics memory usage of those apps.\n\nI think ideally the default cache texture size would be set based on the size of a particular display, but not sure how difficult that would be to implement. A global setting worked for our VR use case, but, granted, may not generalize to all devices.\n\nMy recollection is that Skia will allocate additional atlas textures (pages) as needed so even setting `fGlyphCacheTextureMaximumBytes` too low may be fine, but I\u0027m not sure what the performance implications of that are.",
      "parentUuid": "538058ad_37a2021b",
      "revId": "e564cb8e0fbd3b4c4fee50715f978e40c7d3a3ee",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fdc9bf7b_8fe9f20f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1010103
      },
      "writtenOn": "2023-10-20T01:05:12Z",
      "side": 1,
      "message": "Ah. There\u0027s now the `initialMaxSurfaceAreaScale` in MemoryPolicy which I think might be the knob you\u0027re looking for then: https://cs.android.com/android/platform/superproject/main/+/main:frameworks/base/libs/hwui/MemoryPolicy.h;drc\u003dd55fbc09a5f49fb5a5eabdfff6badc107c3b9f96;l\u003d44\n\nThis will size the initial caches based off of default display * that scale factor, but then if we ever are asked to render to something larger we will re-configure the cache limits to account for that new size ( https://cs.android.com/android/platform/superproject/main/+/main:frameworks/base/libs/hwui/renderthread/CacheManager.cpp;drc\u003dd55fbc09a5f49fb5a5eabdfff6badc107c3b9f96;l\u003d348 )\n\nAre you able to give that a try and see if it works out? We\u0027d still need a patch to define that new memory policy or let just the initialMaxSurfaceAreaScale factor be override-able, though, but I think that fits this scenario better as it\u0027ll also then  scale all the other caches, too.",
      "parentUuid": "b18f45d6_5329e014",
      "revId": "e564cb8e0fbd3b4c4fee50715f978e40c7d3a3ee",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "05aabe25_e0e8ed7c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 2005646
      },
      "writtenOn": "2023-10-20T16:26:43Z",
      "side": 1,
      "message": "Oh, cool -- yeah, that should work! While we originally focused on the texture atlas size (since that was one of the largest GPU allocations in tested apps), scaling `mMaxSurfaceArea` seems strictly better.\n\nPerhaps this CL could be updated to allow overriding `initialMaxSurfaceAreaScale` instead, although I think one of the existing policies (`sExtremeLowRam`) might be a good fit.",
      "parentUuid": "fdc9bf7b_8fe9f20f",
      "revId": "e564cb8e0fbd3b4c4fee50715f978e40c7d3a3ee",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a343bcfe_d7f3c520",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1010103
      },
      "writtenOn": "2023-10-20T16:29:12Z",
      "side": 1,
      "message": "`sExtremeLowRam` is kind of an experiment to see how low we can push things until it breaks or a little past that point.\n\nBut maybe just adding another policy like `sQuarterRes` or something that just scales the `initialMaxSurfaceAreaScale` but leaves the rest at defaults?",
      "parentUuid": "05aabe25_e0e8ed7c",
      "revId": "e564cb8e0fbd3b4c4fee50715f978e40c7d3a3ee",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a6fcb578_a32ff60c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 2007152
      },
      "writtenOn": "2023-10-20T19:44:54Z",
      "side": 1,
      "message": "Hello John, thanks for your inputs on this. \nUpon internal discussion we have decided to give sQuarterRes memory policy a try and see if it meets the desired output. \nI will abandon this patch for now. Thanks.",
      "parentUuid": "a343bcfe_d7f3c520",
      "revId": "e564cb8e0fbd3b4c4fee50715f978e40c7d3a3ee",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}