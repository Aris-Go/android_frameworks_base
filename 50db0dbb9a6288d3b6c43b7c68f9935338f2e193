{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "215aedcd_7705db53",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 45
      },
      "lineNbr": 0,
      "author": {
        "id": 1015428
      },
      "writtenOn": "2021-01-07T08:25:24Z",
      "side": 1,
      "message": "Implementation is fine. Now taking a higher-level look at the API. It\u0027s mostly fine already.",
      "revId": "50db0dbb9a6288d3b6c43b7c68f9935338f2e193",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0d704842_9a5d10d5",
        "filename": "core/api/system-current.txt",
        "patchSetId": 45
      },
      "lineNbr": 6378,
      "author": {
        "id": 1015428
      },
      "writtenOn": "2021-01-07T08:25:24Z",
      "side": 1,
      "message": "This will make this exception a checked exception. Considering this is only thrown when the callback is already registered, most apps would need to catch it and do nothing, or declare it thrown all the way up.\n\nI think it should extend RuntimeException instead, to make it an unchecked exception.",
      "range": {
        "startLine": 6378,
        "startChar": 85,
        "endLine": 6378,
        "endChar": 94
      },
      "revId": "50db0dbb9a6288d3b6c43b7c68f9935338f2e193",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "92c4f654_057b804e",
        "filename": "core/api/system-current.txt",
        "patchSetId": 45
      },
      "lineNbr": 6378,
      "author": {
        "id": 1606087
      },
      "writtenOn": "2021-01-08T00:34:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0d704842_9a5d10d5",
      "range": {
        "startLine": 6378,
        "startChar": 85,
        "endLine": 6378,
        "endChar": 94
      },
      "revId": "50db0dbb9a6288d3b6c43b7c68f9935338f2e193",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "007542df_234750f8",
        "filename": "core/api/system-current.txt",
        "patchSetId": 45
      },
      "lineNbr": 6379,
      "author": {
        "id": 1015428
      },
      "writtenOn": "2021-01-07T08:25:24Z",
      "side": 1,
      "message": "Is there any use for clients to create an instance of this outside of tests ? If not, should this constructor be only @TestApi and not @SystemApi ?",
      "range": {
        "startLine": 6379,
        "startChar": 28,
        "endLine": 6379,
        "endChar": 60
      },
      "revId": "50db0dbb9a6288d3b6c43b7c68f9935338f2e193",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ca6602fc_000370c2",
        "filename": "core/api/system-current.txt",
        "patchSetId": 45
      },
      "lineNbr": 6379,
      "author": {
        "id": 1606087
      },
      "writtenOn": "2021-01-08T00:34:07Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "007542df_234750f8",
      "range": {
        "startLine": 6379,
        "startChar": 28,
        "endLine": 6379,
        "endChar": 60
      },
      "revId": "50db0dbb9a6288d3b6c43b7c68f9935338f2e193",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "40b3f43a_02554459",
        "filename": "core/api/system-current.txt",
        "patchSetId": 45
      },
      "lineNbr": 6382,
      "author": {
        "id": 1015428
      },
      "writtenOn": "2021-01-07T08:25:24Z",
      "side": 1,
      "message": "Sorry to only notice now but I don\u0027t think the current scheme where clients have to look at the cause to figure out what happened is a great API. Would things just be simpler with separate exceptions all inheriting from a common QosCallbackException (have the clients call instanceOf), or maybe even simply exposing the current int ? I personally favor the different exception classes, but I know opinions inside the API council vary",
      "range": {
        "startLine": 6382,
        "startChar": 21,
        "endLine": 6382,
        "endChar": 41
      },
      "revId": "50db0dbb9a6288d3b6c43b7c68f9935338f2e193",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0531c4cb_4a3fb21f",
        "filename": "core/api/system-current.txt",
        "patchSetId": 45
      },
      "lineNbr": 6382,
      "author": {
        "id": 1606087
      },
      "writtenOn": "2021-01-08T23:19:39Z",
      "side": 1,
      "message": "I totally agree with you and was never crazy about using \"cause\".  But then, I saw this:\n\n            case EX_TYPE_FILTER_NOT_SUPPORTED:\n                return new QosCallbackException(new UnsupportedOperationException(\n                        \"This device does not support the specified filter\"));\n\nAnd realized that cause makes a lot of sense since (spelling out the obvious for posterity) UnsupportedOperationException can\u0027t extend from QosCallbackException.\n\nWhat about just keeping it as-is and then seeing what the API council thinks?  In general, having prescriptive guidance for this laid out in the how-to API guide would be great.\n\n\nOh, and I don\u0027t like having just ints for causes, it just seems limiting.  eg. We may want extra properties on the exceptions in the future.",
      "parentUuid": "40b3f43a_02554459",
      "range": {
        "startLine": 6382,
        "startChar": 21,
        "endLine": 6382,
        "endChar": 41
      },
      "revId": "50db0dbb9a6288d3b6c43b7c68f9935338f2e193",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e07806da_e7e43558",
        "filename": "core/api/system-current.txt",
        "patchSetId": 45
      },
      "lineNbr": 6382,
      "author": {
        "id": 1015428
      },
      "writtenOn": "2021-01-21T12:22:19Z",
      "side": 1,
      "message": "I mean, generally speaking the cause is a great help in debugging. What I don\u0027t think is a great API here is that clients will need to look at the cause to know *what* happened. That\u0027s not how causes normally work ; the exception tells you what happened, and if applicable the cause can tell you more about why this happened.\n\nNormal client code :\n\n  try {\n    codeThatMayThrow();\n  } catch (PossibleException1 e) {\n    Log(\"Terrible thing 1 happened !\", e);\n    /* handle if possible */\n  } catch (PossibleException2 e) {\n    Log(\"Terrible thing 2 happened !\", e);\n    /* handle if possible */\n  }\n\nCode with what you have :\n\n  try {\n    codeThatMayThrow();\n  } catch (QosCallbackException e) {\n    Exception whatReallyHappened \u003d e.getCause();\n    if (whatReallyHappened instanceOf PossibleCause1) {\n      Log(\"Terrible thing 1 happened !\");\n      /* handle if possible */\n    } else if (whatReallyHappened instanceOf PossibleCause2) {\n      Log(\"Terrible thing 2 happened !\");\n      /* handle if possible */\n    }\n  }\n\nI think the normal client code is better. The key point here is that QosCallbackException doesn\u0027t tell you *what* happened : it\u0027s a category of things that may go wrong, and you happen to use the cause member to store what. I don\u0027t think that\u0027s what it\u0027s meant for.",
      "parentUuid": "0531c4cb_4a3fb21f",
      "range": {
        "startLine": 6382,
        "startChar": 21,
        "endLine": 6382,
        "endChar": 41
      },
      "revId": "50db0dbb9a6288d3b6c43b7c68f9935338f2e193",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ac79094a_41295af5",
        "filename": "core/api/system-current.txt",
        "patchSetId": 45
      },
      "lineNbr": 6387,
      "author": {
        "id": 1015428
      },
      "writtenOn": "2021-01-07T08:25:24Z",
      "side": 1,
      "message": "For the same reason it\u0027s a bit strange that this is an *inner class* of QosCallbackException",
      "range": {
        "startLine": 6387,
        "startChar": 43,
        "endLine": 6387,
        "endChar": 67
      },
      "revId": "50db0dbb9a6288d3b6c43b7c68f9935338f2e193",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "926d1509_984d3694",
        "filename": "core/api/system-current.txt",
        "patchSetId": 45
      },
      "lineNbr": 6387,
      "author": {
        "id": 1606087
      },
      "writtenOn": "2021-01-08T00:34:07Z",
      "side": 1,
      "message": "Are you sure you want me to make these non-inner classes.  It\u0027s going to add a lot of top level files to your overall package.  \n\nIt\u0027s super quick for me to do, I just want to make sure you realize that it might be really off putting later on.",
      "parentUuid": "ac79094a_41295af5",
      "range": {
        "startLine": 6387,
        "startChar": 43,
        "endLine": 6387,
        "endChar": 67
      },
      "revId": "50db0dbb9a6288d3b6c43b7c68f9935338f2e193",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3e6bd7d6_a80a09d0",
        "filename": "core/api/system-current.txt",
        "patchSetId": 45
      },
      "lineNbr": 6387,
      "author": {
        "id": 1606087
      },
      "writtenOn": "2021-01-08T23:19:39Z",
      "side": 1,
      "message": "After looking more closely, the exceptions seem pretty generic, move to the top level.",
      "parentUuid": "926d1509_984d3694",
      "range": {
        "startLine": 6387,
        "startChar": 43,
        "endLine": 6387,
        "endChar": 67
      },
      "revId": "50db0dbb9a6288d3b6c43b7c68f9935338f2e193",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7abbea8c_d259a27b",
        "filename": "core/api/system-current.txt",
        "patchSetId": 45
      },
      "lineNbr": 6418,
      "author": {
        "id": 1015428
      },
      "writtenOn": "2021-01-07T08:25:24Z",
      "side": 1,
      "message": "Likewise",
      "range": {
        "startLine": 6418,
        "startChar": 36,
        "endLine": 6418,
        "endChar": 70
      },
      "revId": "50db0dbb9a6288d3b6c43b7c68f9935338f2e193",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ced6bd22_bfabfb70",
        "filename": "core/api/system-current.txt",
        "patchSetId": 45
      },
      "lineNbr": 6418,
      "author": {
        "id": 1606087
      },
      "writtenOn": "2021-01-08T23:19:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7abbea8c_d259a27b",
      "range": {
        "startLine": 6418,
        "startChar": 36,
        "endLine": 6418,
        "endChar": 70
      },
      "revId": "50db0dbb9a6288d3b6c43b7c68f9935338f2e193",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6c04defc_89b241a1",
        "filename": "core/api/system-current.txt",
        "patchSetId": 45
      },
      "lineNbr": 6422,
      "author": {
        "id": 1015428
      },
      "writtenOn": "2021-01-07T08:25:24Z",
      "side": 1,
      "message": "Likewise",
      "range": {
        "startLine": 6422,
        "startChar": 36,
        "endLine": 6422,
        "endChar": 59
      },
      "revId": "50db0dbb9a6288d3b6c43b7c68f9935338f2e193",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a634e58a_7bea47b2",
        "filename": "core/api/system-current.txt",
        "patchSetId": 45
      },
      "lineNbr": 6422,
      "author": {
        "id": 1606087
      },
      "writtenOn": "2021-01-08T23:19:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6c04defc_89b241a1",
      "range": {
        "startLine": 6422,
        "startChar": 36,
        "endLine": 6422,
        "endChar": 59
      },
      "revId": "50db0dbb9a6288d3b6c43b7c68f9935338f2e193",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "04d1582c_d02efb78",
        "filename": "core/api/system-current.txt",
        "patchSetId": 45
      },
      "lineNbr": 10704,
      "author": {
        "id": 1015428
      },
      "writtenOn": "2021-01-07T08:25:24Z",
      "side": 1,
      "message": "Is the constructor useful for apps outside of tests ? If not can it be @TestApi ?",
      "range": {
        "startLine": 10704,
        "startChar": 16,
        "endLine": 10704,
        "endChar": 45
      },
      "revId": "50db0dbb9a6288d3b6c43b7c68f9935338f2e193",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "99336686_c1254c47",
        "filename": "core/api/system-current.txt",
        "patchSetId": 45
      },
      "lineNbr": 10704,
      "author": {
        "id": 1606087
      },
      "writtenOn": "2021-01-20T23:38:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "04d1582c_d02efb78",
      "range": {
        "startLine": 10704,
        "startChar": 16,
        "endLine": 10704,
        "endChar": 45
      },
      "revId": "50db0dbb9a6288d3b6c43b7c68f9935338f2e193",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "603301c3_cb2ba92e",
        "filename": "tests/net/java/com/android/server/ConnectivityServiceTest.java",
        "patchSetId": 45
      },
      "lineNbr": 8167,
      "author": {
        "id": 1015428
      },
      "writtenOn": "2021-01-07T08:25:24Z",
      "side": 1,
      "message": "This can now go back to being final.",
      "range": {
        "startLine": 8167,
        "startChar": 17,
        "endLine": 8167,
        "endChar": 23
      },
      "revId": "50db0dbb9a6288d3b6c43b7c68f9935338f2e193",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "811d8b48_9d3a5daa",
        "filename": "tests/net/java/com/android/server/ConnectivityServiceTest.java",
        "patchSetId": 45
      },
      "lineNbr": 8167,
      "author": {
        "id": 1606087
      },
      "writtenOn": "2021-01-20T23:38:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "603301c3_cb2ba92e",
      "range": {
        "startLine": 8167,
        "startChar": 17,
        "endLine": 8167,
        "endChar": 23
      },
      "revId": "50db0dbb9a6288d3b6c43b7c68f9935338f2e193",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}