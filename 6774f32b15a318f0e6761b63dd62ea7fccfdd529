{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "48b6e5d7_a2fc6ab8",
        "filename": "core/java/android/net/VpnTransportInfo.java",
        "patchSetId": 9
      },
      "lineNbr": 30,
      "author": {
        "id": 1015428
      },
      "writtenOn": "2021-02-05T13:55:01Z",
      "side": 1,
      "message": "For parcelable types we usually try to have tests that exercise the parceling code and make sure they are round-trip-equivalent. We also like to use our tools that count the number of fiedls to make sure that anybody who adds a field doesn\u0027t forget to parcel it (or mark it transient if it doesn\u0027t need to be parceled).",
      "range": {
        "startLine": 30,
        "startChar": 62,
        "endLine": 30,
        "endChar": 72
      },
      "revId": "6774f32b15a318f0e6761b63dd62ea7fccfdd529",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "00744da7_dae4beb4",
        "filename": "core/java/android/net/VpnTransportInfo.java",
        "patchSetId": 9
      },
      "lineNbr": 47,
      "author": {
        "id": 1015428
      },
      "writtenOn": "2021-02-05T13:55:01Z",
      "side": 1,
      "message": "You should be able to return a VpnTransportInfo here, because return values are covariant (the way I like to think about it is, you can\u0027t violate the contract of the superclass because all VpnTransportInfos will always be instances of TransportInfo). This will also be useful to anybody who knows they have an instance of VpnTransportInfo, redact it, and know for sure they get back a new instance of it but need to cast.\n\nEdit : wrote this before I read the tests where you do exactly that :D",
      "range": {
        "startLine": 47,
        "startChar": 11,
        "endLine": 47,
        "endChar": 24
      },
      "revId": "6774f32b15a318f0e6761b63dd62ea7fccfdd529",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "89bba542_0198280e",
        "filename": "packages/Connectivity/framework/src/android/net/NetworkCapabilities.java",
        "patchSetId": 9
      },
      "lineNbr": 772,
      "author": {
        "id": 1015428
      },
      "writtenOn": "2021-02-05T13:55:01Z",
      "side": 1,
      "message": "Are you sure it\u0027s okay for test networks to adopt whatever TransportInfo the client said it should have ? The shell has permission to create those networks with whatever public TransportInfo class it wants.\n\nI don\u0027t think TransportInfo ever affects matching, and if that\u0027s the case this is likely benign, but unless you have a specific use case I would suggest we reject and leave it blank.",
      "range": {
        "startLine": 772,
        "startChar": 0,
        "endLine": 772,
        "endChar": 47
      },
      "revId": "6774f32b15a318f0e6761b63dd62ea7fccfdd529",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6fb891a2_b4990400",
        "filename": "packages/Connectivity/framework/src/android/net/TransportInfo.java",
        "patchSetId": 9
      },
      "lineNbr": 77,
      "author": {
        "id": 1015428
      },
      "writtenOn": "2021-02-05T13:55:01Z",
      "side": 1,
      "message": "As is this is fairly dangerous. There are currently TransportInfo subclasses that carry sensitive information (the ones in WiFi that use makeCopy() come to mind), but without updating them, their redact() method will simply not adhere to the contract described in the comment.",
      "range": {
        "startLine": 73,
        "startChar": 0,
        "endLine": 77,
        "endChar": 5
      },
      "revId": "6774f32b15a318f0e6761b63dd62ea7fccfdd529",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7e5a722e_d23a0129",
        "filename": "services/core/java/com/android/server/ConnectivityService.java",
        "patchSetId": 9
      },
      "lineNbr": 1807,
      "author": {
        "id": 1015428
      },
      "writtenOn": "2021-02-05T13:55:01Z",
      "side": 1,
      "message": "I think here we may need to call redact() too. In particular getNetworkCapabilities() in l.1736 seems to be calling this directly, meaning the public method will not redact the TransportInfo.",
      "range": {
        "startLine": 1807,
        "startChar": 8,
        "endLine": 1807,
        "endChar": 9
      },
      "revId": "6774f32b15a318f0e6761b63dd62ea7fccfdd529",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1d1e93e8_26e99510",
        "filename": "services/core/java/com/android/server/ConnectivityService.java",
        "patchSetId": 9
      },
      "lineNbr": 8353,
      "author": {
        "id": 1015428
      },
      "writtenOn": "2021-02-05T13:55:01Z",
      "side": 1,
      "message": "IIUC, considering the change in the implementation of this function, it will mean that the VpnService app of record could call this before even when not running, while now it will crash with a SecurityException.\n\nWhile this is probably a good move in the great scheme of things, I fear we\u0027ll have backward compatibility problems. Maybe we want to make this change, but only if the caller targets S+.",
      "range": {
        "startLine": 8353,
        "startChar": 31,
        "endLine": 8353,
        "endChar": 47
      },
      "revId": "6774f32b15a318f0e6761b63dd62ea7fccfdd529",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5be48864_c8d4b743",
        "filename": "services/core/java/com/android/server/connectivity/Vpn.java",
        "patchSetId": 9
      },
      "lineNbr": 434,
      "author": {
        "id": 1015428
      },
      "writtenOn": "2021-02-05T13:55:01Z",
      "side": 1,
      "message": "Do we want to add a VpnTransportInfo with TYPE_VPN_NONE here ?",
      "range": {
        "startLine": 434,
        "startChar": 8,
        "endLine": 434,
        "endChar": 28
      },
      "revId": "6774f32b15a318f0e6761b63dd62ea7fccfdd529",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8b8aa70b_2f26409b",
        "filename": "services/core/java/com/android/server/connectivity/Vpn.java",
        "patchSetId": 9
      },
      "lineNbr": 987,
      "author": {
        "id": 1015428
      },
      "writtenOn": "2021-02-05T13:55:01Z",
      "side": 1,
      "message": "Looks like you need to update this switch, if only to avoid the wtf",
      "range": {
        "startLine": 987,
        "startChar": 12,
        "endLine": 987,
        "endChar": 18
      },
      "revId": "6774f32b15a318f0e6761b63dd62ea7fccfdd529",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e6cb27ed_ef0d4036",
        "filename": "services/core/java/com/android/server/connectivity/Vpn.java",
        "patchSetId": 9
      },
      "lineNbr": 1025,
      "author": {
        "id": 1015428
      },
      "writtenOn": "2021-02-05T13:55:01Z",
      "side": 1,
      "message": "Likewise ; I suspect this is never called for legacy VPNs (maybe that\u0027s also true of the above) but it would be better if this behaved as expected for the new type",
      "range": {
        "startLine": 1025,
        "startChar": 8,
        "endLine": 1025,
        "endChar": 14
      },
      "revId": "6774f32b15a318f0e6761b63dd62ea7fccfdd529",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}