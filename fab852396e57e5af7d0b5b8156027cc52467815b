{
  "comments": [
    {
      "key": {
        "uuid": "20e7c0fb_caf50c17",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2020-05-04T10:34:33Z",
      "side": 1,
      "message": "Hmm... but if this is the problem, shouldn\u0027t we instead fix the NetworkAgents and remove the code where CS forcefully adds NOT_SUSPENDED?",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 14,
        "endChar": 45
      },
      "revId": "fab852396e57e5af7d0b5b8156027cc52467815b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5318e7d9_0f0609c1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1015428
      },
      "writtenOn": "2020-05-07T03:58:33Z",
      "side": 1,
      "message": "It\u0027s not very well worded. The problem is really not about the transition, the problem is that the NC are now authoritative but the VPN code hasn\u0027t been updated.\n\nAn immediate translation of the Q logic would be to simply make VPNs always have the NOT_SUSPENDED capability in Vpn.java:285. I believe this is the better behavior, but it is also more dangerous because it is different (VPNs now are sometimes suspended, which Q never had).\n\nReworded the comment to clarify this is actually unrelated to the transition. I can separately pursue fixing the network agents ; most of the fixes are trivial, but there will be a fair number of them.",
      "parentUuid": "20e7c0fb_caf50c17",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 14,
        "endChar": 45
      },
      "revId": "fab852396e57e5af7d0b5b8156027cc52467815b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9f6683fe_e05b227d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1015428
      },
      "writtenOn": "2020-05-07T04:01:06Z",
      "side": 1,
      "message": "(to clarify my comment : by \"I believe this is the better behavior\", I meant I believe the behavior implemented in this patch is better than the Q behavior)",
      "parentUuid": "5318e7d9_0f0609c1",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 14,
        "endChar": 45
      },
      "revId": "fab852396e57e5af7d0b5b8156027cc52467815b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8ef7860f_01e891f0",
        "filename": "services/core/java/com/android/server/ConnectivityService.java",
        "patchSetId": 1
      },
      "lineNbr": 7105,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2020-05-04T10:34:33Z",
      "side": 1,
      "message": "Can this fix, and the test for it, be moved to another CL? I think it\u0027s fine to have this in R since it\u0027s a very minor correctness, but in case there\u0027s any fallout, we\u0027ll want something that can be bisected/reverted/... separately from the SUSPENDED fix.",
      "range": {
        "startLine": 7098,
        "startChar": 0,
        "endLine": 7105,
        "endChar": 13
      },
      "revId": "fab852396e57e5af7d0b5b8156027cc52467815b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "42deea64_4c14636b",
        "filename": "services/core/java/com/android/server/ConnectivityService.java",
        "patchSetId": 1
      },
      "lineNbr": 7105,
      "author": {
        "id": 1015428
      },
      "writtenOn": "2020-05-07T03:58:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8ef7860f_01e891f0",
      "range": {
        "startLine": 7098,
        "startChar": 0,
        "endLine": 7105,
        "endChar": 13
      },
      "revId": "fab852396e57e5af7d0b5b8156027cc52467815b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d04cad6a_771dbddb",
        "filename": "services/core/java/com/android/server/connectivity/Vpn.java",
        "patchSetId": 1
      },
      "lineNbr": 356,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2020-05-04T10:34:33Z",
      "side": 1,
      "message": "Why all here? The other capabilities are all worst-case.",
      "range": {
        "startLine": 356,
        "startChar": 50,
        "endLine": 356,
        "endChar": 53
      },
      "revId": "fab852396e57e5af7d0b5b8156027cc52467815b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d8fc707e_faea77da",
        "filename": "services/core/java/com/android/server/connectivity/Vpn.java",
        "patchSetId": 1
      },
      "lineNbr": 356,
      "author": {
        "id": 1015428
      },
      "writtenOn": "2020-05-07T03:58:33Z",
      "side": 1,
      "message": "The thinking was that a suspended network is a network where data doesn\u0027t flow at the moment, and if the VPN has multiple underlying networks not all of which are suspended data is probably flowing.\n\nThis would be different from the others :\n• a metered network is one that makes the user pay for usage : using multiple networks one of which is metered makes the user pay, making the VPN metered.\n• a roaming network is one where the billing structure don\u0027t reflect the usual, country local rules of the subscription : using multiple networks one of which has this billing structure makes the VPN roaming by that same definition.\n• a congested network is one where traffic is slowed down by the network being unusually loaded : sending on all networks means the traffic will be slowed down by that same fact, making the VPN congested.\n\nThis thinking doesn\u0027t translate as well to the bandwidth parameters, which under this should be maybe a sum, or an average or some function of the underlying networks, but not the min value we are currently taking.\n\nWell, that was the thinking anyway. I don\u0027t feel stronlgy, so changed it to behave worst-case, but if my explanation convinces you we should adopt this different logic for suspended, I\u0027ll happily revert it to the logic in this patchset.",
      "parentUuid": "d04cad6a_771dbddb",
      "range": {
        "startLine": 356,
        "startChar": 50,
        "endLine": 356,
        "endChar": 53
      },
      "revId": "fab852396e57e5af7d0b5b8156027cc52467815b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a0b75ff_2d190922",
        "filename": "services/core/java/com/android/server/connectivity/Vpn.java",
        "patchSetId": 1
      },
      "lineNbr": 356,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2020-05-08T05:22:59Z",
      "side": 1,
      "message": "That does make sense. It\u0027s effectively making the assumption that a VPN with more than one underlying network will send its traffic to the network(s) that isn\u0027t suspended, but that seems like a reasonable assumption for a VPN that is sophisticated enough to have more than one underlying network at the same time. So maybe \"all\" is actually better here.",
      "parentUuid": "d8fc707e_faea77da",
      "range": {
        "startLine": 356,
        "startChar": 50,
        "endLine": 356,
        "endChar": 53
      },
      "revId": "fab852396e57e5af7d0b5b8156027cc52467815b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}