{
  "comments": [
    {
      "key": {
        "uuid": "AAAAvX///4w\u003d",
        "filename": "core/jni/android_server_BluetoothEventLoop.cpp",
        "patchSetId": 1
      },
      "lineNbr": 567,
      "author": {
        "id": 1001002
      },
      "writtenOn": "2010-03-08T23:48:07Z",
      "side": 1,
      "message": "This has the same use-after-close race.",
      "revId": "78fe95879303e7179262380bbbdcb0394c07a8e5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAAvn///5A\u003d",
        "filename": "core/jni/android_server_BluetoothEventLoop.cpp",
        "patchSetId": 1
      },
      "lineNbr": 567,
      "author": {
        "id": 1003450
      },
      "writtenOn": "2010-03-11T14:24:48Z",
      "side": 1,
      "message": "If I follow the code correctly the controlFdR is only used from this thread in the handleAddWatchAdd() and handleWatchRemove(). An exception is in the case if something went wrong in startEventLoopNative(), but then this thread is never started.",
      "parentUuid": "AAAAvX///4w\u003d",
      "revId": "78fe95879303e7179262380bbbdcb0394c07a8e5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAAvX///44\u003d",
        "filename": "core/jni/android_server_BluetoothEventLoop.cpp",
        "patchSetId": 1
      },
      "lineNbr": 699,
      "author": {
        "id": 1001002
      },
      "writtenOn": "2010-03-08T23:48:07Z",
      "side": 1,
      "message": "This introduces a use-after-close race on the controlFdw file descriptor. dbusAddWatch() or dbusRemoveWatch() might write() to this file descriptor after its been closed. By that time this file descriptor might be valid for another socket. This type of use-after-close problem is a nightmare to debug.\n\nI think that if you set nat-\u003econtrolFdw to zero before closing the file descriptor then we should be safe here.",
      "revId": "78fe95879303e7179262380bbbdcb0394c07a8e5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAAvn///48\u003d",
        "filename": "core/jni/android_server_BluetoothEventLoop.cpp",
        "patchSetId": 1
      },
      "lineNbr": 699,
      "author": {
        "id": 1003450
      },
      "writtenOn": "2010-03-11T14:24:48Z",
      "side": 1,
      "message": "The dbusAddWatch() and dbusRemoveWatch() functions are only called from the thread created above in pthread_create(), but if the thread is created this code never executes, it is only executed when an error occured before creating the thread.",
      "parentUuid": "AAAAvX///44\u003d",
      "revId": "78fe95879303e7179262380bbbdcb0394c07a8e5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAAvn///4w\u003d",
        "filename": "core/jni/android_server_BluetoothEventLoop.cpp",
        "patchSetId": 1
      },
      "lineNbr": 699,
      "author": {
        "id": 1003450
      },
      "writtenOn": "2010-03-11T14:34:53Z",
      "side": 1,
      "message": "Sorry, I missed the \"...skipping 16 common lines\" above. Anyway if I am correct the controlFdW is used in the dbusAddWatch() and dbusRemoveWatch() functions passed along to dbus by the thread in eventLoopMain()/dbus_connection_set_watch_functions(). Before the thread quits the references are removed by calling dbus_connection_set_watch_functions() again with NULL (line 563). Since we wait for the thread to quit on line 689 above with pthread_join() the controlFdW should not be used from anywhere else?",
      "parentUuid": "AAAAvn///48\u003d",
      "revId": "78fe95879303e7179262380bbbdcb0394c07a8e5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}