{
  "comments": [
    {
      "key": {
        "uuid": "15a21f45_17f92855",
        "filename": "core/java/android/bluetooth/BluetoothProfileConnector.java",
        "patchSetId": 7
      },
      "lineNbr": 39,
      "author": {
        "id": 1076123
      },
      "writtenOn": "2019-04-26T13:13:16Z",
      "side": 1,
      "message": "Moving the locking discussion (removal of locks in A2DP) here:\n\nMyles:\n  It looks like a lot of locking is no longer needed.  How do we verify that?\n\nUgo:\n  According to the original implementation CL, this writeLock was meant fix NPE for methods that access mService after checking nullness.\nI think we can remove it since mService is now been defined in BluetoothProfileConnector as volatile.",
      "range": {
        "startLine": 39,
        "startChar": 4,
        "endLine": 39,
        "endChar": 37
      },
      "revId": "d26809501e62ab65700be39a552b2440b5d5af64",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4b6935dc_928a246f",
        "filename": "core/java/android/bluetooth/BluetoothProfileConnector.java",
        "patchSetId": 7
      },
      "lineNbr": 39,
      "author": {
        "id": 1076123
      },
      "writtenOn": "2019-04-26T13:17:58Z",
      "side": 1,
      "message": "My understanding is that volatile guarantees visibility across threads, but not atomicity.  So if we have a race condition:\n\n     Thread 1 : if (mService !\u003d null) {\n\n     Thread 2 : mService \u003d null;\n\n     Thread 1 :   mService.connect(device);\n\nvolatile just guarantees that we\u0027ll have a null-pointer exception (mService will be null in both threads)",
      "parentUuid": "15a21f45_17f92855",
      "range": {
        "startLine": 39,
        "startChar": 4,
        "endLine": 39,
        "endChar": 37
      },
      "revId": "d26809501e62ab65700be39a552b2440b5d5af64",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "03df3d15_192f4d71",
        "filename": "core/java/android/bluetooth/BluetoothProfileConnector.java",
        "patchSetId": 7
      },
      "lineNbr": 39,
      "author": {
        "id": 1306903
      },
      "writtenOn": "2019-04-29T02:25:47Z",
      "side": 1,
      "message": "Correct, this is why I copied the mService to a final IBluetooth* before using it in each profiles, instead of null-check mService directly. This should prevents the null-check race condition you mentioned.\n\nIn fact, some profiles were already using this way to protect mService from race condition (BluetoothA2dpSink, BluetoothHeadset, BluetoothHidHost...).",
      "parentUuid": "4b6935dc_928a246f",
      "range": {
        "startLine": 39,
        "startChar": 4,
        "endLine": 39,
        "endChar": 37
      },
      "revId": "d26809501e62ab65700be39a552b2440b5d5af64",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}