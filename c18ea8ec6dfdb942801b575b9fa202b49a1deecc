{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "aa12a001_1235a3f4",
        "filename": "packages/ConnectivityT/framework-t/src/android/net/nsd/NsdManager.java",
        "patchSetId": 6
      },
      "lineNbr": 298,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2022-02-04T07:26:13Z",
      "side": 1,
      "message": "Suggest explaining how this object fits in to the rest:\n\n/**\n * Tracks information for one multi-network discovery request.\n * Maintains a reference to the user-supplied listener (mBaseListener),\n * and a map with one DiscoveryListener for each currently-connected\n * Network that matches the user-supplied NetworkRequest.\n */\n\nIn fact, I wonder if \"PerNetwork\" is the right description here? That might suggest that there is one of these per network, but in fact, there is exactly one of these for each (multi-network) request. Maybe MultinetworkDiscoveryTracker or MultiNetworkDiscoveryTracker?\n\nConversely, I think that in PerNetworkListeners, \"PerNetwork\" is the correct term to use, because there is one PerNetworkListener per Network.",
      "range": {
        "startLine": 298,
        "startChar": 4,
        "endLine": 298,
        "endChar": 46
      },
      "revId": "c18ea8ec6dfdb942801b575b9fa202b49a1deecc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7b3fe437_13bc07e5",
        "filename": "packages/ConnectivityT/framework-t/src/android/net/nsd/NsdManager.java",
        "patchSetId": 6
      },
      "lineNbr": 305,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2022-02-04T07:26:13Z",
      "side": 1,
      "message": "Should these all be private?\n\nIn fact, could this even be static? Looks like mContext is taken from the base class, but perhaps nothing else? If so you could have the creator of this class pass in the context and make this class static. I think it would be much easier to unit test because you could instantiate one of these without having to instantiate an NsdManager. No need to fix in this CL.",
      "range": {
        "startLine": 305,
        "startChar": 8,
        "endLine": 305,
        "endChar": 13
      },
      "revId": "c18ea8ec6dfdb942801b575b9fa202b49a1deecc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "04b485ee_2a8d99c3",
        "filename": "packages/ConnectivityT/framework-t/src/android/net/nsd/NsdManager.java",
        "patchSetId": 6
      },
      "lineNbr": 308,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2022-02-04T07:26:13Z",
      "side": 1,
      "message": "Isn\u0027t \"wrapped\" is the wrong word here? The thing that is wrapped is not the object we\u0027re creating. It\u0027s the thing that is *inside* the object (i.e., mBaseListener). \"Wrapper\" might be a better word... but I think just plain \"listener\" is better here? It\u0027s clearly different from mBaseListener because that one has the word \"base\" in it.",
      "range": {
        "startLine": 308,
        "startChar": 50,
        "endLine": 308,
        "endChar": 57
      },
      "revId": "c18ea8ec6dfdb942801b575b9fa202b49a1deecc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4db34872_eb8f4bb3",
        "filename": "packages/ConnectivityT/framework-t/src/android/net/nsd/NsdManager.java",
        "patchSetId": 6
      },
      "lineNbr": 319,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2022-02-04T07:26:13Z",
      "side": 1,
      "message": "Does this rely on the fact that Networks are not reused? Because otherwise, the following could happen:\n\n- onLost(123)\n- notifyAllServicesLost()\n- A new network with id 123 connects, oh dear.\n- onAvailable adds a new listener to the map, overwriting the previous one.\n- discoveryStopped callback runs and removes the new listener to the map.\n\nNote that in practice networks aren\u0027t reused so this doesn\u0027t matter... but perhaps you could do something like this in onDiscoveryStopped:\n\n            @Override\n            public void onDiscoveryStopped(String serviceType) {\n                // It\u0027s theoretically possible for Networks to be reused\n                // once they\u0027ve disconnected. If that happens, ignore it.\n                if (this !\u003d mPerNetworkListeners.get(mNetwork)) {\n                    return;\n                }\n                mPerNetworkListeners.remove(mNetwork);\n\n\nActually I think there is another case where this can happen: if the passed-in callback supplies a mutable capability (e.g., VALIDATED). In that case, if the capability disappears, onLost will be called, but then if the capability comes back, onAvailable will be called with the same Network.\n\nThinking about it a bit more I\u0027m not sure if what you have here will behave correctly in that case. The if statement I suggest above will prevent some of the incorrect behaviour, but without holding extra information it might not be possible to make it fully correct if the onDiscoveryStopped caused by an onLost happens after a subsequent onAvailable for that same Network.\n\nNo need to fix in this CL, but should be fixed before ship (at worst, I guess we could prevent users from passing in mutable capabilities here).",
      "range": {
        "startLine": 319,
        "startChar": 53,
        "endLine": 319,
        "endChar": 82
      },
      "revId": "c18ea8ec6dfdb942801b575b9fa202b49a1deecc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "caa6e3bb_a33fcf8f",
        "filename": "packages/ConnectivityT/framework-t/src/android/net/nsd/NsdManager.java",
        "patchSetId": 6
      },
      "lineNbr": 327,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2022-02-04T07:26:13Z",
      "side": 1,
      "message": "Is it an error to call start() after stop? If so, would suggest throwing here, or at least ignoring the attempt.",
      "range": {
        "startLine": 327,
        "startChar": 59,
        "endLine": 327,
        "endChar": 60
      },
      "revId": "c18ea8ec6dfdb942801b575b9fa202b49a1deecc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3fbfd244_d76f52bf",
        "filename": "packages/ConnectivityT/framework-t/src/android/net/nsd/NsdManager.java",
        "patchSetId": 6
      },
      "lineNbr": 337,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2022-02-04T07:26:13Z",
      "side": 1,
      "message": "Does this work correctly if a new network matching the NetworkRequest gets onAvailable after stop has been called?",
      "range": {
        "startLine": 337,
        "startChar": 54,
        "endLine": 337,
        "endChar": 55
      },
      "revId": "c18ea8ec6dfdb942801b575b9fa202b49a1deecc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3a497e64_16aef6e0",
        "filename": "packages/ConnectivityT/framework-t/src/android/net/nsd/NsdManager.java",
        "patchSetId": 6
      },
      "lineNbr": 344,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2022-02-04T07:26:13Z",
      "side": 1,
      "message": "Why not a private final class member?",
      "range": {
        "startLine": 344,
        "startChar": 16,
        "endLine": 344,
        "endChar": 44
      },
      "revId": "c18ea8ec6dfdb942801b575b9fa202b49a1deecc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f143d641_c46cd097",
        "filename": "packages/ConnectivityT/framework-t/src/android/net/nsd/NsdManager.java",
        "patchSetId": 6
      },
      "lineNbr": 373,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2022-02-04T07:26:13Z",
      "side": 1,
      "message": "Can this be null? If not, @NonNull and maybe also throw or WTF is null is passed in to the constructor.",
      "range": {
        "startLine": 373,
        "startChar": 12,
        "endLine": 373,
        "endChar": 19
      },
      "revId": "c18ea8ec6dfdb942801b575b9fa202b49a1deecc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e123fd06_2b4f6758",
        "filename": "packages/ConnectivityT/framework-t/src/android/net/nsd/NsdManager.java",
        "patchSetId": 6
      },
      "lineNbr": 394,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2022-02-04T07:26:13Z",
      "side": 1,
      "message": "FWIW, I think this would be clearer if it were called PerNetworkDiscoveryListener. Delegating- is correct, because it does delegate to a wrapped object. But is purpose is not to delegate, its purpose is to watch for services on a specific network.",
      "range": {
        "startLine": 394,
        "startChar": 22,
        "endLine": 394,
        "endChar": 49
      },
      "revId": "c18ea8ec6dfdb942801b575b9fa202b49a1deecc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "272fb620_d3f9bbb8",
        "filename": "packages/ConnectivityT/framework-t/src/android/net/nsd/NsdManager.java",
        "patchSetId": 6
      },
      "lineNbr": 397,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2022-02-04T07:26:13Z",
      "side": 1,
      "message": "Since this contains more than one object, suggest mFoundInfos plural.",
      "range": {
        "startLine": 397,
        "startChar": 51,
        "endLine": 397,
        "endChar": 61
      },
      "revId": "c18ea8ec6dfdb942801b575b9fa202b49a1deecc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b15f1d6b_0e2b1193",
        "filename": "packages/ConnectivityT/framework-t/src/android/net/nsd/NsdManager.java",
        "patchSetId": 6
      },
      "lineNbr": 417,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2022-02-04T07:26:13Z",
      "side": 1,
      "message": "this",
      "range": {
        "startLine": 417,
        "startChar": 71,
        "endLine": 417,
        "endChar": 74
      },
      "revId": "c18ea8ec6dfdb942801b575b9fa202b49a1deecc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "25a3b676_e514cba1",
        "filename": "packages/ConnectivityT/framework-t/src/android/net/nsd/NsdManager.java",
        "patchSetId": 6
      },
      "lineNbr": 435,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2022-02-04T07:26:13Z",
      "side": 1,
      "message": "Is there some isEmpty() method you can use here instead?\n\nAlso, consider refactoring these two lines to a maybeSendDiscoveryStopped method.",
      "range": {
        "startLine": 435,
        "startChar": 59,
        "endLine": 435,
        "endChar": 70
      },
      "revId": "c18ea8ec6dfdb942801b575b9fa202b49a1deecc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f3da241_fb44f087",
        "filename": "packages/ConnectivityT/framework-t/src/android/net/nsd/NsdManager.java",
        "patchSetId": 6
      },
      "lineNbr": 896,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2022-02-04T07:26:13Z",
      "side": 1,
      "message": "In this callback, the Network inside the NsdServiceInfo will be the network it was found on, right?\n\nIf not, and the Network is null, then you might want to mention it.",
      "range": {
        "startLine": 896,
        "startChar": 61,
        "endLine": 896,
        "endChar": 62
      },
      "revId": "c18ea8ec6dfdb942801b575b9fa202b49a1deecc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d2910a2f_cce55e1d",
        "filename": "packages/ConnectivityT/framework-t/src/android/net/nsd/NsdManager.java",
        "patchSetId": 6
      },
      "lineNbr": 904,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2022-02-04T07:26:13Z",
      "side": 1,
      "message": "Nit: indent these subsequent javadoc lines somehow?",
      "range": {
        "startLine": 904,
        "startChar": 7,
        "endLine": 904,
        "endChar": 11
      },
      "revId": "c18ea8ec6dfdb942801b575b9fa202b49a1deecc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e82ea5d_e200c55f",
        "filename": "packages/ConnectivityT/framework-t/src/android/net/nsd/NsdManager.java",
        "patchSetId": 6
      },
      "lineNbr": 906,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2022-02-04T07:26:13Z",
      "side": 1,
      "message": "Perhaps not for this CL, but we should ensure that apps aren\u0027t allowed to discover services on restricted networks like IMS. Ideally we\u0027d allow each app to discover only those networks that it has access to, but that is likely complex to implement. A simpler alternative might be to require NET_CAPABILITY_NOT_RESTRICTED.\n\nI\u0027d expect that this issue affects our current APIs as well, in which case it needs to be fixed in the service. If it doesn\u0027t, it might be sufficient to splice NET_CAPABILITY_NOT_RESTRICTED into the request here.",
      "range": {
        "startLine": 906,
        "startChar": 62,
        "endLine": 906,
        "endChar": 99
      },
      "revId": "c18ea8ec6dfdb942801b575b9fa202b49a1deecc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8db46e6e_d97374ac",
        "filename": "packages/ConnectivityT/framework-t/src/android/net/nsd/NsdManager.java",
        "patchSetId": 6
      },
      "lineNbr": 909,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2022-02-04T07:26:13Z",
      "side": 1,
      "message": "You don\u0027t need this, text, something along these lines will automatically be added by the @NonNull annotation.",
      "range": {
        "startLine": 909,
        "startChar": 7,
        "endLine": 909,
        "endChar": 22
      },
      "revId": "c18ea8ec6dfdb942801b575b9fa202b49a1deecc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "71bc4f4c_ce19f9f9",
        "filename": "packages/ConnectivityT/framework-t/src/android/net/nsd/NsdManager.java",
        "patchSetId": 6
      },
      "lineNbr": 925,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2022-02-04T07:26:13Z",
      "side": 1,
      "message": "tracker",
      "range": {
        "startLine": 925,
        "startChar": 41,
        "endLine": 925,
        "endChar": 54
      },
      "revId": "c18ea8ec6dfdb942801b575b9fa202b49a1deecc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "94362ef6_314adb2f",
        "filename": "packages/ConnectivityT/framework-t/src/android/net/nsd/NsdManager.java",
        "patchSetId": 6
      },
      "lineNbr": 928,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2022-02-04T07:26:13Z",
      "side": 1,
      "message": "I think this is fine, but... is there a reason for these accesses to be run on the caller\u0027s thread? AFAICT these APIs are fundamentally asynchronous and don\u0027t return any value beyond performing input checks, so in theory you could simply run the input checks (lines 914-918) and then post the rest of the method to the handler.\n\nObviously that will mean that this method will not execute in order with other discovery methods. But I don\u0027t think there\u0027s any reason for the other discovery methods to be run on the caller\u0027s thread either. We could change those as well (in a separate CL if desired).\n\nIf you do this you should be able to remove all the locking since everything is running on the same thread.",
      "range": {
        "startLine": 928,
        "startChar": 8,
        "endLine": 928,
        "endChar": 48
      },
      "revId": "c18ea8ec6dfdb942801b575b9fa202b49a1deecc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}