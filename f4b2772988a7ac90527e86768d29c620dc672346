{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "fe3c5632_09175908",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2021-01-29T21:55:06Z",
      "side": 1,
      "message": "i imagine this works for functions, and variables.\nmaybe for enums and types?\ni imagine that macro definitions might still need to be\nprotected via __ANDROID_API__ conditionals.",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 17
      },
      "revId": "f4b2772988a7ac90527e86768d29c620dc672346",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "80d426b0_60d1e1a8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2021-01-29T22:19:56Z",
      "side": 1,
      "message": "so the intention was always that types and enums should be available to *all* API levels, to make the lives of app developers trying to do \"reflection\" via dlsym() less painful. (in practice, the extent to which this was observed seems to vary wildly.)\n\ndo you have an example of a macro you think shouldn\u0027t be available? the only one i saw here was\n```\n#define AMIDI_API __attribute__((visibility(\"default\")))\n```\n\nwhich seems like it shouldn\u0027t even be necessary? your .map.txt file takes care of this and is the canonical source of truth for what actually gets exposed?",
      "parentUuid": "fe3c5632_09175908",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 17
      },
      "revId": "f4b2772988a7ac90527e86768d29c620dc672346",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "71fd9af3_d916276d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1108919
      },
      "writtenOn": "2021-01-30T00:06:34Z",
      "side": 1,
      "message": "don\u0027t have an example of a macro that needs to be protected.\nmore curiousity about just what it did and didn\u0027t affect in general.\n\nand this wasn\u0027t something meant to hold up submitting this CL.",
      "parentUuid": "80d426b0_60d1e1a8",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 17
      },
      "revId": "f4b2772988a7ac90527e86768d29c620dc672346",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a167e761_ee24f202",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2021-01-30T00:15:10Z",
      "side": 1,
      "message": "cool, happy to help if you hit some weird cases (we certainly have in bionic historically, usually of the form \"broken configure script assumes that the presence of some macro constant is the way to test for the availability of a function that uses that constant\"), but hopefully that won\u0027t be the case for Android API.\n\nthis is all part of jiyong\u0027s grander plan to make it easier for app developers to test for API availability, but in the short term it\u0027s mainly just \"less crap for OS developers to have to remember --- use __INTRODUCED_IN() in your .h, write a .map.txt, job done!\".",
      "parentUuid": "71fd9af3_d916276d",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 17
      },
      "revId": "f4b2772988a7ac90527e86768d29c620dc672346",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4a7d3f73_9a5bf1a9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2021-01-29T17:14:01Z",
      "side": 1,
      "message": "ping for OWNERS...",
      "revId": "f4b2772988a7ac90527e86768d29c620dc672346",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}