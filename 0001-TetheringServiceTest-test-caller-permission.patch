From 40e6e017bf2ea2573e24ae72b08e78947eb03b2a Mon Sep 17 00:00:00 2001
From: markchien <markchien@google.com>
Date: Fri, 17 Apr 2020 16:18:44 +0800
Subject: [PATCH] TetheringServiceTest: test caller permission

Bug: 141256482
Test: atest TetheringTests
Change-Id: I7beea3f011d930e433443ed62d772a3f8cce5d78
---
 .../tethering/TetheringServiceTest.java       | 156 ++++++++++++++++--
 1 file changed, 143 insertions(+), 13 deletions(-)

diff --git a/packages/Tethering/tests/unit/src/com/android/networkstack/tethering/TetheringServiceTest.java b/packages/Tethering/tests/unit/src/com/android/networkstack/tethering/TetheringServiceTest.java
index 51bad9af23e..c508e1154b8 100644
--- a/packages/Tethering/tests/unit/src/com/android/networkstack/tethering/TetheringServiceTest.java
+++ b/packages/Tethering/tests/unit/src/com/android/networkstack/tethering/TetheringServiceTest.java
@@ -16,20 +16,28 @@
 
 package com.android.networkstack.tethering;
 
+import static android.Manifest.permission.ACCESS_NETWORK_STATE;
+import static android.Manifest.permission.TETHER_PRIVILEGED;
 import static android.net.TetheringManager.TETHERING_WIFI;
+import static android.net.TetheringManager.TETHER_ERROR_NO_ACCESS_TETHERING_PERMISSION;
+import static android.net.TetheringManager.TETHER_ERROR_NO_CHANGE_TETHERING_PERMISSION;
 import static android.net.TetheringManager.TETHER_ERROR_NO_ERROR;
 
 import static org.junit.Assert.assertEquals;
 import static org.mockito.ArgumentMatchers.eq;
+import static org.mockito.Mockito.reset;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyNoMoreInteractions;
 import static org.mockito.Mockito.when;
 
+import android.app.UiAutomation;
 import android.content.Intent;
 import android.net.IIntResultListener;
 import android.net.ITetheringConnector;
 import android.net.ITetheringEventCallback;
 import android.net.TetheringRequestParcel;
+import android.os.Bundle;
+import android.os.Handler;
 import android.os.ResultReceiver;
 
 import androidx.test.InstrumentationRegistry;
@@ -57,6 +65,7 @@ public final class TetheringServiceTest {
     private Tethering mTethering;
     private Intent mMockServiceIntent;
     private ITetheringConnector mTetheringConnector;
+    private UiAutomation mUiAutomation;
 
     private class TestTetheringResult extends IIntResultListener.Stub {
         private int mResult = -1; // Default value that does not match any result code.
@@ -70,9 +79,26 @@ public final class TetheringServiceTest {
         }
     }
 
+    private class MyResultReceiver extends ResultReceiver {
+        MyResultReceiver(Handler handler) {
+            super(handler);
+        }
+        private int mResult = -1; // Default value that does not match any result code.
+        @Override
+        protected void onReceiveResult(int resultCode, Bundle resultData) {
+            mResult = resultCode;
+        }
+
+        public void assertResult(int expected) {
+            assertEquals(expected, mResult);
+        }
+    }
+
     @Before
     public void setUp() throws Exception {
         MockitoAnnotations.initMocks(this);
+        mUiAutomation =
+            InstrumentationRegistry.getInstrumentation().getUiAutomation();
         mServiceTestRule = new ServiceTestRule();
         mMockServiceIntent = new Intent(
                 InstrumentationRegistry.getTargetContext(),
@@ -83,45 +109,77 @@ public final class TetheringServiceTest {
         final MockTetheringService service = mockConnector.getService();
         mTethering = service.getTethering();
         verify(mTethering).startStateMachineUpdaters();
-        when(mTethering.hasTetherableConfiguration()).thenReturn(true);
+        initTetheringConfiguration();
     }
 
     @After
     public void tearDown() throws Exception {
         mServiceTestRule.unbindService();
+        mUiAutomation.dropShellPermissionIdentity();
+    }
+
+    private void initTetheringConfiguration() {
+        when(mTethering.hasTetherableConfiguration()).thenReturn(true);
+    }
+
+    private void assertCheckAndNotifyCommonPermissionFail(final TestTetheringResult result) {
+        verify(mTethering).isTetherProvisioningRequired();
+        verifyNoMoreInteractions(mTethering);
+        result.assertResult(TETHER_ERROR_NO_CHANGE_TETHERING_PERMISSION);
     }
 
     @Test
     public void testTether() throws Exception {
-        when(mTethering.tether(TEST_IFACE_NAME)).thenReturn(TETHER_ERROR_NO_ERROR);
         final TestTetheringResult result = new TestTetheringResult();
         mTetheringConnector.tether(TEST_IFACE_NAME, TEST_CALLER_PKG, result);
+        assertCheckAndNotifyCommonPermissionFail(result);
+        reset(mTethering);
+
+        mUiAutomation.adoptShellPermissionIdentity(TETHER_PRIVILEGED);
+        initTetheringConfiguration();
+        when(mTethering.tether(TEST_IFACE_NAME)).thenReturn(TETHER_ERROR_NO_ERROR);
+        final TestTetheringResult result2 = new TestTetheringResult();
+        mTetheringConnector.tether(TEST_IFACE_NAME, TEST_CALLER_PKG, result2);
         verify(mTethering).hasTetherableConfiguration();
         verify(mTethering).tether(TEST_IFACE_NAME);
         verifyNoMoreInteractions(mTethering);
-        result.assertResult(TETHER_ERROR_NO_ERROR);
+        result2.assertResult(TETHER_ERROR_NO_ERROR);
     }
 
     @Test
     public void testUntether() throws Exception {
-        when(mTethering.untether(TEST_IFACE_NAME)).thenReturn(TETHER_ERROR_NO_ERROR);
         final TestTetheringResult result = new TestTetheringResult();
         mTetheringConnector.untether(TEST_IFACE_NAME, TEST_CALLER_PKG, result);
+        assertCheckAndNotifyCommonPermissionFail(result);
+        reset(mTethering);
+
+        mUiAutomation.adoptShellPermissionIdentity(TETHER_PRIVILEGED);
+        initTetheringConfiguration();
+        when(mTethering.untether(TEST_IFACE_NAME)).thenReturn(TETHER_ERROR_NO_ERROR);
+        final TestTetheringResult result2 = new TestTetheringResult();
+        mTetheringConnector.untether(TEST_IFACE_NAME, TEST_CALLER_PKG, result2);
         verify(mTethering).hasTetherableConfiguration();
         verify(mTethering).untether(TEST_IFACE_NAME);
         verifyNoMoreInteractions(mTethering);
-        result.assertResult(TETHER_ERROR_NO_ERROR);
+        result2.assertResult(TETHER_ERROR_NO_ERROR);
     }
 
     @Test
     public void testSetUsbTethering() throws Exception {
-        when(mTethering.setUsbTethering(true /* enable */)).thenReturn(TETHER_ERROR_NO_ERROR);
         final TestTetheringResult result = new TestTetheringResult();
         mTetheringConnector.setUsbTethering(true /* enable */, TEST_CALLER_PKG, result);
+        assertCheckAndNotifyCommonPermissionFail(result);
+        reset(mTethering);
+
+        mUiAutomation.adoptShellPermissionIdentity(TETHER_PRIVILEGED);
+        initTetheringConfiguration();
+        when(mTethering.setUsbTethering(true /* enable */)).thenReturn(TETHER_ERROR_NO_ERROR);
+        final TestTetheringResult result2 = new TestTetheringResult();
+        mTetheringConnector.setUsbTethering(true /* enable */, TEST_CALLER_PKG, result2);
         verify(mTethering).hasTetherableConfiguration();
         verify(mTethering).setUsbTethering(true /* enable */);
         verifyNoMoreInteractions(mTethering);
-        result.assertResult(TETHER_ERROR_NO_ERROR);
+        result2.assertResult(TETHER_ERROR_NO_ERROR);
     }
 
     @Test
@@ -130,8 +188,35 @@ public final class TetheringServiceTest {
         final TetheringRequestParcel request = new TetheringRequestParcel();
         request.tetheringType = TETHERING_WIFI;
         mTetheringConnector.startTethering(request, TEST_CALLER_PKG, result);
+        assertCheckAndNotifyCommonPermissionFail(result);
+        reset(mTethering);
+
+        mUiAutomation.adoptShellPermissionIdentity(TETHER_PRIVILEGED);
+        initTetheringConfiguration();
+        final TestTetheringResult result2 = new TestTetheringResult();
+        mTetheringConnector.startTethering(request, TEST_CALLER_PKG, result2);
         verify(mTethering).hasTetherableConfiguration();
-        verify(mTethering).startTethering(eq(request), eq(result));
+        verify(mTethering).startTethering(eq(request), eq(result2));
+        verifyNoMoreInteractions(mTethering);
+    }
+
+    @Test
+    public void testStartTetheringWithExemptFromEntitlementCheck() throws Exception {
+        final TestTetheringResult result = new TestTetheringResult();
+        final TetheringRequestParcel request = new TetheringRequestParcel();
+        request.tetheringType = TETHERING_WIFI;
+        request.exemptFromEntitlementCheck = true;
+        mTetheringConnector.startTethering(request, TEST_CALLER_PKG, result);
+        verifyNoMoreInteractions(mTethering);
+        result.assertResult(TETHER_ERROR_NO_CHANGE_TETHERING_PERMISSION);
+        reset(mTethering);
+
+        mUiAutomation.adoptShellPermissionIdentity(TETHER_PRIVILEGED);
+        initTetheringConfiguration();
+        final TestTetheringResult result2 = new TestTetheringResult();
+        mTetheringConnector.startTethering(request, TEST_CALLER_PKG, result2);
+        verify(mTethering).hasTetherableConfiguration();
+        verify(mTethering).startTethering(eq(request), eq(result2));
         verifyNoMoreInteractions(mTethering);
     }
 
@@ -139,25 +224,49 @@ public final class TetheringServiceTest {
     public void testStopTethering() throws Exception {
         final TestTetheringResult result = new TestTetheringResult();
         mTetheringConnector.stopTethering(TETHERING_WIFI, TEST_CALLER_PKG, result);
+        assertCheckAndNotifyCommonPermissionFail(result);
+        reset(mTethering);
+
+        mUiAutomation.adoptShellPermissionIdentity(TETHER_PRIVILEGED);
+        initTetheringConfiguration();
+        final TestTetheringResult result2 = new TestTetheringResult();
+        mTetheringConnector.stopTethering(TETHERING_WIFI, TEST_CALLER_PKG, result2);
         verify(mTethering).hasTetherableConfiguration();
         verify(mTethering).stopTethering(TETHERING_WIFI);
         verifyNoMoreInteractions(mTethering);
-        result.assertResult(TETHER_ERROR_NO_ERROR);
+        result2.assertResult(TETHER_ERROR_NO_ERROR);
     }
 
     @Test
     public void testRequestLatestTetheringEntitlementResult() throws Exception {
-        final ResultReceiver result = new ResultReceiver(null);
+        final MyResultReceiver result = new MyResultReceiver(null);
         mTetheringConnector.requestLatestTetheringEntitlementResult(TETHERING_WIFI, result,
                 true /* showEntitlementUi */, TEST_CALLER_PKG);
+        verify(mTethering).isTetherProvisioningRequired();
+        verifyNoMoreInteractions(mTethering);
+        result.assertResult(TETHER_ERROR_NO_CHANGE_TETHERING_PERMISSION);
+        reset(mTethering);
+
+        mUiAutomation.adoptShellPermissionIdentity(TETHER_PRIVILEGED);
+        initTetheringConfiguration();
+        final MyResultReceiver result2 = new MyResultReceiver(null);
+        mTetheringConnector.requestLatestTetheringEntitlementResult(TETHERING_WIFI, result2,
+                true /* showEntitlementUi */, TEST_CALLER_PKG);
         verify(mTethering).hasTetherableConfiguration();
         verify(mTethering).requestLatestTetheringEntitlementResult(eq(TETHERING_WIFI),
-                eq(result), eq(true) /* showEntitlementUi */);
+                eq(result2), eq(true) /* showEntitlementUi */);
         verifyNoMoreInteractions(mTethering);
     }
 
     @Test
     public void testRegisterTetheringEventCallback() throws Exception {
+        mTetheringConnector.registerTetheringEventCallback(mITetheringEventCallback,
+                TEST_CALLER_PKG);
+        verify(mITetheringEventCallback).onCallbackStopped(
+                TETHER_ERROR_NO_ACCESS_TETHERING_PERMISSION);
+        verifyNoMoreInteractions(mTethering);
+
+        mUiAutomation.adoptShellPermissionIdentity(ACCESS_NETWORK_STATE);
         mTetheringConnector.registerTetheringEventCallback(mITetheringEventCallback,
                 TEST_CALLER_PKG);
         verify(mTethering).registerTetheringEventCallback(eq(mITetheringEventCallback));
@@ -166,6 +275,13 @@ public final class TetheringServiceTest {
 
     @Test
     public void testUnregisterTetheringEventCallback() throws Exception {
+        mTetheringConnector.unregisterTetheringEventCallback(mITetheringEventCallback,
+                TEST_CALLER_PKG);
+        verifyNoMoreInteractions(mTethering);
+        verify(mITetheringEventCallback).onCallbackStopped(
+                TETHER_ERROR_NO_ACCESS_TETHERING_PERMISSION);
+
+        mUiAutomation.adoptShellPermissionIdentity(ACCESS_NETWORK_STATE);
         mTetheringConnector.unregisterTetheringEventCallback(mITetheringEventCallback,
                 TEST_CALLER_PKG);
         verify(mTethering).unregisterTetheringEventCallback(
@@ -177,18 +293,32 @@ public final class TetheringServiceTest {
     public void testStopAllTethering() throws Exception {
         final TestTetheringResult result = new TestTetheringResult();
         mTetheringConnector.stopAllTethering(TEST_CALLER_PKG, result);
+        assertCheckAndNotifyCommonPermissionFail(result);
+        reset(mTethering);
+
+        mUiAutomation.adoptShellPermissionIdentity(TETHER_PRIVILEGED);
+        initTetheringConfiguration();
+        final TestTetheringResult result2 = new TestTetheringResult();
+        mTetheringConnector.stopAllTethering(TEST_CALLER_PKG, result2);
         verify(mTethering).hasTetherableConfiguration();
         verify(mTethering).untetherAll();
         verifyNoMoreInteractions(mTethering);
-        result.assertResult(TETHER_ERROR_NO_ERROR);
+        result2.assertResult(TETHER_ERROR_NO_ERROR);
     }
 
     @Test
     public void testIsTetheringSupported() throws Exception {
         final TestTetheringResult result = new TestTetheringResult();
         mTetheringConnector.isTetheringSupported(TEST_CALLER_PKG, result);
+        assertCheckAndNotifyCommonPermissionFail(result);
+        reset(mTethering);
+
+        mUiAutomation.adoptShellPermissionIdentity(TETHER_PRIVILEGED);
+        initTetheringConfiguration();
+        final TestTetheringResult result2 = new TestTetheringResult();
+        mTetheringConnector.isTetheringSupported(TEST_CALLER_PKG, result2);
         verify(mTethering).hasTetherableConfiguration();
         verifyNoMoreInteractions(mTethering);
-        result.assertResult(TETHER_ERROR_NO_ERROR);
+        result2.assertResult(TETHER_ERROR_NO_ERROR);
     }
 }
-- 
2.26.1.301.g55bc3eb7cb9-goog

